(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-chart', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = global || self, factory(global['ngx-chart'] = {}, global.ng.core, global.ng.common));
}(this, (function (exports, core, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var PieChartComponent = /** @class */ (function () {
        function PieChartComponent() {
            this.selectedItem = new core.EventEmitter();
            this.chartOptions = {
                showLegend: true,
                legendTitle: 'Total',
            };
            this.view = {
                height: 200,
                width: 200,
                radius: 80
            };
            this.chartView = [];
            this.totalSum = 0;
            this.processedData = [];
            this.legendData = [];
        }
        PieChartComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.chartView.push(this.view.height + 'px');
            this.chartView.push(this.view.width + 'px');
            if (this.chartData) {
                // Get total number of records
                this.totalSum = this.chartData.reduce(function (a, b) {
                    return a + b.value;
                }, 0);
                //generate Data for piechart
                var prevAngle_1 = 0;
                this.chartData.map(function (x, index) {
                    var legend = {
                        name: x.name,
                        value: x.value,
                        color: x.color
                    };
                    _this.legendData.push(legend);
                    var percentage = _this.getPercentage(x.value, _this.totalSum);
                    if (percentage > 0) {
                        var circlePercentage = percentage / 10 * 36;
                        var pieData = {
                            color: x.color,
                            a1: prevAngle_1,
                            a2: prevAngle_1 + circlePercentage,
                            name: x.name
                        };
                        prevAngle_1 = prevAngle_1 + circlePercentage;
                        _this.processedData.push(pieData);
                    }
                });
            }
        };
        PieChartComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            // create svg 
            if (this.processedData.length > 0) {
                this.span.map(function (item, index) {
                    _this.processedData[index].a2 = _this.processedData[index].a2 >= 360 ? 359.9 : _this.processedData[index].a2;
                    item.nativeElement.setAttribute('d', _this.describeArc(_this.view.height / 2, _this.view.height / 2, _this.view.radius, _this.processedData[index].a1, _this.processedData[index].a2));
                    item.nativeElement.setAttribute('fill', _this.processedData[index].color);
                });
            }
        };
        PieChartComponent.prototype.polarToCartesian = function (centerX, centerY, radius, angleInDegrees) {
            var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;
            return {
                x: centerX + (radius * Math.cos(angleInRadians)),
                y: centerY + (radius * Math.sin(angleInRadians))
            };
        };
        PieChartComponent.prototype.describeArc = function (x, y, radius, startAngle, endAngle) {
            var start = this.polarToCartesian(x, y, radius, endAngle);
            var end = this.polarToCartesian(x, y, radius, startAngle);
            var arcSweep = endAngle - startAngle <= 180 ? "0" : "1";
            var d = [
                "M", start.x, start.y,
                "A", radius, radius, 0, arcSweep, 0, end.x, end.y,
                "L", x, y,
                "L", start.x, start.y
            ].join(" ");
            return d;
        };
        PieChartComponent.prototype.getPercentage = function (partialValue, totalValue) {
            return (100 * partialValue) / totalValue;
        };
        PieChartComponent.prototype.getItemClicked = function (item) {
            var selected = {
                name: item.name,
                value: item.value
            };
            this.selectedItem.emit(selected);
        };
        __decorate([
            core.Input()
        ], PieChartComponent.prototype, "chartData", void 0);
        __decorate([
            core.ViewChildren('el')
        ], PieChartComponent.prototype, "span", void 0);
        __decorate([
            core.Output()
        ], PieChartComponent.prototype, "selectedItem", void 0);
        __decorate([
            core.Input()
        ], PieChartComponent.prototype, "chartOptions", void 0);
        __decorate([
            core.Input()
        ], PieChartComponent.prototype, "view", void 0);
        PieChartComponent = __decorate([
            core.Component({
                selector: 'ngx-pie-chart',
                template: "<div class=\"chart-view ngx-pie\">\n  <svg class=\"chart-wrapper\" [ngStyle]=\"{'height': chartView[0],'width': chartView[1]}\">\n    <path #el class=\"pie-chart-path\" chartTooltip tooltip={{item.name}} (click)=\"getItemClicked(item)\" *ngFor=\"let item of processedData; let i=index\" />\n  </svg>\n  <div class=\"legend\" *ngIf=\"chartOptions.showLegend\">\n    <h4>{{chartOptions.legendTitle +' : '+  totalSum}}</h4>\n    <div class=\"legend-item\" *ngFor=\"let item of legendData; let i=index\">\n      <div class=\"legend-item-colour\" [ngStyle]=\"{'background': item.color}\"></div><span class=\"legend-item-name\" >{{item.name}}</span><span class=\"legend-item-value\" >{{item.value}}</span>\n    </div>\n  </div>\n</div>",
                styles: ["path.pie-chart-path:hover{cursor:pointer}"]
            })
        ], PieChartComponent);
        return PieChartComponent;
    }());

    var BarChartComponent = /** @class */ (function () {
        function BarChartComponent() {
            this.selectedItem = new core.EventEmitter();
            this.chartData = [];
            this.chartOptions = {
                roundedCorners: false,
                isHorizontal: false,
                showLegend: true,
                legendTitle: 'Total',
            };
            this.view = {
                height: 200,
                width: 200
            };
            this.lines = [];
            this.totalSum = 0;
            this.isHorizontal = true;
            this.barLineType = 'round';
            this.chartView = [];
            this.scale = 100;
        }
        BarChartComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.chartView.push(this.view.height + 'px');
            this.chartView.push(this.view.width + 'px');
            this.barLineType = this.chartOptions['roundedCorners'] ? 'round' : 'butt';
            this.isHorizontal = this.chartOptions['isHorizontal'] ? true : false;
            this.scale = this.isHorizontal ? this.view.width : this.view.height;
            this.getTotalSum(this.chartData);
            var value = Math.max.apply(Math, this.chartData.map(function (o) {
                return o.value;
            }));
            if (value > this.scale) {
                var normalizedValue_1 = value / this.scale;
                this.chartData.map(function (y, index) {
                    _this.chartData[index]['normalized'] = Number(y.value) / normalizedValue_1;
                });
            }
            else {
                var normalizedValue_2 = this.scale / value;
                this.chartData.map(function (y, index) {
                    _this.chartData[index]['normalized'] = Number(y.value) * normalizedValue_2;
                });
            }
            this.lines = this.isHorizontal ? this.calculateHorizontalBarLines(this.chartData) : this.calculateVerticalBarLines(this.chartData);
        };
        BarChartComponent.prototype.ngAfterViewInit = function () { };
        BarChartComponent.prototype.getItemClicked = function (line) {
            var selectedbar = {
                name: line.name,
                value: line.value
            };
            this.selectedItem.emit(JSON.stringify(selectedbar));
        };
        BarChartComponent.prototype.calculateHorizontalBarLines = function (graphData) {
            var _this = this;
            var barLines = [];
            graphData.map(function (x, index) {
                var background = {
                    x1: 10,
                    y1: index * 20 + 20,
                    y2: index * 20 + 20,
                    x2: _this.view.width,
                    color: '#EBEBEB',
                    name: x.name,
                    value: x.value
                };
                barLines.push(background);
                if (x.value > 0) {
                    var line = {
                        x1: 10,
                        y1: index * 20 + 20,
                        y2: index * 20 + 20,
                        x2: x.normalized < 10 ? _this.barLineType == 'butt' ? 11 : 10 : x.normalized,
                        color: x.color,
                        name: x.name,
                        value: x.value
                    };
                    barLines.push(line);
                }
            });
            return barLines;
        };
        BarChartComponent.prototype.calculateVerticalBarLines = function (graphData) {
            var _this = this;
            var barLines = [];
            graphData.map(function (x, index) {
                var background = {
                    x1: index * 20 + 20,
                    y1: 10,
                    x2: index * 20 + 20,
                    y2: _this.scale,
                    color: '#EBEBEB',
                    name: x.name,
                    value: x.value
                };
                barLines.push(background);
                if (x.value > 0) {
                    var line = {
                        x1: index * 20 + 20,
                        y1: (_this.scale + 10) - x.normalized > _this.scale ? _this.barLineType == 'butt' ? (_this.scale - 1) : _this.scale : (_this.scale + 10) - x.normalized,
                        x2: index * 20 + 20,
                        y2: _this.scale,
                        color: x.color,
                        name: x.name,
                        value: x.value
                    };
                    barLines.push(line);
                }
            });
            console.log(barLines);
            return barLines;
        };
        BarChartComponent.prototype.getTotalSum = function (chartData) {
            // Get total number of records
            this.totalSum = chartData.reduce(function (a, b) {
                return a + parseInt(b.value);
            }, 0);
        };
        __decorate([
            core.Output()
        ], BarChartComponent.prototype, "selectedItem", void 0);
        __decorate([
            core.Input()
        ], BarChartComponent.prototype, "chartData", void 0);
        __decorate([
            core.Input()
        ], BarChartComponent.prototype, "chartOptions", void 0);
        __decorate([
            core.Input()
        ], BarChartComponent.prototype, "view", void 0);
        BarChartComponent = __decorate([
            core.Component({
                selector: 'ngx-bar-chart',
                template: "<div class=\"chart-view  ngx-bar\">\r\n  <div class=\"chart-wrapper\" [ngStyle]=\"{'height': chartView[0],'width': chartView[1]}\">\r\n    <svg id=\"lines\" [attr.viewBox]=\"'0 0 '+ (isHorizontal ? scale+40 : (lines[lines.length-1].x1 + 20))+' ' + (isHorizontal ? (lines[lines.length-1].y2 + 20) : (scale+20))\">\r\n      <g>\r\n        <line *ngFor=\"let line of lines\" stroke-width=\"10\" class=\"line\" [attr.x1]=\"line.x1\" [attr.y1]=\"line.y1 \"\r\n          [attr.x2]=\"line.x2\" [attr.y2]=\"line.y2\" [attr.stroke]=\"line.color\" \u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 [attr.stroke-linecap]=\"barLineType\"\r\n          [attr.title]=\"line.name\" (click)=\"getItemClicked(line)\" chartTooltip tooltip={{line.name}} />\r\n      </g>\r\n    </svg>\r\n  </div>\r\n  <div class=\"legend\" *ngIf=\"chartOptions.showLegend\">\r\n    <h4>{{chartOptions.legendTitle +' : '+ totalSum}}</h4>\r\n    <div class=\"legend-item\" *ngFor=\"let item of chartData; let i=index\">\r\n      <div class=\"legend-item-colour\" [ngStyle]=\"{'background': item.color}\"></div><span\r\n        class=\"legend-item-name\">{{item.name}}</span><span class=\"legend-item-value\">{{item.value}}</span>\r\n    </div>\r\n  </div>\r\n\r\n</div>",
                styles: [".line{cursor:pointer}"]
            })
        ], BarChartComponent);
        return BarChartComponent;
    }());

    var DonutChartComponent = /** @class */ (function () {
        function DonutChartComponent() {
            this.selectedItem = new core.EventEmitter();
            this.chartOptions = {
                showLegend: true,
                legendTitle: 'Total',
            };
            this.view = {
                height: 200,
                width: 200,
                radius: 80,
                donutSize: 20
            };
            this.totalSum = 0;
            this.processedData = [];
            this.legendData = [];
            this.chartView = [];
        }
        DonutChartComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.chartData) {
                this.view['donutSize'] = this.view['donutSize'] ? this.view['donutSize'] : 20;
                this.chartView.push(this.view.height + 'px');
                this.chartView.push(this.view.width + 'px');
                // Get total number of records
                this.totalSum = this.chartData.reduce(function (a, b) {
                    return a + b.value;
                }, 0);
                //generate Data for list
                var prevAngle_1 = 0;
                this.chartData.map(function (x, index) {
                    var legend = {
                        name: x.name,
                        value: x.value,
                        color: x.color
                    };
                    _this.legendData.push(legend);
                    var percentage = _this.getPercentage(x.value, _this.totalSum);
                    if (percentage > 0) {
                        var circlePercentage = percentage / 10 * 36;
                        var pieData = {
                            color: x.color,
                            a1: prevAngle_1,
                            a2: prevAngle_1 + circlePercentage,
                            name: x.name
                        };
                        prevAngle_1 = prevAngle_1 + circlePercentage;
                        _this.processedData.push(pieData);
                    }
                });
            }
        };
        DonutChartComponent.prototype.getPercentage = function (partialValue, totalValue) {
            return (100 * partialValue) / totalValue;
        };
        DonutChartComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            //create svg
            if (this.processedData.length > 0) {
                this.span.map(function (item, index) {
                    item.nativeElement.setAttribute('d', _this.describeArc(_this.view.height / 2, _this.view.width / 2, _this.view.radius, _this.processedData[index].a1, _this.processedData[index].a2 == 360 ? 359.99 : _this.processedData[index].a2));
                    item.nativeElement.setAttribute('stroke', _this.processedData[index].color);
                });
            }
        };
        DonutChartComponent.prototype.polarToCartesian = function (centerX, centerY, radius, angleInDegrees) {
            var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;
            return {
                x: centerX + (radius * Math.cos(angleInRadians)),
                y: centerY + (radius * Math.sin(angleInRadians))
            };
        };
        DonutChartComponent.prototype.describeArc = function (x, y, radius, startAngle, endAngle) {
            var start = this.polarToCartesian(x, y, radius, endAngle);
            var end = this.polarToCartesian(x, y, radius, startAngle);
            var largeArcFlag = endAngle - startAngle <= 180 ? "0" : "1";
            var d = [
                "M", start.x, start.y,
                "A", radius, radius, 0, largeArcFlag, 0, end.x, end.y
            ].join(" ");
            return d;
        };
        DonutChartComponent.prototype.getItemClicked = function (item) {
            var selected = {
                name: item.name,
                value: item.value
            };
            this.selectedItem.emit(selected);
        };
        DonutChartComponent.prototype.show = function (status) {
        };
        __decorate([
            core.Input()
        ], DonutChartComponent.prototype, "chartData", void 0);
        __decorate([
            core.Output()
        ], DonutChartComponent.prototype, "selectedItem", void 0);
        __decorate([
            core.ViewChildren('el')
        ], DonutChartComponent.prototype, "span", void 0);
        __decorate([
            core.Input()
        ], DonutChartComponent.prototype, "chartOptions", void 0);
        __decorate([
            core.Input()
        ], DonutChartComponent.prototype, "view", void 0);
        DonutChartComponent = __decorate([
            core.Component({
                selector: 'ngx-donut-chart',
                template: "<div class=\"chart-view ngx-donut\">\n  <svg class=\"chart-wrapper\" [ngStyle]=\"{'height': chartView[0],'width': chartView[1]}\">\n    <path width=\"100%\" height=\"100%\" #el fill=\"none\" [attr.stroke-width]=\"this.view.donutSize\" *ngFor=\"let item of processedData; let i=index\"\n      (click)=\"getItemClicked(item)\" chartTooltip tooltip={{item.name}}/>\n\n  </svg>\n  <div class=\"legend\" *ngIf=\"chartOptions.showLegend\">\n    <h4>{{chartOptions.legendTitle +' : '+  totalSum}}</h4>\n    <div class=\"legend-item\" *ngFor=\"let item of legendData; let i=index\" >\n      <div class=\"legend-item-colour\" [ngStyle]=\"{'background': item.color}\"></div><span class=\"legend-item-name\" >{{item.name}}</span><span class=\"legend-item-value\" >{{item.value}}</span>\n    </div>\n  </div>\n</div>",
                styles: ["path:hover{cursor:pointer}"]
            })
        ], DonutChartComponent);
        return DonutChartComponent;
    }());

    var TooltipDirective = /** @class */ (function () {
        function TooltipDirective(el, renderer) {
            this.el = el;
            this.renderer = renderer;
            this.placement = 'top';
            this.offset = 10;
        }
        TooltipDirective.prototype.onMouseEnter = function () {
            if (!this.tooltip) {
                this.show();
            }
        };
        TooltipDirective.prototype.onMouseLeave = function () {
            if (this.tooltip) {
                this.hide();
            }
        };
        TooltipDirective.prototype.show = function () {
            this.create();
            this.setPosition();
            this.renderer.addClass(this.tooltip, 'ngx-chart-tooltip-show');
        };
        TooltipDirective.prototype.hide = function () {
            this.renderer.removeClass(this.tooltip, 'ngx-chart-tooltip-show');
            this.renderer.removeChild(document.body, this.tooltip);
            this.tooltip = null;
        };
        TooltipDirective.prototype.create = function () {
            this.tooltip = this.renderer.createElement('span');
            this.renderer.appendChild(this.tooltip, this.renderer.createText(this.tooltipTitle) // textNode
            );
            this.renderer.appendChild(document.body, this.tooltip);
            this.renderer.addClass(this.tooltip, 'ngx-chart-tooltip');
            this.renderer.addClass(this.tooltip, "ngx-chart-tooltip-" + this.placement);
        };
        TooltipDirective.prototype.setPosition = function () {
            var hostPos = this.el.nativeElement.getBoundingClientRect();
            var tooltipPos = this.tooltip.getBoundingClientRect();
            var scrollPos = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
            var top, left;
            if (this.placement === 'bottom') {
                top = hostPos.bottom + this.offset;
                left = hostPos.left + (hostPos.width - tooltipPos.width) / 2;
            }
            else if (this.placement === 'left') {
                top = hostPos.top + (hostPos.height - tooltipPos.height) / 2;
                left = hostPos.left - tooltipPos.width - this.offset;
            }
            else if (this.placement === 'right') {
                top = hostPos.top + (hostPos.height - tooltipPos.height) / 2;
                left = hostPos.right + this.offset;
            }
            else {
                // top
                top = hostPos.top - tooltipPos.height - this.offset;
                left = hostPos.left + (hostPos.width - tooltipPos.width) / 2;
            }
            this.renderer.setStyle(this.tooltip, 'top', top + scrollPos + "px");
            this.renderer.setStyle(this.tooltip, 'left', left + "px");
        };
        TooltipDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input('tooltip')
        ], TooltipDirective.prototype, "tooltipTitle", void 0);
        __decorate([
            core.Input()
        ], TooltipDirective.prototype, "placement", void 0);
        __decorate([
            core.HostListener('mouseenter')
        ], TooltipDirective.prototype, "onMouseEnter", null);
        __decorate([
            core.HostListener('mouseleave')
        ], TooltipDirective.prototype, "onMouseLeave", null);
        TooltipDirective = __decorate([
            core.Directive({
                selector: '[chartTooltip]'
            })
        ], TooltipDirective);
        return TooltipDirective;
    }());

    var NgxChartModule = /** @class */ (function () {
        function NgxChartModule() {
        }
        NgxChartModule = __decorate([
            core.NgModule({
                declarations: [PieChartComponent, BarChartComponent, DonutChartComponent, TooltipDirective],
                imports: [
                    common.CommonModule
                ],
                exports: [PieChartComponent, BarChartComponent, DonutChartComponent]
            })
        ], NgxChartModule);
        return NgxChartModule;
    }());

    exports.BarChartComponent = BarChartComponent;
    exports.DonutChartComponent = DonutChartComponent;
    exports.NgxChartModule = NgxChartModule;
    exports.PieChartComponent = PieChartComponent;
    exports.ɵa = TooltipDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-chart.umd.js.map
