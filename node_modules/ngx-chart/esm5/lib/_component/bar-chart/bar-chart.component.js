import { __decorate } from "tslib";
import { Component, EventEmitter, Input, Output, } from '@angular/core';
var BarChartComponent = /** @class */ (function () {
    function BarChartComponent() {
        this.selectedItem = new EventEmitter();
        this.chartData = [];
        this.chartOptions = {
            roundedCorners: false,
            isHorizontal: false,
            showLegend: true,
            legendTitle: 'Total',
        };
        this.view = {
            height: 200,
            width: 200
        };
        this.lines = [];
        this.totalSum = 0;
        this.isHorizontal = true;
        this.barLineType = 'round';
        this.chartView = [];
        this.scale = 100;
    }
    BarChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.chartView.push(this.view.height + 'px');
        this.chartView.push(this.view.width + 'px');
        this.barLineType = this.chartOptions['roundedCorners'] ? 'round' : 'butt';
        this.isHorizontal = this.chartOptions['isHorizontal'] ? true : false;
        this.scale = this.isHorizontal ? this.view.width : this.view.height;
        this.getTotalSum(this.chartData);
        var value = Math.max.apply(Math, this.chartData.map(function (o) {
            return o.value;
        }));
        if (value > this.scale) {
            var normalizedValue_1 = value / this.scale;
            this.chartData.map(function (y, index) {
                _this.chartData[index]['normalized'] = Number(y.value) / normalizedValue_1;
            });
        }
        else {
            var normalizedValue_2 = this.scale / value;
            this.chartData.map(function (y, index) {
                _this.chartData[index]['normalized'] = Number(y.value) * normalizedValue_2;
            });
        }
        this.lines = this.isHorizontal ? this.calculateHorizontalBarLines(this.chartData) : this.calculateVerticalBarLines(this.chartData);
    };
    BarChartComponent.prototype.ngAfterViewInit = function () { };
    BarChartComponent.prototype.getItemClicked = function (line) {
        var selectedbar = {
            name: line.name,
            value: line.value
        };
        this.selectedItem.emit(JSON.stringify(selectedbar));
    };
    BarChartComponent.prototype.calculateHorizontalBarLines = function (graphData) {
        var _this = this;
        var barLines = [];
        graphData.map(function (x, index) {
            var background = {
                x1: 10,
                y1: index * 20 + 20,
                y2: index * 20 + 20,
                x2: _this.view.width,
                color: '#EBEBEB',
                name: x.name,
                value: x.value
            };
            barLines.push(background);
            if (x.value > 0) {
                var line = {
                    x1: 10,
                    y1: index * 20 + 20,
                    y2: index * 20 + 20,
                    x2: x.normalized < 10 ? _this.barLineType == 'butt' ? 11 : 10 : x.normalized,
                    color: x.color,
                    name: x.name,
                    value: x.value
                };
                barLines.push(line);
            }
        });
        return barLines;
    };
    BarChartComponent.prototype.calculateVerticalBarLines = function (graphData) {
        var _this = this;
        var barLines = [];
        graphData.map(function (x, index) {
            var background = {
                x1: index * 20 + 20,
                y1: 10,
                x2: index * 20 + 20,
                y2: _this.scale,
                color: '#EBEBEB',
                name: x.name,
                value: x.value
            };
            barLines.push(background);
            if (x.value > 0) {
                var line = {
                    x1: index * 20 + 20,
                    y1: (_this.scale + 10) - x.normalized > _this.scale ? _this.barLineType == 'butt' ? (_this.scale - 1) : _this.scale : (_this.scale + 10) - x.normalized,
                    x2: index * 20 + 20,
                    y2: _this.scale,
                    color: x.color,
                    name: x.name,
                    value: x.value
                };
                barLines.push(line);
            }
        });
        console.log(barLines);
        return barLines;
    };
    BarChartComponent.prototype.getTotalSum = function (chartData) {
        // Get total number of records
        this.totalSum = chartData.reduce(function (a, b) {
            return a + parseInt(b.value);
        }, 0);
    };
    __decorate([
        Output()
    ], BarChartComponent.prototype, "selectedItem", void 0);
    __decorate([
        Input()
    ], BarChartComponent.prototype, "chartData", void 0);
    __decorate([
        Input()
    ], BarChartComponent.prototype, "chartOptions", void 0);
    __decorate([
        Input()
    ], BarChartComponent.prototype, "view", void 0);
    BarChartComponent = __decorate([
        Component({
            selector: 'ngx-bar-chart',
            template: "<div class=\"chart-view  ngx-bar\">\r\n  <div class=\"chart-wrapper\" [ngStyle]=\"{'height': chartView[0],'width': chartView[1]}\">\r\n    <svg id=\"lines\" [attr.viewBox]=\"'0 0 '+ (isHorizontal ? scale+40 : (lines[lines.length-1].x1 + 20))+' ' + (isHorizontal ? (lines[lines.length-1].y2 + 20) : (scale+20))\">\r\n      <g>\r\n        <line *ngFor=\"let line of lines\" stroke-width=\"10\" class=\"line\" [attr.x1]=\"line.x1\" [attr.y1]=\"line.y1 \"\r\n          [attr.x2]=\"line.x2\" [attr.y2]=\"line.y2\" [attr.stroke]=\"line.color\" \u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 [attr.stroke-linecap]=\"barLineType\"\r\n          [attr.title]=\"line.name\" (click)=\"getItemClicked(line)\" chartTooltip tooltip={{line.name}} />\r\n      </g>\r\n    </svg>\r\n  </div>\r\n  <div class=\"legend\" *ngIf=\"chartOptions.showLegend\">\r\n    <h4>{{chartOptions.legendTitle +' : '+ totalSum}}</h4>\r\n    <div class=\"legend-item\" *ngFor=\"let item of chartData; let i=index\">\r\n      <div class=\"legend-item-colour\" [ngStyle]=\"{'background': item.color}\"></div><span\r\n        class=\"legend-item-name\">{{item.name}}</span><span class=\"legend-item-value\">{{item.value}}</span>\r\n    </div>\r\n  </div>\r\n\r\n</div>",
            styles: [".line{cursor:pointer}"]
        })
    ], BarChartComponent);
    return BarChartComponent;
}());
export { BarChartComponent };
//# sourceMappingURL=data:application/json;base64,