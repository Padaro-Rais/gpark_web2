import { __decorate } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChildren } from '@angular/core';
var DonutChartComponent = /** @class */ (function () {
    function DonutChartComponent() {
        this.selectedItem = new EventEmitter();
        this.chartOptions = {
            showLegend: true,
            legendTitle: 'Total',
        };
        this.view = {
            height: 200,
            width: 200,
            radius: 80,
            donutSize: 20
        };
        this.totalSum = 0;
        this.processedData = [];
        this.legendData = [];
        this.chartView = [];
    }
    DonutChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.chartData) {
            this.view['donutSize'] = this.view['donutSize'] ? this.view['donutSize'] : 20;
            this.chartView.push(this.view.height + 'px');
            this.chartView.push(this.view.width + 'px');
            // Get total number of records
            this.totalSum = this.chartData.reduce(function (a, b) {
                return a + b.value;
            }, 0);
            //generate Data for list
            var prevAngle_1 = 0;
            this.chartData.map(function (x, index) {
                var legend = {
                    name: x.name,
                    value: x.value,
                    color: x.color
                };
                _this.legendData.push(legend);
                var percentage = _this.getPercentage(x.value, _this.totalSum);
                if (percentage > 0) {
                    var circlePercentage = percentage / 10 * 36;
                    var pieData = {
                        color: x.color,
                        a1: prevAngle_1,
                        a2: prevAngle_1 + circlePercentage,
                        name: x.name
                    };
                    prevAngle_1 = prevAngle_1 + circlePercentage;
                    _this.processedData.push(pieData);
                }
            });
        }
    };
    DonutChartComponent.prototype.getPercentage = function (partialValue, totalValue) {
        return (100 * partialValue) / totalValue;
    };
    DonutChartComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        //create svg
        if (this.processedData.length > 0) {
            this.span.map(function (item, index) {
                item.nativeElement.setAttribute('d', _this.describeArc(_this.view.height / 2, _this.view.width / 2, _this.view.radius, _this.processedData[index].a1, _this.processedData[index].a2 == 360 ? 359.99 : _this.processedData[index].a2));
                item.nativeElement.setAttribute('stroke', _this.processedData[index].color);
            });
        }
    };
    DonutChartComponent.prototype.polarToCartesian = function (centerX, centerY, radius, angleInDegrees) {
        var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;
        return {
            x: centerX + (radius * Math.cos(angleInRadians)),
            y: centerY + (radius * Math.sin(angleInRadians))
        };
    };
    DonutChartComponent.prototype.describeArc = function (x, y, radius, startAngle, endAngle) {
        var start = this.polarToCartesian(x, y, radius, endAngle);
        var end = this.polarToCartesian(x, y, radius, startAngle);
        var largeArcFlag = endAngle - startAngle <= 180 ? "0" : "1";
        var d = [
            "M", start.x, start.y,
            "A", radius, radius, 0, largeArcFlag, 0, end.x, end.y
        ].join(" ");
        return d;
    };
    DonutChartComponent.prototype.getItemClicked = function (item) {
        var selected = {
            name: item.name,
            value: item.value
        };
        this.selectedItem.emit(selected);
    };
    DonutChartComponent.prototype.show = function (status) {
    };
    __decorate([
        Input()
    ], DonutChartComponent.prototype, "chartData", void 0);
    __decorate([
        Output()
    ], DonutChartComponent.prototype, "selectedItem", void 0);
    __decorate([
        ViewChildren('el')
    ], DonutChartComponent.prototype, "span", void 0);
    __decorate([
        Input()
    ], DonutChartComponent.prototype, "chartOptions", void 0);
    __decorate([
        Input()
    ], DonutChartComponent.prototype, "view", void 0);
    DonutChartComponent = __decorate([
        Component({
            selector: 'ngx-donut-chart',
            template: "<div class=\"chart-view ngx-donut\">\n  <svg class=\"chart-wrapper\" [ngStyle]=\"{'height': chartView[0],'width': chartView[1]}\">\n    <path width=\"100%\" height=\"100%\" #el fill=\"none\" [attr.stroke-width]=\"this.view.donutSize\" *ngFor=\"let item of processedData; let i=index\"\n      (click)=\"getItemClicked(item)\" chartTooltip tooltip={{item.name}}/>\n\n  </svg>\n  <div class=\"legend\" *ngIf=\"chartOptions.showLegend\">\n    <h4>{{chartOptions.legendTitle +' : '+  totalSum}}</h4>\n    <div class=\"legend-item\" *ngFor=\"let item of legendData; let i=index\" >\n      <div class=\"legend-item-colour\" [ngStyle]=\"{'background': item.color}\"></div><span class=\"legend-item-name\" >{{item.name}}</span><span class=\"legend-item-value\" >{{item.value}}</span>\n    </div>\n  </div>\n</div>",
            styles: ["path:hover{cursor:pointer}"]
        })
    ], DonutChartComponent);
    return DonutChartComponent;
}());
export { DonutChartComponent };
//# sourceMappingURL=data:application/json;base64,