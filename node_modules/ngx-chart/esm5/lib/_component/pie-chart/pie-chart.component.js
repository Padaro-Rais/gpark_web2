import { __decorate } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChildren } from '@angular/core';
var PieChartComponent = /** @class */ (function () {
    function PieChartComponent() {
        this.selectedItem = new EventEmitter();
        this.chartOptions = {
            showLegend: true,
            legendTitle: 'Total',
        };
        this.view = {
            height: 200,
            width: 200,
            radius: 80
        };
        this.chartView = [];
        this.totalSum = 0;
        this.processedData = [];
        this.legendData = [];
    }
    PieChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.chartView.push(this.view.height + 'px');
        this.chartView.push(this.view.width + 'px');
        if (this.chartData) {
            // Get total number of records
            this.totalSum = this.chartData.reduce(function (a, b) {
                return a + b.value;
            }, 0);
            //generate Data for piechart
            var prevAngle_1 = 0;
            this.chartData.map(function (x, index) {
                var legend = {
                    name: x.name,
                    value: x.value,
                    color: x.color
                };
                _this.legendData.push(legend);
                var percentage = _this.getPercentage(x.value, _this.totalSum);
                if (percentage > 0) {
                    var circlePercentage = percentage / 10 * 36;
                    var pieData = {
                        color: x.color,
                        a1: prevAngle_1,
                        a2: prevAngle_1 + circlePercentage,
                        name: x.name
                    };
                    prevAngle_1 = prevAngle_1 + circlePercentage;
                    _this.processedData.push(pieData);
                }
            });
        }
    };
    PieChartComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        // create svg 
        if (this.processedData.length > 0) {
            this.span.map(function (item, index) {
                _this.processedData[index].a2 = _this.processedData[index].a2 >= 360 ? 359.9 : _this.processedData[index].a2;
                item.nativeElement.setAttribute('d', _this.describeArc(_this.view.height / 2, _this.view.height / 2, _this.view.radius, _this.processedData[index].a1, _this.processedData[index].a2));
                item.nativeElement.setAttribute('fill', _this.processedData[index].color);
            });
        }
    };
    PieChartComponent.prototype.polarToCartesian = function (centerX, centerY, radius, angleInDegrees) {
        var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;
        return {
            x: centerX + (radius * Math.cos(angleInRadians)),
            y: centerY + (radius * Math.sin(angleInRadians))
        };
    };
    PieChartComponent.prototype.describeArc = function (x, y, radius, startAngle, endAngle) {
        var start = this.polarToCartesian(x, y, radius, endAngle);
        var end = this.polarToCartesian(x, y, radius, startAngle);
        var arcSweep = endAngle - startAngle <= 180 ? "0" : "1";
        var d = [
            "M", start.x, start.y,
            "A", radius, radius, 0, arcSweep, 0, end.x, end.y,
            "L", x, y,
            "L", start.x, start.y
        ].join(" ");
        return d;
    };
    PieChartComponent.prototype.getPercentage = function (partialValue, totalValue) {
        return (100 * partialValue) / totalValue;
    };
    PieChartComponent.prototype.getItemClicked = function (item) {
        var selected = {
            name: item.name,
            value: item.value
        };
        this.selectedItem.emit(selected);
    };
    __decorate([
        Input()
    ], PieChartComponent.prototype, "chartData", void 0);
    __decorate([
        ViewChildren('el')
    ], PieChartComponent.prototype, "span", void 0);
    __decorate([
        Output()
    ], PieChartComponent.prototype, "selectedItem", void 0);
    __decorate([
        Input()
    ], PieChartComponent.prototype, "chartOptions", void 0);
    __decorate([
        Input()
    ], PieChartComponent.prototype, "view", void 0);
    PieChartComponent = __decorate([
        Component({
            selector: 'ngx-pie-chart',
            template: "<div class=\"chart-view ngx-pie\">\n  <svg class=\"chart-wrapper\" [ngStyle]=\"{'height': chartView[0],'width': chartView[1]}\">\n    <path #el class=\"pie-chart-path\" chartTooltip tooltip={{item.name}} (click)=\"getItemClicked(item)\" *ngFor=\"let item of processedData; let i=index\" />\n  </svg>\n  <div class=\"legend\" *ngIf=\"chartOptions.showLegend\">\n    <h4>{{chartOptions.legendTitle +' : '+  totalSum}}</h4>\n    <div class=\"legend-item\" *ngFor=\"let item of legendData; let i=index\">\n      <div class=\"legend-item-colour\" [ngStyle]=\"{'background': item.color}\"></div><span class=\"legend-item-name\" >{{item.name}}</span><span class=\"legend-item-value\" >{{item.value}}</span>\n    </div>\n  </div>\n</div>",
            styles: ["path.pie-chart-path:hover{cursor:pointer}"]
        })
    ], PieChartComponent);
    return PieChartComponent;
}());
export { PieChartComponent };
//# sourceMappingURL=data:application/json;base64,