import { __decorate } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChildren } from '@angular/core';
let DonutChartComponent = class DonutChartComponent {
    constructor() {
        this.selectedItem = new EventEmitter();
        this.chartOptions = {
            showLegend: true,
            legendTitle: 'Total',
        };
        this.view = {
            height: 200,
            width: 200,
            radius: 80,
            donutSize: 20
        };
        this.totalSum = 0;
        this.processedData = [];
        this.legendData = [];
        this.chartView = [];
    }
    ngOnInit() {
        if (this.chartData) {
            this.view['donutSize'] = this.view['donutSize'] ? this.view['donutSize'] : 20;
            this.chartView.push(this.view.height + 'px');
            this.chartView.push(this.view.width + 'px');
            // Get total number of records
            this.totalSum = this.chartData.reduce(function (a, b) {
                return a + b.value;
            }, 0);
            //generate Data for list
            let prevAngle = 0;
            this.chartData.map((x, index) => {
                let legend = {
                    name: x.name,
                    value: x.value,
                    color: x.color
                };
                this.legendData.push(legend);
                let percentage = this.getPercentage(x.value, this.totalSum);
                if (percentage > 0) {
                    let circlePercentage = percentage / 10 * 36;
                    let pieData = {
                        color: x.color,
                        a1: prevAngle,
                        a2: prevAngle + circlePercentage,
                        name: x.name
                    };
                    prevAngle = prevAngle + circlePercentage;
                    this.processedData.push(pieData);
                }
            });
        }
    }
    getPercentage(partialValue, totalValue) {
        return (100 * partialValue) / totalValue;
    }
    ngAfterViewInit() {
        //create svg
        if (this.processedData.length > 0) {
            this.span.map((item, index) => {
                item.nativeElement.setAttribute('d', this.describeArc(this.view.height / 2, this.view.width / 2, this.view.radius, this.processedData[index].a1, this.processedData[index].a2 == 360 ? 359.99 : this.processedData[index].a2));
                item.nativeElement.setAttribute('stroke', this.processedData[index].color);
            });
        }
    }
    polarToCartesian(centerX, centerY, radius, angleInDegrees) {
        let angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;
        return {
            x: centerX + (radius * Math.cos(angleInRadians)),
            y: centerY + (radius * Math.sin(angleInRadians))
        };
    }
    describeArc(x, y, radius, startAngle, endAngle) {
        let start = this.polarToCartesian(x, y, radius, endAngle);
        let end = this.polarToCartesian(x, y, radius, startAngle);
        let largeArcFlag = endAngle - startAngle <= 180 ? "0" : "1";
        let d = [
            "M", start.x, start.y,
            "A", radius, radius, 0, largeArcFlag, 0, end.x, end.y
        ].join(" ");
        return d;
    }
    getItemClicked(item) {
        let selected = {
            name: item.name,
            value: item.value
        };
        this.selectedItem.emit(selected);
    }
    show(status) {
    }
};
__decorate([
    Input()
], DonutChartComponent.prototype, "chartData", void 0);
__decorate([
    Output()
], DonutChartComponent.prototype, "selectedItem", void 0);
__decorate([
    ViewChildren('el')
], DonutChartComponent.prototype, "span", void 0);
__decorate([
    Input()
], DonutChartComponent.prototype, "chartOptions", void 0);
__decorate([
    Input()
], DonutChartComponent.prototype, "view", void 0);
DonutChartComponent = __decorate([
    Component({
        selector: 'ngx-donut-chart',
        template: "<div class=\"chart-view ngx-donut\">\n  <svg class=\"chart-wrapper\" [ngStyle]=\"{'height': chartView[0],'width': chartView[1]}\">\n    <path width=\"100%\" height=\"100%\" #el fill=\"none\" [attr.stroke-width]=\"this.view.donutSize\" *ngFor=\"let item of processedData; let i=index\"\n      (click)=\"getItemClicked(item)\" chartTooltip tooltip={{item.name}}/>\n\n  </svg>\n  <div class=\"legend\" *ngIf=\"chartOptions.showLegend\">\n    <h4>{{chartOptions.legendTitle +' : '+  totalSum}}</h4>\n    <div class=\"legend-item\" *ngFor=\"let item of legendData; let i=index\" >\n      <div class=\"legend-item-colour\" [ngStyle]=\"{'background': item.color}\"></div><span class=\"legend-item-name\" >{{item.name}}</span><span class=\"legend-item-value\" >{{item.value}}</span>\n    </div>\n  </div>\n</div>",
        styles: ["path:hover{cursor:pointer}"]
    })
], DonutChartComponent);
export { DonutChartComponent };
//# sourceMappingURL=data:application/json;base64,