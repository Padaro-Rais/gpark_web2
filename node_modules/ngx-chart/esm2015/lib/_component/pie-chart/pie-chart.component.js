import { __decorate } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChildren } from '@angular/core';
let PieChartComponent = class PieChartComponent {
    constructor() {
        this.selectedItem = new EventEmitter();
        this.chartOptions = {
            showLegend: true,
            legendTitle: 'Total',
        };
        this.view = {
            height: 200,
            width: 200,
            radius: 80
        };
        this.chartView = [];
        this.totalSum = 0;
        this.processedData = [];
        this.legendData = [];
    }
    ngOnInit() {
        this.chartView.push(this.view.height + 'px');
        this.chartView.push(this.view.width + 'px');
        if (this.chartData) {
            // Get total number of records
            this.totalSum = this.chartData.reduce(function (a, b) {
                return a + b.value;
            }, 0);
            //generate Data for piechart
            let prevAngle = 0;
            this.chartData.map((x, index) => {
                let legend = {
                    name: x.name,
                    value: x.value,
                    color: x.color
                };
                this.legendData.push(legend);
                let percentage = this.getPercentage(x.value, this.totalSum);
                if (percentage > 0) {
                    let circlePercentage = percentage / 10 * 36;
                    let pieData = {
                        color: x.color,
                        a1: prevAngle,
                        a2: prevAngle + circlePercentage,
                        name: x.name
                    };
                    prevAngle = prevAngle + circlePercentage;
                    this.processedData.push(pieData);
                }
            });
        }
    }
    ngAfterViewInit() {
        // create svg 
        if (this.processedData.length > 0) {
            this.span.map((item, index) => {
                this.processedData[index].a2 = this.processedData[index].a2 >= 360 ? 359.9 : this.processedData[index].a2;
                item.nativeElement.setAttribute('d', this.describeArc(this.view.height / 2, this.view.height / 2, this.view.radius, this.processedData[index].a1, this.processedData[index].a2));
                item.nativeElement.setAttribute('fill', this.processedData[index].color);
            });
        }
    }
    polarToCartesian(centerX, centerY, radius, angleInDegrees) {
        let angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;
        return {
            x: centerX + (radius * Math.cos(angleInRadians)),
            y: centerY + (radius * Math.sin(angleInRadians))
        };
    }
    describeArc(x, y, radius, startAngle, endAngle) {
        let start = this.polarToCartesian(x, y, radius, endAngle);
        let end = this.polarToCartesian(x, y, radius, startAngle);
        let arcSweep = endAngle - startAngle <= 180 ? "0" : "1";
        let d = [
            "M", start.x, start.y,
            "A", radius, radius, 0, arcSweep, 0, end.x, end.y,
            "L", x, y,
            "L", start.x, start.y
        ].join(" ");
        return d;
    }
    getPercentage(partialValue, totalValue) {
        return (100 * partialValue) / totalValue;
    }
    getItemClicked(item) {
        let selected = {
            name: item.name,
            value: item.value
        };
        this.selectedItem.emit(selected);
    }
};
__decorate([
    Input()
], PieChartComponent.prototype, "chartData", void 0);
__decorate([
    ViewChildren('el')
], PieChartComponent.prototype, "span", void 0);
__decorate([
    Output()
], PieChartComponent.prototype, "selectedItem", void 0);
__decorate([
    Input()
], PieChartComponent.prototype, "chartOptions", void 0);
__decorate([
    Input()
], PieChartComponent.prototype, "view", void 0);
PieChartComponent = __decorate([
    Component({
        selector: 'ngx-pie-chart',
        template: "<div class=\"chart-view ngx-pie\">\n  <svg class=\"chart-wrapper\" [ngStyle]=\"{'height': chartView[0],'width': chartView[1]}\">\n    <path #el class=\"pie-chart-path\" chartTooltip tooltip={{item.name}} (click)=\"getItemClicked(item)\" *ngFor=\"let item of processedData; let i=index\" />\n  </svg>\n  <div class=\"legend\" *ngIf=\"chartOptions.showLegend\">\n    <h4>{{chartOptions.legendTitle +' : '+  totalSum}}</h4>\n    <div class=\"legend-item\" *ngFor=\"let item of legendData; let i=index\">\n      <div class=\"legend-item-colour\" [ngStyle]=\"{'background': item.color}\"></div><span class=\"legend-item-name\" >{{item.name}}</span><span class=\"legend-item-value\" >{{item.value}}</span>\n    </div>\n  </div>\n</div>",
        styles: ["path.pie-chart-path:hover{cursor:pointer}"]
    })
], PieChartComponent);
export { PieChartComponent };
//# sourceMappingURL=data:application/json;base64,