{"ast":null,"code":"import _asyncToGenerator from \"C:/PROJET_LIKSOFT2/Front/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, startWith } from \"rxjs/operators\";\nimport { URLUtils } from \"../../utils/url/url\";\nimport { isDefined } from \"../../utils/types/type-utils\";\nimport { createSubject } from \"../../rxjs/helpers/index\";\nimport { Err } from \"../../utils/logger\";\nimport { writeStream } from \"../../utils/io\";\nimport { SERVER_URL } from \"../tokens\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n/**\r\n * Derives file name from the http response by looking inside content-disposition\r\n * @param res http Response\r\n */\n\nconst getNameFromResponseHeaders = res => {\n  var _a;\n\n  if (res instanceof Blob) {\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  }\n\n  const contentDisposition = ((_a = res.headers) === null || _a === void 0 ? void 0 : _a.get(\"Content-Disposition\")) || \"\";\n  const matches = /filename=([^;]+)/gi.exec(contentDisposition) || [];\n  const fileName = (matches === null || matches === void 0 ? void 0 : matches.length) === 0 ? undefined : (matches[1] || \"untitled\").trim();\n  return fileName;\n};\n\nexport class HttpClient {\n  constructor(http, serverUrl) {\n    var _this = this;\n\n    this.http = http;\n    this.serverUrl = serverUrl; // tslint:disable-next-line: variable-name\n\n    this._errorState$ = createSubject();\n    this.errorState$ = this._errorState$.pipe(startWith({}));\n    /**\r\n     * @description provide a file download functionnality to the application\r\n     * @param url\r\n     * @param filename\r\n     * @param extension\r\n     * @param params\r\n     */\n\n    this.download = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (url, filename, extension, params) {\n        return function () {\n          var _ref2 = _asyncToGenerator(function* (response) {\n            if (!isDefined(filename)) {\n              filename = isDefined(extension) ? `${getNameFromResponseHeaders(response)}.${extension}` : `${getNameFromResponseHeaders(response)}`;\n            }\n\n            yield writeStream(response, isDefined(extension) ? `${filename}.${extension}` : `${filename}`);\n          });\n\n          return function (_x5) {\n            return _ref2.apply(this, arguments);\n          };\n        }()(yield _this.readBinaryStream(URLUtils.isWebURL(url) ? `${url}` : `${_this.serverUrl}${url}`, params));\n      });\n\n      return function (_x, _x2, _x3, _x4) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    /**\r\n     * Read the HTTP response as a binary stream a.k.a Blob'\r\n     *\r\n     * @param url\r\n     * @param params\r\n     * @returns\r\n     */\n\n\n    this.readBinaryStream = (url, params) => _asyncToGenerator(function* () {\n      const headers = new HttpHeaders();\n      headers.append(\"Accept\", \"text/plain\");\n      headers.append(\"Content-type\", \"application/octet-stream\");\n      const response = yield _this.http.get(url, {\n        headers,\n        responseType: \"blob\",\n        params\n      }).toPromise();\n      return response;\n    })();\n    /**\r\n     * @deprecated Use {@link download} method instead\r\n     * @param url\r\n     * @param filename\r\n     * @param fileExtension\r\n     * @param params\r\n     */\n\n\n    this.downloadFile = (url, filename, fileExtension, params) => this.download(url, filename, fileExtension, params);\n    /**\r\n     * @deprecated Use {@link readBinaryStream} method instead\r\n     *\r\n     * @description Load a file from the backend server\r\n     * @param url [[string]]\r\n     */\n\n\n    this.loadServerFile = (url, params) => this.readBinaryStream(url, params);\n  }\n  /**\r\n   * {@inheritdoc}\r\n   */\n\n\n  post(path, body, options) {\n    const url = URLUtils.isWebURL(path) ? `${path}` : `${this.serverUrl}${path}`;\n    return this.http.post(url, body, options).pipe( // retry(1),\n    catchError(err => this.handleError(err)));\n  }\n  /**\r\n   * {@inheritdoc}\r\n   */\n\n\n  get(path, options) {\n    const url = URLUtils.isWebURL(path) ? `${path}` : `${this.serverUrl}${path}`;\n    return this.http.get(url, options).pipe( // retry(1),\n    catchError(err => this.handleError(err)));\n  }\n  /**\r\n   * {@inheritdoc}\r\n   */\n\n\n  put(path, body, options) {\n    const url = URLUtils.isWebURL(path) ? `${path}` : `${this.serverUrl}${path}`;\n    return this.http.put(url, body, options).pipe( // retry(1),\n    catchError(err => this.handleError(err)));\n  }\n  /**\r\n   * {@inheritdoc}\r\n   */\n\n\n  delete(path, options) {\n    const url = URLUtils.isWebURL(path) ? `${path}` : `${this.serverUrl}${path}`;\n    return this.http.delete(url, options).pipe( // retry(1),\n    catchError(err => this.handleError(err)));\n  }\n\n  defaultHttpHeaders() {\n    const httpHeader = new HttpHeaders();\n    httpHeader.append(\"Content-Type\", \"application/json\");\n    return httpHeader;\n  }\n  /**\r\n   * {@inheritdoc}\r\n   */\n\n\n  handleError(error) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      Err(\"An error occurred:\", error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      this._errorState$.next({\n        status: +error.status,\n        error: error.error,\n        url: error.url || undefined\n      });\n\n      Err(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n    } // return an observable with a user friendly error message\n\n\n    return throwError(error);\n  }\n\n}\n\nHttpClient.ɵfac = function HttpClient_Factory(t) {\n  return new (t || HttpClient)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(SERVER_URL));\n};\n\nHttpClient.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpClient,\n  factory: HttpClient.ɵfac\n});","map":{"version":3,"sources":["C:/PROJET_LIKSOFT2/Front/src/app/core/http/core/http-client.service.ts"],"names":["HttpHeaders","throwError","catchError","startWith","URLUtils","isDefined","createSubject","Err","writeStream","SERVER_URL","i0","i1","getNameFromResponseHeaders","res","_a","Blob","Math","random","toString","substring","contentDisposition","headers","get","matches","exec","fileName","length","undefined","trim","HttpClient","constructor","http","serverUrl","_errorState$","errorState$","pipe","download","url","filename","extension","params","response","readBinaryStream","isWebURL","append","responseType","toPromise","downloadFile","fileExtension","loadServerFile","post","path","body","options","err","handleError","put","delete","defaultHttpHeaders","httpHeader","error","ErrorEvent","message","next","status","ɵfac","HttpClient_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"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","sourcesContent":["import { HttpHeaders, } from \"@angular/common/http\";\r\nimport { throwError } from \"rxjs\";\r\nimport { catchError, startWith } from \"rxjs/operators\";\r\nimport { URLUtils } from \"../../utils/url/url\";\r\nimport { isDefined } from \"../../utils/types/type-utils\";\r\nimport { createSubject } from \"../../rxjs/helpers/index\";\r\nimport { Err } from \"../../utils/logger\";\r\nimport { writeStream } from \"../../utils/io\";\r\nimport { SERVER_URL } from \"../tokens\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\n/**\r\n * Derives file name from the http response by looking inside content-disposition\r\n * @param res http Response\r\n */\r\nconst getNameFromResponseHeaders = (res) => {\r\n    var _a;\r\n    if (res instanceof Blob) {\r\n        return (Math.random().toString(36).substring(2, 15) +\r\n            Math.random().toString(36).substring(2, 15));\r\n    }\r\n    const contentDisposition = ((_a = res.headers) === null || _a === void 0 ? void 0 : _a.get(\"Content-Disposition\")) || \"\";\r\n    const matches = /filename=([^;]+)/gi.exec(contentDisposition) || [];\r\n    const fileName = (matches === null || matches === void 0 ? void 0 : matches.length) === 0 ? undefined : (matches[1] || \"untitled\").trim();\r\n    return fileName;\r\n};\r\nexport class HttpClient {\r\n    constructor(http, serverUrl) {\r\n        this.http = http;\r\n        this.serverUrl = serverUrl;\r\n        // tslint:disable-next-line: variable-name\r\n        this._errorState$ = createSubject();\r\n        this.errorState$ = this._errorState$.pipe(startWith({}));\r\n        /**\r\n         * @description provide a file download functionnality to the application\r\n         * @param url\r\n         * @param filename\r\n         * @param extension\r\n         * @param params\r\n         */\r\n        this.download = async (url, filename, extension, params) => (async (response) => {\r\n            if (!isDefined(filename)) {\r\n                filename = isDefined(extension)\r\n                    ? `${getNameFromResponseHeaders(response)}.${extension}`\r\n                    : `${getNameFromResponseHeaders(response)}`;\r\n            }\r\n            await writeStream(response, isDefined(extension) ? `${filename}.${extension}` : `${filename}`);\r\n        })(await this.readBinaryStream(URLUtils.isWebURL(url) ? `${url}` : `${this.serverUrl}${url}`, params));\r\n        /**\r\n         * Read the HTTP response as a binary stream a.k.a Blob'\r\n         *\r\n         * @param url\r\n         * @param params\r\n         * @returns\r\n         */\r\n        this.readBinaryStream = (url, params) => (async () => {\r\n            const headers = new HttpHeaders();\r\n            headers.append(\"Accept\", \"text/plain\");\r\n            headers.append(\"Content-type\", \"application/octet-stream\");\r\n            const response = await this.http\r\n                .get(url, { headers, responseType: \"blob\", params })\r\n                .toPromise();\r\n            return response;\r\n        })();\r\n        /**\r\n         * @deprecated Use {@link download} method instead\r\n         * @param url\r\n         * @param filename\r\n         * @param fileExtension\r\n         * @param params\r\n         */\r\n        this.downloadFile = (url, filename, fileExtension, params) => this.download(url, filename, fileExtension, params);\r\n        /**\r\n         * @deprecated Use {@link readBinaryStream} method instead\r\n         *\r\n         * @description Load a file from the backend server\r\n         * @param url [[string]]\r\n         */\r\n        this.loadServerFile = (url, params) => this.readBinaryStream(url, params);\r\n    }\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    post(path, body, options) {\r\n        const url = URLUtils.isWebURL(path)\r\n            ? `${path}`\r\n            : `${this.serverUrl}${path}`;\r\n        return this.http.post(url, body, options).pipe(\r\n        // retry(1),\r\n        catchError((err) => this.handleError(err)));\r\n    }\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    get(path, options) {\r\n        const url = URLUtils.isWebURL(path)\r\n            ? `${path}`\r\n            : `${this.serverUrl}${path}`;\r\n        return this.http.get(url, options).pipe(\r\n        // retry(1),\r\n        catchError((err) => this.handleError(err)));\r\n    }\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    put(path, body, options) {\r\n        const url = URLUtils.isWebURL(path)\r\n            ? `${path}`\r\n            : `${this.serverUrl}${path}`;\r\n        return this.http.put(url, body, options).pipe(\r\n        // retry(1),\r\n        catchError((err) => this.handleError(err)));\r\n    }\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    delete(path, options) {\r\n        const url = URLUtils.isWebURL(path)\r\n            ? `${path}`\r\n            : `${this.serverUrl}${path}`;\r\n        return this.http.delete(url, options).pipe(\r\n        // retry(1),\r\n        catchError((err) => this.handleError(err)));\r\n    }\r\n    defaultHttpHeaders() {\r\n        const httpHeader = new HttpHeaders();\r\n        httpHeader.append(\"Content-Type\", \"application/json\");\r\n        return httpHeader;\r\n    }\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    handleError(error) {\r\n        if (error.error instanceof ErrorEvent) {\r\n            // A client-side or network error occurred. Handle it accordingly.\r\n            Err(\"An error occurred:\", error.error.message);\r\n        }\r\n        else {\r\n            // The backend returned an unsuccessful response code.\r\n            // The response body may contain clues as to what went wrong,\r\n            this._errorState$.next({\r\n                status: +error.status,\r\n                error: error.error,\r\n                url: error.url || undefined,\r\n            });\r\n            Err(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\r\n        }\r\n        // return an observable with a user friendly error message\r\n        return throwError(error);\r\n    }\r\n}\r\nHttpClient.ɵfac = function HttpClient_Factory(t) { return new (t || HttpClient)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(SERVER_URL)); };\r\nHttpClient.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: HttpClient, factory: HttpClient.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}