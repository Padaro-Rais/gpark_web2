{"ast":null,"code":"import _asyncToGenerator from \"/Users/liksoft/PROJETS/FRONT/ANGULAR/Archive_Lik_Angular/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport const readAsDataURL = content => {\n  return new Promise((resolve, reject) => {\n    if (content) {\n      const reader = new FileReader();\n\n      reader.onload = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (e) {\n          var _a;\n\n          return resolve((_a = e.target) === null || _a === void 0 ? void 0 : _a.result);\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      reader.readAsDataURL(content);\n    } else {\n      reject(\"Content must not be undefined...\");\n    }\n  });\n};\nexport const readAsArrayBuffer = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (content) {\n    if (content instanceof Blob) {\n      return yield content.arrayBuffer();\n    }\n\n    return new Promise((resolve, reject) => {\n      if (content) {\n        const reader = new FileReader();\n\n        reader.onload = /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator(function* (e) {\n            var _a;\n\n            return resolve((_a = e.target) === null || _a === void 0 ? void 0 : _a.result);\n          });\n\n          return function (_x3) {\n            return _ref3.apply(this, arguments);\n          };\n        }();\n\n        reader.readAsArrayBuffer(content);\n      } else {\n        reject(\"Content must not be undefined...\");\n      }\n    });\n  });\n\n  return function readAsArrayBuffer(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport const readAsBinaryString = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(function* (content) {\n    if (content instanceof Blob) {\n      return yield content.text();\n    }\n\n    return new Promise((resolve, reject) => {\n      if (content) {\n        const reader = new FileReader();\n\n        reader.onload = /*#__PURE__*/function () {\n          var _ref5 = _asyncToGenerator(function* (e) {\n            var _a;\n\n            return resolve((_a = e.target) === null || _a === void 0 ? void 0 : _a.result);\n          });\n\n          return function (_x5) {\n            return _ref5.apply(this, arguments);\n          };\n        }();\n\n        reader.readAsBinaryString(content);\n      } else {\n        reject(\"Content must not be undefined...\");\n      }\n    });\n  });\n\n  return function readAsBinaryString(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/liksoft/PROJETS/FRONT/ANGULAR/Archive_Lik_Angular/src/app/core/utils/io/reader.ts"],"names":["readAsDataURL","content","Promise","resolve","reject","reader","FileReader","onload","e","_a","target","result","readAsArrayBuffer","Blob","arrayBuffer","readAsBinaryString","text"],"mappings":";AAAA,OAAO,MAAMA,aAAa,GAAIC,OAAD,IAAa;AACtC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIH,OAAJ,EAAa;AACT,YAAMI,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,MAAAA,MAAM,CAACE,MAAP;AAAA,qCAAgB,WAAOC,CAAP,EAAa;AACzB,cAAIC,EAAJ;;AACA,iBAAON,OAAO,CAAC,CAACM,EAAE,GAAGD,CAAC,CAACE,MAAR,MAAoB,IAApB,IAA4BD,EAAE,KAAK,KAAK,CAAxC,GAA4C,KAAK,CAAjD,GAAqDA,EAAE,CAACE,MAAzD,CAAd;AACH,SAHD;;AAAA;AAAA;AAAA;AAAA;;AAIAN,MAAAA,MAAM,CAACL,aAAP,CAAqBC,OAArB;AACH,KAPD,MAQK;AACDG,MAAAA,MAAM,CAAC,kCAAD,CAAN;AACH;AACJ,GAZM,CAAP;AAaH,CAdM;AAeP,OAAO,MAAMQ,iBAAiB;AAAA,gCAAG,WAAOX,OAAP,EAAmB;AAChD,QAAIA,OAAO,YAAYY,IAAvB,EAA6B;AACzB,mBAAaZ,OAAO,CAACa,WAAR,EAAb;AACH;;AACD,WAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAIH,OAAJ,EAAa;AACT,cAAMI,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,QAAAA,MAAM,CAACE,MAAP;AAAA,wCAAgB,WAAOC,CAAP,EAAa;AACzB,gBAAIC,EAAJ;;AACA,mBAAON,OAAO,CAAC,CAACM,EAAE,GAAGD,CAAC,CAACE,MAAR,MAAoB,IAApB,IAA4BD,EAAE,KAAK,KAAK,CAAxC,GAA4C,KAAK,CAAjD,GAAqDA,EAAE,CAACE,MAAzD,CAAd;AACH,WAHD;;AAAA;AAAA;AAAA;AAAA;;AAIAN,QAAAA,MAAM,CAACO,iBAAP,CAAyBX,OAAzB;AACH,OAPD,MAQK;AACDG,QAAAA,MAAM,CAAC,kCAAD,CAAN;AACH;AACJ,KAZM,CAAP;AAaH,GAjB6B;;AAAA,kBAAjBQ,iBAAiB;AAAA;AAAA;AAAA,GAAvB;AAkBP,OAAO,MAAMG,kBAAkB;AAAA,gCAAG,WAAOd,OAAP,EAAmB;AACjD,QAAIA,OAAO,YAAYY,IAAvB,EAA6B;AACzB,mBAAaZ,OAAO,CAACe,IAAR,EAAb;AACH;;AACD,WAAO,IAAId,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAIH,OAAJ,EAAa;AACT,cAAMI,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,QAAAA,MAAM,CAACE,MAAP;AAAA,wCAAgB,WAAOC,CAAP,EAAa;AACzB,gBAAIC,EAAJ;;AACA,mBAAON,OAAO,CAAC,CAACM,EAAE,GAAGD,CAAC,CAACE,MAAR,MAAoB,IAApB,IAA4BD,EAAE,KAAK,KAAK,CAAxC,GAA4C,KAAK,CAAjD,GAAqDA,EAAE,CAACE,MAAzD,CAAd;AACH,WAHD;;AAAA;AAAA;AAAA;AAAA;;AAIAN,QAAAA,MAAM,CAACU,kBAAP,CAA0Bd,OAA1B;AACH,OAPD,MAQK;AACDG,QAAAA,MAAM,CAAC,kCAAD,CAAN;AACH;AACJ,KAZM,CAAP;AAaH,GAjB8B;;AAAA,kBAAlBW,kBAAkB;AAAA;AAAA;AAAA,GAAxB","sourcesContent":["export const readAsDataURL = (content) => {\n    return new Promise((resolve, reject) => {\n        if (content) {\n            const reader = new FileReader();\n            reader.onload = async (e) => {\n                var _a;\n                return resolve((_a = e.target) === null || _a === void 0 ? void 0 : _a.result);\n            };\n            reader.readAsDataURL(content);\n        }\n        else {\n            reject(\"Content must not be undefined...\");\n        }\n    });\n};\nexport const readAsArrayBuffer = async (content) => {\n    if (content instanceof Blob) {\n        return await content.arrayBuffer();\n    }\n    return new Promise((resolve, reject) => {\n        if (content) {\n            const reader = new FileReader();\n            reader.onload = async (e) => {\n                var _a;\n                return resolve((_a = e.target) === null || _a === void 0 ? void 0 : _a.result);\n            };\n            reader.readAsArrayBuffer(content);\n        }\n        else {\n            reject(\"Content must not be undefined...\");\n        }\n    });\n};\nexport const readAsBinaryString = async (content) => {\n    if (content instanceof Blob) {\n        return await content.text();\n    }\n    return new Promise((resolve, reject) => {\n        if (content) {\n            const reader = new FileReader();\n            reader.onload = async (e) => {\n                var _a;\n                return resolve((_a = e.target) === null || _a === void 0 ? void 0 : _a.result);\n            };\n            reader.readAsBinaryString(content);\n        }\n        else {\n            reject(\"Content must not be undefined...\");\n        }\n    });\n};\n"]},"metadata":{},"sourceType":"module"}