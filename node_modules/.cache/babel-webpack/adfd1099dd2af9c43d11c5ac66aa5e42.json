{"ast":null,"code":"import { FormArray, FormControl, FormGroup } from \"@angular/forms\";\n/**\n * Deep clones the given AbstractControl, preserving values, validators, async validators, and disabled status.\n * @param control AbstractControl\n *\n * @returns {AbstractControl}\n */\n\nexport function cloneAbstractControl(control) {\n  let newControl;\n\n  if (control instanceof FormGroup) {\n    const formGroup = new FormGroup({}, control.validator, control.asyncValidator);\n    const controls = control.controls;\n    Object.keys(controls).forEach(key => {\n      formGroup.addControl(key, cloneAbstractControl(controls[key]));\n    });\n    newControl = formGroup;\n  } else if (control instanceof FormArray) {\n    const formArray = new FormArray([], control.validator, control.asyncValidator);\n    control.controls.forEach(formControl => formArray.push(cloneAbstractControl(formControl)));\n    newControl = formArray;\n  } else if (control instanceof FormControl) {\n    newControl = new FormControl(control.value, control.validator, control.asyncValidator);\n  } else {\n    throw new Error(\"Error: unexpected control value\");\n  }\n\n  if (control.disabled) {\n    newControl.disable({\n      emitEvent: false\n    });\n  }\n\n  return newControl;\n}","map":{"version":3,"sources":["/Users/liksoft/PROJETS/FRONT/ANGULAR/Archive_Lik_Angular/src/app/core/components/dynamic-inputs/angular/helpers/abstract-controls.ts"],"names":["FormArray","FormControl","FormGroup","cloneAbstractControl","control","newControl","formGroup","validator","asyncValidator","controls","Object","keys","forEach","key","addControl","formArray","formControl","push","value","Error","disabled","disable","emitEvent"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,WAApB,EAAiCC,SAAjC,QAAmD,gBAAnD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,CAA8BC,OAA9B,EAAuC;AAC1C,MAAIC,UAAJ;;AACA,MAAID,OAAO,YAAYF,SAAvB,EAAkC;AAC9B,UAAMI,SAAS,GAAG,IAAIJ,SAAJ,CAAc,EAAd,EAAkBE,OAAO,CAACG,SAA1B,EAAqCH,OAAO,CAACI,cAA7C,CAAlB;AACA,UAAMC,QAAQ,GAAGL,OAAO,CAACK,QAAzB;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBG,OAAtB,CAA+BC,GAAD,IAAS;AACnCP,MAAAA,SAAS,CAACQ,UAAV,CAAqBD,GAArB,EAA0BV,oBAAoB,CAACM,QAAQ,CAACI,GAAD,CAAT,CAA9C;AACH,KAFD;AAGAR,IAAAA,UAAU,GAAGC,SAAb;AACH,GAPD,MAQK,IAAIF,OAAO,YAAYJ,SAAvB,EAAkC;AACnC,UAAMe,SAAS,GAAG,IAAIf,SAAJ,CAAc,EAAd,EAAkBI,OAAO,CAACG,SAA1B,EAAqCH,OAAO,CAACI,cAA7C,CAAlB;AACAJ,IAAAA,OAAO,CAACK,QAAR,CAAiBG,OAAjB,CAA0BI,WAAD,IAAiBD,SAAS,CAACE,IAAV,CAAed,oBAAoB,CAACa,WAAD,CAAnC,CAA1C;AACAX,IAAAA,UAAU,GAAGU,SAAb;AACH,GAJI,MAKA,IAAIX,OAAO,YAAYH,WAAvB,EAAoC;AACrCI,IAAAA,UAAU,GAAG,IAAIJ,WAAJ,CAAgBG,OAAO,CAACc,KAAxB,EAA+Bd,OAAO,CAACG,SAAvC,EAAkDH,OAAO,CAACI,cAA1D,CAAb;AACH,GAFI,MAGA;AACD,UAAM,IAAIW,KAAJ,CAAU,iCAAV,CAAN;AACH;;AACD,MAAIf,OAAO,CAACgB,QAAZ,EAAsB;AAClBf,IAAAA,UAAU,CAACgB,OAAX,CAAmB;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAnB;AACH;;AACD,SAAOjB,UAAP;AACH","sourcesContent":["import { FormArray, FormControl, FormGroup, } from \"@angular/forms\";\n/**\n * Deep clones the given AbstractControl, preserving values, validators, async validators, and disabled status.\n * @param control AbstractControl\n *\n * @returns {AbstractControl}\n */\nexport function cloneAbstractControl(control) {\n    let newControl;\n    if (control instanceof FormGroup) {\n        const formGroup = new FormGroup({}, control.validator, control.asyncValidator);\n        const controls = control.controls;\n        Object.keys(controls).forEach((key) => {\n            formGroup.addControl(key, cloneAbstractControl(controls[key]));\n        });\n        newControl = formGroup;\n    }\n    else if (control instanceof FormArray) {\n        const formArray = new FormArray([], control.validator, control.asyncValidator);\n        control.controls.forEach((formControl) => formArray.push(cloneAbstractControl(formControl)));\n        newControl = formArray;\n    }\n    else if (control instanceof FormControl) {\n        newControl = new FormControl(control.value, control.validator, control.asyncValidator);\n    }\n    else {\n        throw new Error(\"Error: unexpected control value\");\n    }\n    if (control.disabled) {\n        newControl.disable({ emitEvent: false });\n    }\n    return newControl;\n}\n"]},"metadata":{},"sourceType":"module"}