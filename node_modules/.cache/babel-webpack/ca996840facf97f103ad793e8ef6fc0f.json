{"ast":null,"code":"import _asyncToGenerator from \"C:/PROJET_LIKSOFT2/Front/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isPlatformBrowser } from \"@angular/common\";\nimport { isDefined } from \"../types/type-utils\";\nimport { writeRawStream, writeStream } from \"../io\";\n/**\r\n * Provides with promise base file reader functionnality\r\n * @param file [[File|any]]\r\n */\n\nexport function readFileAsDataURI(file) {\n  return new Promise((_, __) => {\n    if (file) {\n      if (isDefined(file)) {\n        const reader = new FileReader();\n\n        reader.onload = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (e) {\n            var _a;\n\n            _((_a = e.target) === null || _a === void 0 ? void 0 : _a.result.toString());\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        reader.readAsDataURL(file);\n      } else {\n        _(undefined);\n      }\n    }\n  });\n}\n/**\r\n * @description Convert a base64 encoded string into a [[Blob]] javascript object\r\n * @param b64Data [[string]] Base64 encoded string\r\n * @param contentType [[string]]\r\n * @param sliceSize [[number]] Size of each BlobPart\r\n */\n\nexport function b64toBlob(b64Data, contentType, sliceSize) {\n  contentType = contentType || \"\";\n  sliceSize = sliceSize || 512;\n  const byteCharacters = atob(b64Data);\n  const byteArrays = [];\n\n  for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n    const slice = byteCharacters.slice(offset, offset + sliceSize);\n    const byteNumbers = new Array(slice.length);\n\n    for (let i = 0; i < slice.length; i++) {\n      byteNumbers[i] = slice.charCodeAt(i);\n    }\n\n    const byteArray = new Uint8Array(byteNumbers);\n    byteArrays.push(byteArray);\n  }\n\n  return new Blob(byteArrays, {\n    type: contentType\n  });\n}\n/**\r\n * @deprecated\r\n */\n\nexport class Browser {\n  static print() {\n    window.print();\n  }\n\n  static definePrintHandlers(callBackBeforePrint, callBackAfterPrint) {\n    if (window.matchMedia) {\n      const mediaQueryList = window.matchMedia(\"print\"); // tslint:disable-next-line: deprecation\n\n      mediaQueryList.addListener(mql => {\n        if (mql.matches) {\n          callBackBeforePrint(window);\n        } else {\n          callBackAfterPrint(window);\n        }\n      });\n    }\n\n    window.onbeforeprint = callBackBeforePrint(window);\n    window.onafterprint = callBackBeforePrint(window);\n  }\n\n  static scrollTo(element, to, duration) {\n    if (duration < 0) {\n      return;\n    }\n\n    const difference = to - element.scrollTop;\n    const perTick = difference / duration * 2;\n    setTimeout(() => {\n      element.scrollTop = element.scrollTop + perTick;\n      this.scrollTo(element, to, duration - 2);\n    }, 10);\n  }\n\n  static document(platformId) {\n    return isPlatformBrowser(platformId) ? document : null;\n  }\n  /**\r\n   * Saves a file by opening file-save-as dialog in the browser\r\n   * using file-save library.\r\n   * @param content file content as a Blob\r\n   * @param name name file should be saved as\r\n   */\n\n\n  static saveFile(content, name) {\n    return _asyncToGenerator(function* () {\n      yield writeStream(content, name);\n    })();\n  }\n  /**\r\n   * @description Save file as it is, without converting it to a blob content\r\n   * @param content [[Blob|string]]\r\n   * @param name [[string]]\r\n   */\n\n\n  static saveFileAsRaw(content, name) {\n    writeRawStream(content, name);\n  }\n\n}","map":{"version":3,"sources":["C:/PROJET_LIKSOFT2/Front/src/app/core/utils/browser/browser.ts"],"names":["isPlatformBrowser","isDefined","writeRawStream","writeStream","readFileAsDataURI","file","Promise","_","__","reader","FileReader","onload","e","_a","target","result","toString","readAsDataURL","undefined","b64toBlob","b64Data","contentType","sliceSize","byteCharacters","atob","byteArrays","offset","length","slice","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","push","Blob","type","Browser","print","window","definePrintHandlers","callBackBeforePrint","callBackAfterPrint","matchMedia","mediaQueryList","addListener","mql","matches","onbeforeprint","onafterprint","scrollTo","element","to","duration","difference","scrollTop","perTick","setTimeout","document","platformId","saveFile","content","name","saveFileAsRaw"],"mappings":"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","sourcesContent":["import { isPlatformBrowser } from \"@angular/common\";\r\nimport { isDefined } from \"../types/type-utils\";\r\nimport { writeRawStream, writeStream } from \"../io\";\r\n/**\r\n * Provides with promise base file reader functionnality\r\n * @param file [[File|any]]\r\n */\r\nexport function readFileAsDataURI(file) {\r\n    return new Promise((_, __) => {\r\n        if (file) {\r\n            if (isDefined(file)) {\r\n                const reader = new FileReader();\r\n                reader.onload = async (e) => {\r\n                    var _a;\r\n                    _((_a = e.target) === null || _a === void 0 ? void 0 : _a.result.toString());\r\n                };\r\n                reader.readAsDataURL(file);\r\n            }\r\n            else {\r\n                _(undefined);\r\n            }\r\n        }\r\n    });\r\n}\r\n/**\r\n * @description Convert a base64 encoded string into a [[Blob]] javascript object\r\n * @param b64Data [[string]] Base64 encoded string\r\n * @param contentType [[string]]\r\n * @param sliceSize [[number]] Size of each BlobPart\r\n */\r\nexport function b64toBlob(b64Data, contentType, sliceSize) {\r\n    contentType = contentType || \"\";\r\n    sliceSize = sliceSize || 512;\r\n    const byteCharacters = atob(b64Data);\r\n    const byteArrays = [];\r\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\r\n        const slice = byteCharacters.slice(offset, offset + sliceSize);\r\n        const byteNumbers = new Array(slice.length);\r\n        for (let i = 0; i < slice.length; i++) {\r\n            byteNumbers[i] = slice.charCodeAt(i);\r\n        }\r\n        const byteArray = new Uint8Array(byteNumbers);\r\n        byteArrays.push(byteArray);\r\n    }\r\n    return new Blob(byteArrays, { type: contentType });\r\n}\r\n/**\r\n * @deprecated\r\n */\r\nexport class Browser {\r\n    static print() {\r\n        window.print();\r\n    }\r\n    static definePrintHandlers(callBackBeforePrint, callBackAfterPrint) {\r\n        if (window.matchMedia) {\r\n            const mediaQueryList = window.matchMedia(\"print\");\r\n            // tslint:disable-next-line: deprecation\r\n            mediaQueryList.addListener((mql) => {\r\n                if (mql.matches) {\r\n                    callBackBeforePrint(window);\r\n                }\r\n                else {\r\n                    callBackAfterPrint(window);\r\n                }\r\n            });\r\n        }\r\n        window.onbeforeprint = callBackBeforePrint(window);\r\n        window.onafterprint = callBackBeforePrint(window);\r\n    }\r\n    static scrollTo(element, to, duration) {\r\n        if (duration < 0) {\r\n            return;\r\n        }\r\n        const difference = to - element.scrollTop;\r\n        const perTick = (difference / duration) * 2;\r\n        setTimeout(() => {\r\n            element.scrollTop = element.scrollTop + perTick;\r\n            this.scrollTo(element, to, duration - 2);\r\n        }, 10);\r\n    }\r\n    static document(platformId) {\r\n        return isPlatformBrowser(platformId) ? document : null;\r\n    }\r\n    /**\r\n     * Saves a file by opening file-save-as dialog in the browser\r\n     * using file-save library.\r\n     * @param content file content as a Blob\r\n     * @param name name file should be saved as\r\n     */\r\n    static async saveFile(content, name) {\r\n        await writeStream(content, name);\r\n    }\r\n    /**\r\n     * @description Save file as it is, without converting it to a blob content\r\n     * @param content [[Blob|string]]\r\n     * @param name [[string]]\r\n     */\r\n    static saveFileAsRaw(content, name) {\r\n        writeRawStream(content, name);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}