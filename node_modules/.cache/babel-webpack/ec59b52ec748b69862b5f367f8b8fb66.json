{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/HK/Desktop/LIK_PROJECT/archiLik/Archive_Lik_Angular/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { after } from \"../types\";\nimport { readAsDataURL } from \"./reader\";\nexport class DataURIEncoded {\n  // DataURIEncoded object inializer\n  constructor(content, contentType = \"\", sliceSize = 512) {\n    this.content = content;\n    this.contentType = contentType;\n    this.sliceSize = sliceSize; // Convert the data uri encoded object to string\n\n    this.toString = () => {\n      var _a, _b;\n\n      return ((_a = this.content) === null || _a === void 0 ? void 0 : _a.startsWith(\"data:\")) ? this.content : `data:${this.contentType && this.contentType !== \"\" ? this.contentType.endsWith(\";\") ? this.contentType.substring(0, ((_b = this.contentType) === null || _b === void 0 ? void 0 : _b.length) - 1) : this.contentType : \"application/octet-stream\"};base64,${this.content}`;\n    };\n  }\n  /**\r\n   * Convert the base64 object to {@link Blob} instance\r\n   *\r\n   * @param contentType\r\n   * @param sliceSize\r\n   */\n\n\n  toBlob(contentType, sliceSize) {\n    contentType = contentType || this.contentType || \"\";\n    sliceSize = sliceSize || this.sliceSize || 512;\n    const byteCharacters = atob(this.content);\n    const byteArrays = [];\n\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      const slice = byteCharacters.slice(offset, offset + sliceSize);\n      const byteNumbers = new Array(slice.length);\n\n      for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n\n      byteArrays.push(new Uint8Array(byteNumbers));\n    }\n\n    return new Blob(byteArrays, {\n      type: contentType\n    });\n  }\n\n  static fromBlob(content, contentType = undefined) {\n    return _asyncToGenerator(function* () {\n      try {\n        const _content = yield readAsDataURL(content);\n\n        return DataURIEncoded.fromString(after(\"base64,\", _content), contentType !== null && contentType !== void 0 ? contentType : content === null || content === void 0 ? void 0 : content.type);\n      } catch (error) {\n        throw new Error(error);\n      }\n    })();\n  }\n\n  static fromString(content, contentType = \"\", sliceSize = 512) {\n    return _asyncToGenerator(function* () {\n      return new DataURIEncoded(content, contentType, sliceSize);\n    })();\n  }\n\n}\nexport class Base64 extends DataURIEncoded {}","map":{"version":3,"sources":["C:/Users/HK/Desktop/LIK_PROJECT/archiLik/Archive_Lik_Angular/src/app/core/utils/io/base64.ts"],"names":["after","readAsDataURL","DataURIEncoded","constructor","content","contentType","sliceSize","toString","_a","_b","startsWith","endsWith","substring","length","toBlob","byteCharacters","atob","byteArrays","offset","slice","byteNumbers","Array","i","charCodeAt","push","Uint8Array","Blob","type","fromBlob","undefined","_content","fromString","error","Error","Base64"],"mappings":"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","sourcesContent":["import { after } from \"../types\";\r\nimport { readAsDataURL } from \"./reader\";\r\nexport class DataURIEncoded {\r\n    // DataURIEncoded object inializer\r\n    constructor(content, contentType = \"\", sliceSize = 512) {\r\n        this.content = content;\r\n        this.contentType = contentType;\r\n        this.sliceSize = sliceSize;\r\n        // Convert the data uri encoded object to string\r\n        this.toString = () => {\r\n            var _a, _b;\r\n            return ((_a = this.content) === null || _a === void 0 ? void 0 : _a.startsWith(\"data:\"))\r\n                ? this.content\r\n                : `data:${this.contentType && this.contentType !== \"\"\r\n                    ? this.contentType.endsWith(\";\")\r\n                        ? this.contentType.substring(0, ((_b = this.contentType) === null || _b === void 0 ? void 0 : _b.length) - 1)\r\n                        : this.contentType\r\n                    : \"application/octet-stream\"};base64,${this.content}`;\r\n        };\r\n    }\r\n    /**\r\n     * Convert the base64 object to {@link Blob} instance\r\n     *\r\n     * @param contentType\r\n     * @param sliceSize\r\n     */\r\n    toBlob(contentType, sliceSize) {\r\n        contentType = contentType || this.contentType || \"\";\r\n        sliceSize = sliceSize || this.sliceSize || 512;\r\n        const byteCharacters = atob(this.content);\r\n        const byteArrays = [];\r\n        for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\r\n            const slice = byteCharacters.slice(offset, offset + sliceSize);\r\n            const byteNumbers = new Array(slice.length);\r\n            for (let i = 0; i < slice.length; i++) {\r\n                byteNumbers[i] = slice.charCodeAt(i);\r\n            }\r\n            byteArrays.push(new Uint8Array(byteNumbers));\r\n        }\r\n        return new Blob(byteArrays, { type: contentType });\r\n    }\r\n    static async fromBlob(content, contentType = undefined) {\r\n        try {\r\n            const _content = (await readAsDataURL(content));\r\n            return DataURIEncoded.fromString(after(\"base64,\", _content), contentType !== null && contentType !== void 0 ? contentType : content === null || content === void 0 ? void 0 : content.type);\r\n        }\r\n        catch (error) {\r\n            throw new Error(error);\r\n        }\r\n    }\r\n    static async fromString(content, contentType = \"\", sliceSize = 512) {\r\n        return new DataURIEncoded(content, contentType, sliceSize);\r\n    }\r\n}\r\nexport class Base64 extends DataURIEncoded {\r\n}\r\n"]},"metadata":{},"sourceType":"module"}