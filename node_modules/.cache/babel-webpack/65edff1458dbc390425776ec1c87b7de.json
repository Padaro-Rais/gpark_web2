{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/HK/Desktop/LIK_PROJECT/archiLik/Archive_Lik_Angular/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Base64 } from \"./base64\";\nimport { saveAs } from \"file-saver\";\n/**\r\n * Saves a file by opening file-save-as dialog in the browser\r\n *\r\n * using file-save library.\r\n */\n\nexport const writeStream = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (content, name, type = \"application/octet-stream\") {\n    const blob = content instanceof Blob ? content : typeof content === \"string\" ? (yield Base64.fromString(content, type !== null && type !== void 0 ? type : \"application/octet-stream\")).toBlob(type) : new Blob([new Uint8Array(content)]);\n    saveAs(blob, name);\n  });\n\n  return function writeStream(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\r\n * @description Save file as it is, without converting it to a blob content\r\n *\r\n * using file-save library.\r\n */\n\nexport const writeRawStream = (blobContent, fileName) => {\n  saveAs(blobContent, fileName);\n};","map":{"version":3,"sources":["C:/Users/HK/Desktop/LIK_PROJECT/archiLik/Archive_Lik_Angular/src/app/core/utils/io/writer.ts"],"names":["Base64","saveAs","writeStream","content","name","type","blob","Blob","fromString","toBlob","Uint8Array","writeRawStream","blobContent","fileName"],"mappings":";AAAA,SAASA,MAAT,QAAuB,UAAvB;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW;AAAA,+BAAG,WAAOC,OAAP,EAAgBC,IAAhB,EAAsBC,IAAI,GAAG,0BAA7B,EAA4D;AACnF,UAAMC,IAAI,GAAGH,OAAO,YAAYI,IAAnB,GACPJ,OADO,GAEP,OAAOA,OAAP,KAAmB,QAAnB,GACI,OAAOH,MAAM,CAACQ,UAAP,CAAkBL,OAAlB,EAA2BE,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmCA,IAAnC,GAA0C,0BAArE,CAAP,EAAyGI,MAAzG,CAAgHJ,IAAhH,CADJ,GAEI,IAAIE,IAAJ,CAAS,CAAC,IAAIG,UAAJ,CAAeP,OAAf,CAAD,CAAT,CAJV;AAKAF,IAAAA,MAAM,CAACK,IAAD,EAAOF,IAAP,CAAN;AACH,GAPuB;;AAAA,kBAAXF,WAAW;AAAA;AAAA;AAAA,GAAjB;AAQP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMS,cAAc,GAAG,CAACC,WAAD,EAAcC,QAAd,KAA2B;AACrDZ,EAAAA,MAAM,CAACW,WAAD,EAAcC,QAAd,CAAN;AACH,CAFM","sourcesContent":["import { Base64 } from \"./base64\";\r\nimport { saveAs } from \"file-saver\";\r\n/**\r\n * Saves a file by opening file-save-as dialog in the browser\r\n *\r\n * using file-save library.\r\n */\r\nexport const writeStream = async (content, name, type = \"application/octet-stream\") => {\r\n    const blob = content instanceof Blob\r\n        ? content\r\n        : typeof content === \"string\"\r\n            ? (await Base64.fromString(content, type !== null && type !== void 0 ? type : \"application/octet-stream\")).toBlob(type)\r\n            : new Blob([new Uint8Array(content)]);\r\n    saveAs(blob, name);\r\n};\r\n/**\r\n * @description Save file as it is, without converting it to a blob content\r\n *\r\n * using file-save library.\r\n */\r\nexport const writeRawStream = (blobContent, fileName) => {\r\n    saveAs(blobContent, fileName);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}