{"ast":null,"code":"import { createSubject, observableOf } from \"../helpers\";\nimport { isObservable } from \"rxjs\";\nimport { scan, filter, delay, first, startWith, concatMap, tap, takeUntil } from \"rxjs/operators\";\nexport var DefaultStoreAction;\n\n(function (DefaultStoreAction) {\n  DefaultStoreAction[\"ASYNC_UI_ACTION\"] = \"[ASYNC_REQUEST]\";\n  DefaultStoreAction[\"ERROR_ACTION\"] = \"[REQUEST_ERROR]\";\n  DefaultStoreAction[\"INITIALIZE_STORE_STATE\"] = \"[RESET_STORE_STATE]\";\n})(DefaultStoreAction || (DefaultStoreAction = {}));\n\nconst instanceOfInjectableStore = value => \"getInjectedStore\" in value;\n\nexport class InjectableStore {\n  get state$() {\n    return this.getInjectedStore().connect();\n  }\n\n}\nexport class DrewlabsFluxStore {\n  /**\n   * @description EntityState instance initializer\n   */\n  constructor(reducer, initial) {\n    this._destroy$ = createSubject();\n    this._store$ = createSubject(1); // tslint:disable-next-line: variable-name\n\n    this.state$ = this._store$.asObservable(); // tslint:disable-next-line: variable-name\n\n    this._actions$ = createSubject(); // @internal\n\n    this.subscribeToActions = (reducer, initial) => {\n      this._actions$.pipe(takeUntil(this._destroy$), concatMap(action => isObservable(action) ? action : observableOf(action)), filter(state => typeof state !== \"undefined\" && state !== null), startWith(initial), scan(reducer), tap(state => this._store$.next(state))).subscribe();\n    };\n\n    this.bindActionCreator = handler => (...args) => {\n      const action = handler.call(null, ...args);\n\n      this._actions$.next(action);\n\n      if (isObservable(action.payload)) {\n        // Simulate a wait before calling the next method\n        observableOf([action.payload]).pipe(first(), delay(10)).subscribe(state => {\n          this._actions$.next(state[0]);\n        });\n      }\n\n      return action;\n    };\n    /**\n     * @description Connect to the store data stream\n     */\n\n\n    this.connect = () => this.state$;\n    /**\n     * Provides a destruction mechanism to the store\n     *\n     * @returns\n     */\n\n\n    this.destroy = () => (() => {\n      this._store$.complete();\n\n      this._destroy$.next();\n    })();\n\n    this.subscribeToActions(reducer, initial);\n  }\n\n} // tslint:disable-next-line: typedef\n\nexport function createAction(rxStore, actionCreator) {\n  if (instanceOfInjectableStore(rxStore)) {\n    return rxStore.getInjectedStore().bindActionCreator(actionCreator);\n  }\n\n  return rxStore.bindActionCreator(actionCreator);\n}\nexport const createStore = (reducer, initialState) => {\n  return new DrewlabsFluxStore(reducer, initialState);\n};\nexport const onErrorAction = store => createAction(store, payload => ({\n  type: DefaultStoreAction.ERROR_ACTION,\n  payload\n}));\nexport const onInitStoreStateAction = store => createAction(store, (payload = {}) => ({\n  type: DefaultStoreAction.INITIALIZE_STORE_STATE,\n  payload\n}));\nexport const asyncUIAction = store => createAction(store, (payload = {}) => ({\n  type: DefaultStoreAction.ASYNC_UI_ACTION,\n  payload\n}));","map":{"version":3,"sources":["/Users/liksoft/PROJETS/FRONT/ANGULAR/Archive_Lik_Angular/src/app/core/rxjs/state/rx-state.ts"],"names":["createSubject","observableOf","isObservable","scan","filter","delay","first","startWith","concatMap","tap","takeUntil","DefaultStoreAction","instanceOfInjectableStore","value","InjectableStore","state$","getInjectedStore","connect","DrewlabsFluxStore","constructor","reducer","initial","_destroy$","_store$","asObservable","_actions$","subscribeToActions","pipe","action","state","next","subscribe","bindActionCreator","handler","args","call","payload","destroy","complete","createAction","rxStore","actionCreator","createStore","initialState","onErrorAction","store","type","ERROR_ACTION","onInitStoreStateAction","INITIALIZE_STORE_STATE","asyncUIAction","ASYNC_UI_ACTION"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,YAAxB,QAA4C,YAA5C;AACA,SAASC,YAAT,QAA6B,MAA7B;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,EAA8BC,KAA9B,EAAqCC,SAArC,EAAgDC,SAAhD,EAA2DC,GAA3D,EAAgEC,SAAhE,QAAkF,gBAAlF;AACA,OAAO,IAAIC,kBAAJ;;AACP,CAAC,UAAUA,kBAAV,EAA8B;AAC3BA,EAAAA,kBAAkB,CAAC,iBAAD,CAAlB,GAAwC,iBAAxC;AACAA,EAAAA,kBAAkB,CAAC,cAAD,CAAlB,GAAqC,iBAArC;AACAA,EAAAA,kBAAkB,CAAC,wBAAD,CAAlB,GAA+C,qBAA/C;AACH,CAJD,EAIGA,kBAAkB,KAAKA,kBAAkB,GAAG,EAA1B,CAJrB;;AAKA,MAAMC,yBAAyB,GAAIC,KAAD,IAAW,sBAAsBA,KAAnE;;AACA,OAAO,MAAMC,eAAN,CAAsB;AACf,MAANC,MAAM,GAAG;AACT,WAAO,KAAKC,gBAAL,GAAwBC,OAAxB,EAAP;AACH;;AAHwB;AAK7B,OAAO,MAAMC,iBAAN,CAAwB;AAC3B;AACJ;AACA;AACIC,EAAAA,WAAW,CAACC,OAAD,EAAUC,OAAV,EAAmB;AAC1B,SAAKC,SAAL,GAAiBtB,aAAa,EAA9B;AACA,SAAKuB,OAAL,GAAevB,aAAa,CAAC,CAAD,CAA5B,CAF0B,CAG1B;;AACA,SAAKe,MAAL,GAAc,KAAKQ,OAAL,CAAaC,YAAb,EAAd,CAJ0B,CAK1B;;AACA,SAAKC,SAAL,GAAiBzB,aAAa,EAA9B,CAN0B,CAO1B;;AACA,SAAK0B,kBAAL,GAA0B,CAACN,OAAD,EAAUC,OAAV,KAAsB;AAC5C,WAAKI,SAAL,CACKE,IADL,CACUjB,SAAS,CAAC,KAAKY,SAAN,CADnB,EACqCd,SAAS,CAAEoB,MAAD,IAAY1B,YAAY,CAAC0B,MAAD,CAAZ,GACrDA,MADqD,GAErD3B,YAAY,CAAC2B,MAAD,CAF4B,CAD9C,EAG6BxB,MAAM,CAAEyB,KAAD,IAAW,OAAOA,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,KAAK,IAAtD,CAHnC,EAGgGtB,SAAS,CAACc,OAAD,CAHzG,EAGoHlB,IAAI,CAACiB,OAAD,CAHxH,EAGmIX,GAAG,CAAEoB,KAAD,IAAW,KAAKN,OAAL,CAAaO,IAAb,CAAkBD,KAAlB,CAAZ,CAHtI,EAIKE,SAJL;AAKH,KAND;;AAOA,SAAKC,iBAAL,GAA0BC,OAAD,IAAa,CAAC,GAAGC,IAAJ,KAAa;AAC/C,YAAMN,MAAM,GAAGK,OAAO,CAACE,IAAR,CAAa,IAAb,EAAmB,GAAGD,IAAtB,CAAf;;AACA,WAAKT,SAAL,CAAeK,IAAf,CAAoBF,MAApB;;AACA,UAAI1B,YAAY,CAAC0B,MAAM,CAACQ,OAAR,CAAhB,EAAkC;AAC9B;AACAnC,QAAAA,YAAY,CAAC,CAAC2B,MAAM,CAACQ,OAAR,CAAD,CAAZ,CACKT,IADL,CACUrB,KAAK,EADf,EACmBD,KAAK,CAAC,EAAD,CADxB,EAEK0B,SAFL,CAEgBF,KAAD,IAAW;AACtB,eAAKJ,SAAL,CAAeK,IAAf,CAAoBD,KAAK,CAAC,CAAD,CAAzB;AACH,SAJD;AAKH;;AACD,aAAOD,MAAP;AACH,KAZD;AAaA;AACR;AACA;;;AACQ,SAAKX,OAAL,GAAe,MAAM,KAAKF,MAA1B;AACA;AACR;AACA;AACA;AACA;;;AACQ,SAAKsB,OAAL,GAAe,MAAM,CAAC,MAAM;AACxB,WAAKd,OAAL,CAAae,QAAb;;AACA,WAAKhB,SAAL,CAAeQ,IAAf;AACH,KAHoB,GAArB;;AAIA,SAAKJ,kBAAL,CAAwBN,OAAxB,EAAiCC,OAAjC;AACH;;AA9C0B,C,CAgD/B;;AACA,OAAO,SAASkB,YAAT,CAAsBC,OAAtB,EAA+BC,aAA/B,EAA8C;AACjD,MAAI7B,yBAAyB,CAAC4B,OAAD,CAA7B,EAAwC;AACpC,WAAOA,OAAO,CACTxB,gBADE,GAEFgB,iBAFE,CAEgBS,aAFhB,CAAP;AAGH;;AACD,SAAOD,OAAO,CAACR,iBAAR,CAA0BS,aAA1B,CAAP;AACH;AACD,OAAO,MAAMC,WAAW,GAAG,CAACtB,OAAD,EAAUuB,YAAV,KAA2B;AAClD,SAAO,IAAIzB,iBAAJ,CAAsBE,OAAtB,EAA+BuB,YAA/B,CAAP;AACH,CAFM;AAGP,OAAO,MAAMC,aAAa,GAAIC,KAAD,IAAWN,YAAY,CAACM,KAAD,EAAST,OAAD,KAAc;AAAEU,EAAAA,IAAI,EAAEnC,kBAAkB,CAACoC,YAA3B;AAAyCX,EAAAA;AAAzC,CAAd,CAAR,CAA7C;AACP,OAAO,MAAMY,sBAAsB,GAAIH,KAAD,IAAWN,YAAY,CAACM,KAAD,EAAQ,CAACT,OAAO,GAAG,EAAX,MAAmB;AAAEU,EAAAA,IAAI,EAAEnC,kBAAkB,CAACsC,sBAA3B;AAAmDb,EAAAA;AAAnD,CAAnB,CAAR,CAAtD;AACP,OAAO,MAAMc,aAAa,GAAIL,KAAD,IAAWN,YAAY,CAACM,KAAD,EAAQ,CAACT,OAAO,GAAG,EAAX,MAAmB;AAAEU,EAAAA,IAAI,EAAEnC,kBAAkB,CAACwC,eAA3B;AAA4Cf,EAAAA;AAA5C,CAAnB,CAAR,CAA7C","sourcesContent":["import { createSubject, observableOf } from \"../helpers\";\nimport { isObservable } from \"rxjs\";\nimport { scan, filter, delay, first, startWith, concatMap, tap, takeUntil, } from \"rxjs/operators\";\nexport var DefaultStoreAction;\n(function (DefaultStoreAction) {\n    DefaultStoreAction[\"ASYNC_UI_ACTION\"] = \"[ASYNC_REQUEST]\";\n    DefaultStoreAction[\"ERROR_ACTION\"] = \"[REQUEST_ERROR]\";\n    DefaultStoreAction[\"INITIALIZE_STORE_STATE\"] = \"[RESET_STORE_STATE]\";\n})(DefaultStoreAction || (DefaultStoreAction = {}));\nconst instanceOfInjectableStore = (value) => \"getInjectedStore\" in value;\nexport class InjectableStore {\n    get state$() {\n        return this.getInjectedStore().connect();\n    }\n}\nexport class DrewlabsFluxStore {\n    /**\n     * @description EntityState instance initializer\n     */\n    constructor(reducer, initial) {\n        this._destroy$ = createSubject();\n        this._store$ = createSubject(1);\n        // tslint:disable-next-line: variable-name\n        this.state$ = this._store$.asObservable();\n        // tslint:disable-next-line: variable-name\n        this._actions$ = createSubject();\n        // @internal\n        this.subscribeToActions = (reducer, initial) => {\n            this._actions$\n                .pipe(takeUntil(this._destroy$), concatMap((action) => isObservable(action)\n                ? action\n                : observableOf(action)), filter((state) => typeof state !== \"undefined\" && state !== null), startWith(initial), scan(reducer), tap((state) => this._store$.next(state)))\n                .subscribe();\n        };\n        this.bindActionCreator = (handler) => (...args) => {\n            const action = handler.call(null, ...args);\n            this._actions$.next(action);\n            if (isObservable(action.payload)) {\n                // Simulate a wait before calling the next method\n                observableOf([action.payload])\n                    .pipe(first(), delay(10))\n                    .subscribe((state) => {\n                    this._actions$.next(state[0]);\n                });\n            }\n            return action;\n        };\n        /**\n         * @description Connect to the store data stream\n         */\n        this.connect = () => this.state$;\n        /**\n         * Provides a destruction mechanism to the store\n         *\n         * @returns\n         */\n        this.destroy = () => (() => {\n            this._store$.complete();\n            this._destroy$.next();\n        })();\n        this.subscribeToActions(reducer, initial);\n    }\n}\n// tslint:disable-next-line: typedef\nexport function createAction(rxStore, actionCreator) {\n    if (instanceOfInjectableStore(rxStore)) {\n        return rxStore\n            .getInjectedStore()\n            .bindActionCreator(actionCreator);\n    }\n    return rxStore.bindActionCreator(actionCreator);\n}\nexport const createStore = (reducer, initialState) => {\n    return new DrewlabsFluxStore(reducer, initialState);\n};\nexport const onErrorAction = (store) => createAction(store, (payload) => ({ type: DefaultStoreAction.ERROR_ACTION, payload }));\nexport const onInitStoreStateAction = (store) => createAction(store, (payload = {}) => ({ type: DefaultStoreAction.INITIALIZE_STORE_STATE, payload }));\nexport const asyncUIAction = (store) => createAction(store, (payload = {}) => ({ type: DefaultStoreAction.ASYNC_UI_ACTION, payload }));\n"]},"metadata":{},"sourceType":"module"}