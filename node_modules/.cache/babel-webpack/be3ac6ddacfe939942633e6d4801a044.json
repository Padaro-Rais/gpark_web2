{"ast":null,"code":"import { includes, toNumber, isNumber } from \"lodash\";\nimport { ComponentReactiveFormHelpers } from \"./reactive-form-helpers\";\nexport const applyHiddenAttributeCallback = (form, bidings, value) => formgroup => {\n  const hasControls = Array.isArray(form.controlConfigs) && form.controlConfigs.length !== 0;\n\n  if (hasControls) {\n    form.controlConfigs = form.controlConfigs.map(_control => {\n      var _a, _b, _c, _d;\n\n      if (_control.formControlName === bidings.key) {\n        value = isNaN(value) ? value : toNumber(value);\n        const requiredIfValues = isNumber(value) ? _control.requiredIf ? _control.requiredIf.values.map(item => {\n          return isNaN(item) ? item : toNumber(item);\n        }) : [] : ((_a = _control.requiredIf) === null || _a === void 0 ? void 0 : _a.values) || [];\n        _control.hidden = !includes(requiredIfValues, value) ? true : false;\n\n        if (_control.hidden) {\n          (_b = formgroup.get(bidings.key)) === null || _b === void 0 ? void 0 : _b.setValue(null);\n          ComponentReactiveFormHelpers.clearControlValidators(formgroup.get(bidings.key) || undefined);\n          ComponentReactiveFormHelpers.clearAsyncValidators(formgroup.get(bidings.key) || undefined);\n        } else {\n          (_c = formgroup.get(bidings.key)) === null || _c === void 0 ? void 0 : _c.setValidators(bidings.validators || null);\n          (_d = formgroup.get(bidings.key)) === null || _d === void 0 ? void 0 : _d.setAsyncValidators(bidings.asyncValidators || null);\n        }\n      }\n\n      return _control;\n    });\n  }\n\n  return {\n    control: formgroup,\n    form\n  };\n}; // tslint:disable-next-line: typedef\n\nexport const getControlBinding = form => formgroup => {\n  var _a, _b, _c, _d;\n\n  const bindings = {};\n  const canApplyBindings = Array.isArray(form.controlConfigs) && form.controlConfigs.length !== 0 && formgroup;\n\n  if (canApplyBindings) {\n    form.controlConfigs.forEach(config => {\n      var _a, _b;\n\n      const {\n        requiredIf,\n        formControlName\n      } = config;\n      const control_ = formgroup.get(formControlName);\n\n      if (requiredIf) {\n        bindings[formControlName] = {\n          key: formControlName,\n          binding: requiredIf,\n          validators: (_a = control_ === null || control_ === void 0 ? void 0 : control_.validator) !== null && _a !== void 0 ? _a : undefined,\n          asyncValidators: (_b = control_ === null || control_ === void 0 ? void 0 : control_.asyncValidator) !== null && _b !== void 0 ? _b : undefined\n        };\n      }\n    });\n\n    for (const value of Object.values(bindings)) {\n      const binding = (_a = value.binding) !== null && _a !== void 0 ? _a : undefined;\n      const hasControl = binding ? false !== ((_b = formgroup.get(binding.formControlName)) !== null && _b !== void 0 ? _b : false) : false;\n      const controlValue = value.binding ? (_d = formgroup.get((_c = value.binding) === null || _c === void 0 ? void 0 : _c.formControlName)) === null || _d === void 0 ? void 0 : _d.value : undefined;\n\n      if (binding && hasControl) {\n        const {\n          control,\n          dynamicForm\n        } = applyAttribute(form, value, controlValue, applyHiddenAttributeCallback)(formgroup);\n        formgroup = control;\n        form = dynamicForm;\n      }\n    }\n  }\n\n  return {\n    bindings,\n    formgroup,\n    form\n  };\n}; // tslint:disable-next-line: typedef\n\nexport const applyAttribute = (param, bindings, value, callback) => formgroup => {\n  // Calls the update method here\n  const {\n    control,\n    form\n  } = callback(param, bindings, value)(formgroup);\n  return {\n    control: control,\n    dynamicForm: form\n  };\n};","map":{"version":3,"sources":["C:/PROJET_LIKSOFT2/Front/src/app/core/components/dynamic-inputs/angular/helpers/control-wrapper.ts"],"names":["includes","toNumber","isNumber","ComponentReactiveFormHelpers","applyHiddenAttributeCallback","form","bidings","value","formgroup","hasControls","Array","isArray","controlConfigs","length","map","_control","_a","_b","_c","_d","formControlName","key","isNaN","requiredIfValues","requiredIf","values","item","hidden","get","setValue","clearControlValidators","undefined","clearAsyncValidators","setValidators","validators","setAsyncValidators","asyncValidators","control","getControlBinding","bindings","canApplyBindings","forEach","config","control_","binding","validator","asyncValidator","Object","hasControl","controlValue","dynamicForm","applyAttribute","param","callback"],"mappings":"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","sourcesContent":["import { includes, toNumber, isNumber } from \"lodash\";\r\nimport { ComponentReactiveFormHelpers } from \"./reactive-form-helpers\";\r\nexport const applyHiddenAttributeCallback = (form, bidings, value) => (formgroup) => {\r\n    const hasControls = Array.isArray(form.controlConfigs) && form.controlConfigs.length !== 0;\r\n    if (hasControls) {\r\n        form.controlConfigs = form.controlConfigs.map((_control) => {\r\n            var _a, _b, _c, _d;\r\n            if (_control.formControlName === bidings.key) {\r\n                value = isNaN(value) ? value : toNumber(value);\r\n                const requiredIfValues = isNumber(value)\r\n                    ? _control.requiredIf\r\n                        ? _control.requiredIf.values.map((item) => {\r\n                            return isNaN(item) ? item : toNumber(item);\r\n                        })\r\n                        : []\r\n                    : ((_a = _control.requiredIf) === null || _a === void 0 ? void 0 : _a.values) || [];\r\n                _control.hidden = !includes(requiredIfValues, value) ? true : false;\r\n                if (_control.hidden) {\r\n                    (_b = formgroup.get(bidings.key)) === null || _b === void 0 ? void 0 : _b.setValue(null);\r\n                    ComponentReactiveFormHelpers.clearControlValidators(formgroup.get(bidings.key) || undefined);\r\n                    ComponentReactiveFormHelpers.clearAsyncValidators(formgroup.get(bidings.key) || undefined);\r\n                }\r\n                else {\r\n                    (_c = formgroup\r\n                        .get(bidings.key)) === null || _c === void 0 ? void 0 : _c.setValidators(bidings.validators || null);\r\n                    (_d = formgroup\r\n                        .get(bidings.key)) === null || _d === void 0 ? void 0 : _d.setAsyncValidators(bidings.asyncValidators || null);\r\n                }\r\n            }\r\n            return _control;\r\n        });\r\n    }\r\n    return { control: formgroup, form };\r\n};\r\n// tslint:disable-next-line: typedef\r\nexport const getControlBinding = (form) => (formgroup) => {\r\n    var _a, _b, _c, _d;\r\n    const bindings = {};\r\n    const canApplyBindings = Array.isArray(form.controlConfigs) &&\r\n        form.controlConfigs.length !== 0 &&\r\n        formgroup;\r\n    if (canApplyBindings) {\r\n        form.controlConfigs.forEach((config) => {\r\n            var _a, _b;\r\n            const { requiredIf, formControlName } = config;\r\n            const control_ = formgroup.get(formControlName);\r\n            if (requiredIf) {\r\n                bindings[formControlName] = {\r\n                    key: formControlName,\r\n                    binding: requiredIf,\r\n                    validators: (_a = control_ === null || control_ === void 0 ? void 0 : control_.validator) !== null && _a !== void 0 ? _a : undefined,\r\n                    asyncValidators: (_b = control_ === null || control_ === void 0 ? void 0 : control_.asyncValidator) !== null && _b !== void 0 ? _b : undefined,\r\n                };\r\n            }\r\n        });\r\n        for (const value of Object.values(bindings)) {\r\n            const binding = (_a = value.binding) !== null && _a !== void 0 ? _a : undefined;\r\n            const hasControl = binding\r\n                ? false !== ((_b = formgroup.get(binding.formControlName)) !== null && _b !== void 0 ? _b : false)\r\n                : false;\r\n            const controlValue = value.binding\r\n                ? (_d = formgroup.get((_c = value.binding) === null || _c === void 0 ? void 0 : _c.formControlName)) === null || _d === void 0 ? void 0 : _d.value\r\n                : undefined;\r\n            if (binding && hasControl) {\r\n                const { control, dynamicForm } = applyAttribute(form, value, controlValue, applyHiddenAttributeCallback)(formgroup);\r\n                formgroup = control;\r\n                form = dynamicForm;\r\n            }\r\n        }\r\n    }\r\n    return { bindings, formgroup, form };\r\n};\r\n// tslint:disable-next-line: typedef\r\nexport const applyAttribute = (param, bindings, value, callback) => (formgroup) => {\r\n    // Calls the update method here\r\n    const { control, form } = callback(param, bindings, value)(formgroup);\r\n    return { control: control, dynamicForm: form };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}