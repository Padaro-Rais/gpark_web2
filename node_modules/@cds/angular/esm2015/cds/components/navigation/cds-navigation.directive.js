/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { BaseCdsDirective } from '../../cds-base';
export class CdsNavigationDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.cdsMotionChange = new EventEmitter();
    }
    get expandedRoot() {
        return this.element['expandedRoot'];
    }
    set expandedRoot(value) {
        if (value === '') {
            this.element['expandedRoot'] = true;
            return;
        }
        this.element['expandedRoot'] = value;
    }
    get cdsMotion() {
        return this.element['cdsMotion'];
    }
    set cdsMotion(value) {
        this.element['cdsMotion'] = value;
    }
    get role() {
        return this.element['role'];
    }
    set role(value) {
        this.element['role'] = value;
    }
    get ariaActiveDescendant() {
        return this.element['ariaActiveDescendant'];
    }
    set ariaActiveDescendant(value) {
        this.element['ariaActiveDescendant'] = value;
    }
    get expanded() {
        return this.element['expanded'];
    }
    set expanded(value) {
        if (value === '') {
            this.element['expanded'] = true;
            return;
        }
        this.element['expanded'] = value;
    }
    get i18n() {
        return this.element['i18n'];
    }
    set i18n(value) {
        this.element['i18n'] = value;
    }
    get currentActiveItem() {
        return this.element['currentActiveItem'];
    }
    set currentActiveItem(value) {
        this.element['currentActiveItem'] = value;
    }
}
CdsNavigationDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-navigation' },] }
];
CdsNavigationDirective.propDecorators = {
    expandedRoot: [{ type: Input }],
    cdsMotion: [{ type: Input }],
    role: [{ type: Input }],
    ariaActiveDescendant: [{ type: Input }],
    expanded: [{ type: Input }],
    i18n: [{ type: Input }],
    currentActiveItem: [{ type: Input }],
    cdsMotionChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RzLW5hdmlnYXRpb24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2RzLWFuZ3VsYXIvc3JjL2Nkcy9jb21wb25lbnRzL25hdmlnYXRpb24vY2RzLW5hdmlnYXRpb24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR2xELE1BQU0sT0FBTyxzQkFBdUIsU0FBUSxnQkFBZ0I7SUFENUQ7O1FBcURZLG9CQUFlLEdBQThCLElBQUksWUFBWSxFQUFFLENBQUM7SUFDNUUsQ0FBQztJQXBEQyxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUNELElBQWEsWUFBWSxDQUFDLEtBQVU7UUFDbEMsSUFBSSxLQUFLLEtBQUssRUFBRSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ3BDLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxJQUFJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUNELElBQWEsU0FBUyxDQUFDLEtBQVU7UUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDcEMsQ0FBQztJQUNELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBQ0QsSUFBYSxJQUFJLENBQUMsS0FBVTtRQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUMvQixDQUFDO0lBQ0QsSUFBSSxvQkFBb0I7UUFDdEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUNELElBQWEsb0JBQW9CLENBQUMsS0FBVTtRQUMxQyxJQUFJLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQy9DLENBQUM7SUFDRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNELElBQWEsUUFBUSxDQUFDLEtBQVU7UUFDOUIsSUFBSSxLQUFLLEtBQUssRUFBRSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ2hDLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQ25DLENBQUM7SUFDRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUNELElBQWEsSUFBSSxDQUFDLEtBQVU7UUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDL0IsQ0FBQztJQUNELElBQUksaUJBQWlCO1FBQ25CLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFDRCxJQUFhLGlCQUFpQixDQUFDLEtBQVU7UUFDdkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUM1QyxDQUFDOzs7WUFuREYsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFOzs7MkJBS3RDLEtBQUs7d0JBVUwsS0FBSzttQkFNTCxLQUFLO21DQU1MLEtBQUs7dUJBTUwsS0FBSzttQkFVTCxLQUFLO2dDQU1MLEtBQUs7OEJBSUwsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJhc2VDZHNEaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9jZHMtYmFzZSc7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ2Nkcy1uYXZpZ2F0aW9uJyB9KVxuZXhwb3J0IGNsYXNzIENkc05hdmlnYXRpb25EaXJlY3RpdmUgZXh0ZW5kcyBCYXNlQ2RzRGlyZWN0aXZlIHtcbiAgZ2V0IGV4cGFuZGVkUm9vdCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50WydleHBhbmRlZFJvb3QnXTtcbiAgfVxuICBASW5wdXQoKSBzZXQgZXhwYW5kZWRSb290KHZhbHVlOiBhbnkpIHtcbiAgICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgICB0aGlzLmVsZW1lbnRbJ2V4cGFuZGVkUm9vdCddID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5lbGVtZW50WydleHBhbmRlZFJvb3QnXSA9IHZhbHVlO1xuICB9XG4gIGdldCBjZHNNb3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFsnY2RzTW90aW9uJ107XG4gIH1cbiAgQElucHV0KCkgc2V0IGNkc01vdGlvbih2YWx1ZTogYW55KSB7XG4gICAgdGhpcy5lbGVtZW50WydjZHNNb3Rpb24nXSA9IHZhbHVlO1xuICB9XG4gIGdldCByb2xlKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRbJ3JvbGUnXTtcbiAgfVxuICBASW5wdXQoKSBzZXQgcm9sZSh2YWx1ZTogYW55KSB7XG4gICAgdGhpcy5lbGVtZW50Wydyb2xlJ10gPSB2YWx1ZTtcbiAgfVxuICBnZXQgYXJpYUFjdGl2ZURlc2NlbmRhbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFsnYXJpYUFjdGl2ZURlc2NlbmRhbnQnXTtcbiAgfVxuICBASW5wdXQoKSBzZXQgYXJpYUFjdGl2ZURlc2NlbmRhbnQodmFsdWU6IGFueSkge1xuICAgIHRoaXMuZWxlbWVudFsnYXJpYUFjdGl2ZURlc2NlbmRhbnQnXSA9IHZhbHVlO1xuICB9XG4gIGdldCBleHBhbmRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50WydleHBhbmRlZCddO1xuICB9XG4gIEBJbnB1dCgpIHNldCBleHBhbmRlZCh2YWx1ZTogYW55KSB7XG4gICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgdGhpcy5lbGVtZW50WydleHBhbmRlZCddID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5lbGVtZW50WydleHBhbmRlZCddID0gdmFsdWU7XG4gIH1cbiAgZ2V0IGkxOG4oKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFsnaTE4biddO1xuICB9XG4gIEBJbnB1dCgpIHNldCBpMThuKHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLmVsZW1lbnRbJ2kxOG4nXSA9IHZhbHVlO1xuICB9XG4gIGdldCBjdXJyZW50QWN0aXZlSXRlbSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50WydjdXJyZW50QWN0aXZlSXRlbSddO1xuICB9XG4gIEBJbnB1dCgpIHNldCBjdXJyZW50QWN0aXZlSXRlbSh2YWx1ZTogYW55KSB7XG4gICAgdGhpcy5lbGVtZW50WydjdXJyZW50QWN0aXZlSXRlbSddID0gdmFsdWU7XG4gIH1cblxuICBAT3V0cHV0KCkgY2RzTW90aW9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xufVxuIl19