/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { BaseCdsDirective } from '../../cds-base';
export class CdsPasswordDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get i18n() {
        return this.element['i18n'];
    }
    set i18n(value) {
        this.element['i18n'] = value;
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsPasswordDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-password' },] }
];
CdsPasswordDirective.propDecorators = {
    i18n: [{ type: Input }],
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RzLXBhc3N3b3JkLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Nkcy1hbmd1bGFyL3NyYy9jZHMvY29tcG9uZW50cy9wYXNzd29yZC9jZHMtcGFzc3dvcmQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR2xELE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxnQkFBZ0I7SUFEMUQ7O1FBeURZLGlCQUFZLEdBQThCLElBQUksWUFBWSxFQUFFLENBQUM7SUFDekUsQ0FBQztJQXhEQyxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUNELElBQWEsSUFBSSxDQUFDLEtBQVU7UUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDL0IsQ0FBQztJQUNELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBQ0QsSUFBYSxNQUFNLENBQUMsS0FBVTtRQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUNqQyxDQUFDO0lBQ0QsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFDRCxJQUFhLFlBQVksQ0FBQyxLQUFVO1FBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNELElBQWEsUUFBUSxDQUFDLEtBQVU7UUFDOUIsSUFBSSxLQUFLLEtBQUssRUFBRSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ2hDLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQ25DLENBQUM7SUFDRCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUNELElBQWEsVUFBVSxDQUFDLEtBQVU7UUFDaEMsSUFBSSxLQUFLLEtBQUssRUFBRSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ2xDLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQ3JDLENBQUM7SUFDRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUNELElBQWEsTUFBTSxDQUFDLEtBQVU7UUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDakMsQ0FBQztJQUNELElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBQ0QsSUFBYSxZQUFZLENBQUMsS0FBVTtRQUNsQyxJQUFJLEtBQUssS0FBSyxFQUFFLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUM7WUFDcEMsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDdkMsQ0FBQzs7O1lBdkRGLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUU7OzttQkFLcEMsS0FBSztxQkFNTCxLQUFLOzJCQU1MLEtBQUs7dUJBTUwsS0FBSzt5QkFVTCxLQUFLO3FCQVVMLEtBQUs7MkJBTUwsS0FBSzsyQkFRTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmFzZUNkc0RpcmVjdGl2ZSB9IGZyb20gJy4uLy4uL2Nkcy1iYXNlJztcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnY2RzLXBhc3N3b3JkJyB9KVxuZXhwb3J0IGNsYXNzIENkc1Bhc3N3b3JkRGlyZWN0aXZlIGV4dGVuZHMgQmFzZUNkc0RpcmVjdGl2ZSB7XG4gIGdldCBpMThuKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRbJ2kxOG4nXTtcbiAgfVxuICBASW5wdXQoKSBzZXQgaTE4bih2YWx1ZTogYW55KSB7XG4gICAgdGhpcy5lbGVtZW50WydpMThuJ10gPSB2YWx1ZTtcbiAgfVxuICBnZXQgc3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRbJ3N0YXR1cyddO1xuICB9XG4gIEBJbnB1dCgpIHNldCBzdGF0dXModmFsdWU6IGFueSkge1xuICAgIHRoaXMuZWxlbWVudFsnc3RhdHVzJ10gPSB2YWx1ZTtcbiAgfVxuICBnZXQgY29udHJvbFdpZHRoKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRbJ2NvbnRyb2xXaWR0aCddO1xuICB9XG4gIEBJbnB1dCgpIHNldCBjb250cm9sV2lkdGgodmFsdWU6IGFueSkge1xuICAgIHRoaXMuZWxlbWVudFsnY29udHJvbFdpZHRoJ10gPSB2YWx1ZTtcbiAgfVxuICBnZXQgdmFsaWRhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFsndmFsaWRhdGUnXTtcbiAgfVxuICBASW5wdXQoKSBzZXQgdmFsaWRhdGUodmFsdWU6IGFueSkge1xuICAgIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgIHRoaXMuZWxlbWVudFsndmFsaWRhdGUnXSA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZWxlbWVudFsndmFsaWRhdGUnXSA9IHZhbHVlO1xuICB9XG4gIGdldCByZXNwb25zaXZlKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRbJ3Jlc3BvbnNpdmUnXTtcbiAgfVxuICBASW5wdXQoKSBzZXQgcmVzcG9uc2l2ZSh2YWx1ZTogYW55KSB7XG4gICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgdGhpcy5lbGVtZW50WydyZXNwb25zaXZlJ10gPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmVsZW1lbnRbJ3Jlc3BvbnNpdmUnXSA9IHZhbHVlO1xuICB9XG4gIGdldCBsYXlvdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFsnbGF5b3V0J107XG4gIH1cbiAgQElucHV0KCkgc2V0IGxheW91dCh2YWx1ZTogYW55KSB7XG4gICAgdGhpcy5lbGVtZW50WydsYXlvdXQnXSA9IHZhbHVlO1xuICB9XG4gIGdldCBsYXlvdXRTdGFibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFsnbGF5b3V0U3RhYmxlJ107XG4gIH1cbiAgQElucHV0KCkgc2V0IGxheW91dFN0YWJsZSh2YWx1ZTogYW55KSB7XG4gICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgdGhpcy5lbGVtZW50WydsYXlvdXRTdGFibGUnXSA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZWxlbWVudFsnbGF5b3V0U3RhYmxlJ10gPSB2YWx1ZTtcbiAgfVxuXG4gIEBPdXRwdXQoKSBsYXlvdXRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG59XG4iXX0=