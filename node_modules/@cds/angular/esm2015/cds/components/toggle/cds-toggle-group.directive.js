/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, Input } from '@angular/core';
import { BaseCdsDirective } from '../../cds-base';
export class CdsToggleGroupDirective extends BaseCdsDirective {
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get controlAlign() {
        return this.element['controlAlign'];
    }
    set controlAlign(value) {
        this.element['controlAlign'] = value;
    }
    get disabled() {
        return this.element['disabled'];
    }
    set disabled(value) {
        if (value === '') {
            this.element['disabled'] = true;
            return;
        }
        this.element['disabled'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsToggleGroupDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-toggle-group' },] }
];
CdsToggleGroupDirective.propDecorators = {
    status: [{ type: Input }],
    layout: [{ type: Input }],
    controlAlign: [{ type: Input }],
    disabled: [{ type: Input }],
    controlWidth: [{ type: Input }],
    responsive: [{ type: Input }],
    layoutStable: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RzLXRvZ2dsZS1ncm91cC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jZHMtYW5ndWxhci9zcmMvY2RzL2NvbXBvbmVudHMvdG9nZ2xlL2Nkcy10b2dnbGUtZ3JvdXAuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUdsRCxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsZ0JBQWdCO0lBQzNELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBQ0QsSUFBYSxNQUFNLENBQUMsS0FBVTtRQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUNqQyxDQUFDO0lBQ0QsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFDRCxJQUFhLE1BQU0sQ0FBQyxLQUFVO1FBQzVCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQ2pDLENBQUM7SUFDRCxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUNELElBQWEsWUFBWSxDQUFDLEtBQVU7UUFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDdkMsQ0FBQztJQUNELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBQ0QsSUFBYSxRQUFRLENBQUMsS0FBVTtRQUM5QixJQUFJLEtBQUssS0FBSyxFQUFFLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUM7WUFDaEMsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDbkMsQ0FBQztJQUNELElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBQ0QsSUFBYSxZQUFZLENBQUMsS0FBVTtRQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUN2QyxDQUFDO0lBQ0QsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFDRCxJQUFhLFVBQVUsQ0FBQyxLQUFVO1FBQ2hDLElBQUksS0FBSyxLQUFLLEVBQUUsRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQztZQUNsQyxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUNyQyxDQUFDO0lBQ0QsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFDRCxJQUFhLFlBQVksQ0FBQyxLQUFVO1FBQ2xDLElBQUksS0FBSyxLQUFLLEVBQUUsRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUNwQyxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUN2QyxDQUFDOzs7WUF2REYsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFOzs7cUJBS3hDLEtBQUs7cUJBTUwsS0FBSzsyQkFNTCxLQUFLO3VCQU1MLEtBQUs7MkJBVUwsS0FBSzt5QkFNTCxLQUFLOzJCQVVMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjAgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJhc2VDZHNEaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9jZHMtYmFzZSc7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ2Nkcy10b2dnbGUtZ3JvdXAnIH0pXG5leHBvcnQgY2xhc3MgQ2RzVG9nZ2xlR3JvdXBEaXJlY3RpdmUgZXh0ZW5kcyBCYXNlQ2RzRGlyZWN0aXZlIHtcbiAgZ2V0IHN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50WydzdGF0dXMnXTtcbiAgfVxuICBASW5wdXQoKSBzZXQgc3RhdHVzKHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLmVsZW1lbnRbJ3N0YXR1cyddID0gdmFsdWU7XG4gIH1cbiAgZ2V0IGxheW91dCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50WydsYXlvdXQnXTtcbiAgfVxuICBASW5wdXQoKSBzZXQgbGF5b3V0KHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLmVsZW1lbnRbJ2xheW91dCddID0gdmFsdWU7XG4gIH1cbiAgZ2V0IGNvbnRyb2xBbGlnbigpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50Wydjb250cm9sQWxpZ24nXTtcbiAgfVxuICBASW5wdXQoKSBzZXQgY29udHJvbEFsaWduKHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLmVsZW1lbnRbJ2NvbnRyb2xBbGlnbiddID0gdmFsdWU7XG4gIH1cbiAgZ2V0IGRpc2FibGVkKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRbJ2Rpc2FibGVkJ107XG4gIH1cbiAgQElucHV0KCkgc2V0IGRpc2FibGVkKHZhbHVlOiBhbnkpIHtcbiAgICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgICB0aGlzLmVsZW1lbnRbJ2Rpc2FibGVkJ10gPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmVsZW1lbnRbJ2Rpc2FibGVkJ10gPSB2YWx1ZTtcbiAgfVxuICBnZXQgY29udHJvbFdpZHRoKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRbJ2NvbnRyb2xXaWR0aCddO1xuICB9XG4gIEBJbnB1dCgpIHNldCBjb250cm9sV2lkdGgodmFsdWU6IGFueSkge1xuICAgIHRoaXMuZWxlbWVudFsnY29udHJvbFdpZHRoJ10gPSB2YWx1ZTtcbiAgfVxuICBnZXQgcmVzcG9uc2l2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50WydyZXNwb25zaXZlJ107XG4gIH1cbiAgQElucHV0KCkgc2V0IHJlc3BvbnNpdmUodmFsdWU6IGFueSkge1xuICAgIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgIHRoaXMuZWxlbWVudFsncmVzcG9uc2l2ZSddID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5lbGVtZW50WydyZXNwb25zaXZlJ10gPSB2YWx1ZTtcbiAgfVxuICBnZXQgbGF5b3V0U3RhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRbJ2xheW91dFN0YWJsZSddO1xuICB9XG4gIEBJbnB1dCgpIHNldCBsYXlvdXRTdGFibGUodmFsdWU6IGFueSkge1xuICAgIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgIHRoaXMuZWxlbWVudFsnbGF5b3V0U3RhYmxlJ10gPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmVsZW1lbnRbJ2xheW91dFN0YWJsZSddID0gdmFsdWU7XG4gIH1cbn1cbiJdfQ==