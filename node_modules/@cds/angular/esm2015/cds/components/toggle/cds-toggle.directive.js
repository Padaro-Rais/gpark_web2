/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { BaseCdsDirective } from '../../cds-base';
export class CdsToggleDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get cdsMotion() {
        return this.element['cdsMotion'];
    }
    set cdsMotion(value) {
        this.element['cdsMotion'] = value;
    }
    get controlAlign() {
        return this.element['controlAlign'];
    }
    set controlAlign(value) {
        this.element['controlAlign'] = value;
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsToggleDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-toggle' },] }
];
CdsToggleDirective.propDecorators = {
    cdsMotion: [{ type: Input }],
    controlAlign: [{ type: Input }],
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RzLXRvZ2dsZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jZHMtYW5ndWxhci9zcmMvY2RzL2NvbXBvbmVudHMvdG9nZ2xlL2Nkcy10b2dnbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR2xELE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxnQkFBZ0I7SUFEeEQ7O1FBK0RZLGlCQUFZLEdBQThCLElBQUksWUFBWSxFQUFFLENBQUM7SUFDekUsQ0FBQztJQTlEQyxJQUFJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUNELElBQWEsU0FBUyxDQUFDLEtBQVU7UUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDcEMsQ0FBQztJQUNELElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBQ0QsSUFBYSxZQUFZLENBQUMsS0FBVTtRQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUN2QyxDQUFDO0lBQ0QsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFDRCxJQUFhLE1BQU0sQ0FBQyxLQUFVO1FBQzVCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQ2pDLENBQUM7SUFDRCxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUNELElBQWEsWUFBWSxDQUFDLEtBQVU7UUFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDdkMsQ0FBQztJQUNELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBQ0QsSUFBYSxRQUFRLENBQUMsS0FBVTtRQUM5QixJQUFJLEtBQUssS0FBSyxFQUFFLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUM7WUFDaEMsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDbkMsQ0FBQztJQUNELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBQ0QsSUFBYSxVQUFVLENBQUMsS0FBVTtRQUNoQyxJQUFJLEtBQUssS0FBSyxFQUFFLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUM7WUFDbEMsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDckMsQ0FBQztJQUNELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBQ0QsSUFBYSxNQUFNLENBQUMsS0FBVTtRQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUNqQyxDQUFDO0lBQ0QsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFDRCxJQUFhLFlBQVksQ0FBQyxLQUFVO1FBQ2xDLElBQUksS0FBSyxLQUFLLEVBQUUsRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUNwQyxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUN2QyxDQUFDOzs7WUE3REYsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRTs7O3dCQUtsQyxLQUFLOzJCQU1MLEtBQUs7cUJBTUwsS0FBSzsyQkFNTCxLQUFLO3VCQU1MLEtBQUs7eUJBVUwsS0FBSztxQkFVTCxLQUFLOzJCQU1MLEtBQUs7MkJBUUwsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJhc2VDZHNEaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9jZHMtYmFzZSc7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ2Nkcy10b2dnbGUnIH0pXG5leHBvcnQgY2xhc3MgQ2RzVG9nZ2xlRGlyZWN0aXZlIGV4dGVuZHMgQmFzZUNkc0RpcmVjdGl2ZSB7XG4gIGdldCBjZHNNb3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFsnY2RzTW90aW9uJ107XG4gIH1cbiAgQElucHV0KCkgc2V0IGNkc01vdGlvbih2YWx1ZTogYW55KSB7XG4gICAgdGhpcy5lbGVtZW50WydjZHNNb3Rpb24nXSA9IHZhbHVlO1xuICB9XG4gIGdldCBjb250cm9sQWxpZ24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFsnY29udHJvbEFsaWduJ107XG4gIH1cbiAgQElucHV0KCkgc2V0IGNvbnRyb2xBbGlnbih2YWx1ZTogYW55KSB7XG4gICAgdGhpcy5lbGVtZW50Wydjb250cm9sQWxpZ24nXSA9IHZhbHVlO1xuICB9XG4gIGdldCBzdGF0dXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFsnc3RhdHVzJ107XG4gIH1cbiAgQElucHV0KCkgc2V0IHN0YXR1cyh2YWx1ZTogYW55KSB7XG4gICAgdGhpcy5lbGVtZW50WydzdGF0dXMnXSA9IHZhbHVlO1xuICB9XG4gIGdldCBjb250cm9sV2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFsnY29udHJvbFdpZHRoJ107XG4gIH1cbiAgQElucHV0KCkgc2V0IGNvbnRyb2xXaWR0aCh2YWx1ZTogYW55KSB7XG4gICAgdGhpcy5lbGVtZW50Wydjb250cm9sV2lkdGgnXSA9IHZhbHVlO1xuICB9XG4gIGdldCB2YWxpZGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50Wyd2YWxpZGF0ZSddO1xuICB9XG4gIEBJbnB1dCgpIHNldCB2YWxpZGF0ZSh2YWx1ZTogYW55KSB7XG4gICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgdGhpcy5lbGVtZW50Wyd2YWxpZGF0ZSddID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5lbGVtZW50Wyd2YWxpZGF0ZSddID0gdmFsdWU7XG4gIH1cbiAgZ2V0IHJlc3BvbnNpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFsncmVzcG9uc2l2ZSddO1xuICB9XG4gIEBJbnB1dCgpIHNldCByZXNwb25zaXZlKHZhbHVlOiBhbnkpIHtcbiAgICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgICB0aGlzLmVsZW1lbnRbJ3Jlc3BvbnNpdmUnXSA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZWxlbWVudFsncmVzcG9uc2l2ZSddID0gdmFsdWU7XG4gIH1cbiAgZ2V0IGxheW91dCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50WydsYXlvdXQnXTtcbiAgfVxuICBASW5wdXQoKSBzZXQgbGF5b3V0KHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLmVsZW1lbnRbJ2xheW91dCddID0gdmFsdWU7XG4gIH1cbiAgZ2V0IGxheW91dFN0YWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50WydsYXlvdXRTdGFibGUnXTtcbiAgfVxuICBASW5wdXQoKSBzZXQgbGF5b3V0U3RhYmxlKHZhbHVlOiBhbnkpIHtcbiAgICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgICB0aGlzLmVsZW1lbnRbJ2xheW91dFN0YWJsZSddID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5lbGVtZW50WydsYXlvdXRTdGFibGUnXSA9IHZhbHVlO1xuICB9XG5cbiAgQE91dHB1dCgpIGxheW91dENoYW5nZTogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbn1cbiJdfQ==