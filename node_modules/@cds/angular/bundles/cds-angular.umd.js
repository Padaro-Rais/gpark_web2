(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@cds/core/accordion/register.js'), require('@cds/core/alert/register.js'), require('@cds/core/badge/register.js'), require('@cds/core/breadcrumb/register.js'), require('@cds/core/button/register.js'), require('@cds/core/card/register.js'), require('@cds/core/checkbox/register.js'), require('@cds/core/datalist/register.js'), require('@cds/core/date/register.js'), require('@cds/core/divider/register.js'), require('@cds/core/file/register.js'), require('@cds/core/forms/register.js'), require('@cds/core/icon/register.js'), require('@cds/core/input/register.js'), require('@cds/core/modal/register.js'), require('@cds/core/navigation/register.js'), require('@cds/core/pagination/register.js'), require('@cds/core/password/register.js'), require('@cds/core/progress-circle/register.js'), require('@cds/core/radio/register.js'), require('@cds/core/range/register.js'), require('@cds/core/search/register.js'), require('@cds/core/select/register.js'), require('@cds/core/selection-panels/register.js'), require('@cds/core/tag/register.js'), require('@cds/core/textarea/register.js'), require('@cds/core/time/register.js'), require('@cds/core/toggle/register.js'), require('@cds/core/tree-view/register.js')) :
    typeof define === 'function' && define.amd ? define('@cds/angular', ['exports', '@angular/core', '@angular/common', '@cds/core/accordion/register.js', '@cds/core/alert/register.js', '@cds/core/badge/register.js', '@cds/core/breadcrumb/register.js', '@cds/core/button/register.js', '@cds/core/card/register.js', '@cds/core/checkbox/register.js', '@cds/core/datalist/register.js', '@cds/core/date/register.js', '@cds/core/divider/register.js', '@cds/core/file/register.js', '@cds/core/forms/register.js', '@cds/core/icon/register.js', '@cds/core/input/register.js', '@cds/core/modal/register.js', '@cds/core/navigation/register.js', '@cds/core/pagination/register.js', '@cds/core/password/register.js', '@cds/core/progress-circle/register.js', '@cds/core/radio/register.js', '@cds/core/range/register.js', '@cds/core/search/register.js', '@cds/core/select/register.js', '@cds/core/selection-panels/register.js', '@cds/core/tag/register.js', '@cds/core/textarea/register.js', '@cds/core/time/register.js', '@cds/core/toggle/register.js', '@cds/core/tree-view/register.js'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.cds = global.cds || {}, global.cds.angular = {}), global.ng.core, global.ng.common));
}(this, (function (exports, core, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var BaseCdsDirective = /** @class */ (function () {
        function BaseCdsDirective(elementRef) {
            this.element = elementRef.nativeElement;
        }
        return BaseCdsDirective;
    }());
    BaseCdsDirective.decorators = [
        { type: core.Directive }
    ];
    BaseCdsDirective.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };

    var CdsAccordionContentDirective = /** @class */ (function (_super) {
        __extends(CdsAccordionContentDirective, _super);
        function CdsAccordionContentDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CdsAccordionContentDirective;
    }(BaseCdsDirective));
    CdsAccordionContentDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-accordion-content' },] }
    ];

    var CdsAccordionHeaderDirective = /** @class */ (function (_super) {
        __extends(CdsAccordionHeaderDirective, _super);
        function CdsAccordionHeaderDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CdsAccordionHeaderDirective;
    }(BaseCdsDirective));
    CdsAccordionHeaderDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-accordion-header' },] }
    ];

    var CdsAccordionPanelDirective = /** @class */ (function (_super) {
        __extends(CdsAccordionPanelDirective, _super);
        function CdsAccordionPanelDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.cdsMotionChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsAccordionPanelDirective.prototype, "cdsMotion", {
            get: function () {
                return this.element['cdsMotion'];
            },
            set: function (value) {
                this.element['cdsMotion'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsAccordionPanelDirective.prototype, "disabled", {
            get: function () {
                return this.element['disabled'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['disabled'] = true;
                    return;
                }
                this.element['disabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsAccordionPanelDirective.prototype, "expanded", {
            get: function () {
                return this.element['expanded'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['expanded'] = true;
                    return;
                }
                this.element['expanded'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsAccordionPanelDirective;
    }(BaseCdsDirective));
    CdsAccordionPanelDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-accordion-panel' },] }
    ];
    CdsAccordionPanelDirective.propDecorators = {
        cdsMotion: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        expanded: [{ type: core.Input }],
        cdsMotionChange: [{ type: core.Output }]
    };

    var CdsAccordionDirective = /** @class */ (function (_super) {
        __extends(CdsAccordionDirective, _super);
        function CdsAccordionDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CdsAccordionDirective;
    }(BaseCdsDirective));
    CdsAccordionDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-accordion' },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsAccordionModule = /** @class */ (function () {
        function CdsAccordionModule() {
        }
        return CdsAccordionModule;
    }());
    CdsAccordionModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [
                        CdsAccordionContentDirective,
                        CdsAccordionHeaderDirective,
                        CdsAccordionPanelDirective,
                        CdsAccordionDirective,
                    ],
                    exports: [
                        CdsAccordionContentDirective,
                        CdsAccordionHeaderDirective,
                        CdsAccordionPanelDirective,
                        CdsAccordionDirective,
                    ],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsAlertActionsDirective = /** @class */ (function (_super) {
        __extends(CdsAlertActionsDirective, _super);
        function CdsAlertActionsDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CdsAlertActionsDirective;
    }(BaseCdsDirective));
    CdsAlertActionsDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-alert-actions' },] }
    ];

    var CdsAlertGroupDirective = /** @class */ (function (_super) {
        __extends(CdsAlertGroupDirective, _super);
        function CdsAlertGroupDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsAlertGroupDirective.prototype, "size", {
            get: function () {
                return this.element['size'];
            },
            set: function (value) {
                this.element['size'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsAlertGroupDirective.prototype, "type", {
            get: function () {
                return this.element['type'];
            },
            set: function (value) {
                this.element['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsAlertGroupDirective.prototype, "role", {
            get: function () {
                return this.element['role'];
            },
            set: function (value) {
                this.element['role'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsAlertGroupDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsAlertGroupDirective;
    }(BaseCdsDirective));
    CdsAlertGroupDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-alert-group' },] }
    ];
    CdsAlertGroupDirective.propDecorators = {
        size: [{ type: core.Input }],
        type: [{ type: core.Input }],
        role: [{ type: core.Input }],
        status: [{ type: core.Input }]
    };

    var CdsAlertDirective = /** @class */ (function (_super) {
        __extends(CdsAlertDirective, _super);
        function CdsAlertDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsAlertDirective.prototype, "size", {
            get: function () {
                return this.element['size'];
            },
            set: function (value) {
                this.element['size'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsAlertDirective.prototype, "closable", {
            get: function () {
                return this.element['closable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['closable'] = true;
                    return;
                }
                this.element['closable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsAlertDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsAlertDirective.prototype, "i18n", {
            get: function () {
                return this.element['i18n'];
            },
            set: function (value) {
                this.element['i18n'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsAlertDirective;
    }(BaseCdsDirective));
    CdsAlertDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-alert' },] }
    ];
    CdsAlertDirective.propDecorators = {
        size: [{ type: core.Input }],
        closable: [{ type: core.Input }],
        status: [{ type: core.Input }],
        i18n: [{ type: core.Input }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsAlertModule = /** @class */ (function () {
        function CdsAlertModule() {
        }
        return CdsAlertModule;
    }());
    CdsAlertModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsAlertActionsDirective, CdsAlertGroupDirective, CdsAlertDirective],
                    exports: [CdsAlertActionsDirective, CdsAlertGroupDirective, CdsAlertDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsBadgeDirective = /** @class */ (function (_super) {
        __extends(CdsBadgeDirective, _super);
        function CdsBadgeDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsBadgeDirective.prototype, "color", {
            get: function () {
                return this.element['color'];
            },
            set: function (value) {
                this.element['color'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsBadgeDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsBadgeDirective;
    }(BaseCdsDirective));
    CdsBadgeDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-badge' },] }
    ];
    CdsBadgeDirective.propDecorators = {
        color: [{ type: core.Input }],
        status: [{ type: core.Input }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsBadgeModule = /** @class */ (function () {
        function CdsBadgeModule() {
        }
        return CdsBadgeModule;
    }());
    CdsBadgeModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsBadgeDirective],
                    exports: [CdsBadgeDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsBreadcrumbDirective = /** @class */ (function (_super) {
        __extends(CdsBreadcrumbDirective, _super);
        function CdsBreadcrumbDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CdsBreadcrumbDirective;
    }(BaseCdsDirective));
    CdsBreadcrumbDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-breadcrumb' },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsBreadcrumbModule = /** @class */ (function () {
        function CdsBreadcrumbModule() {
        }
        return CdsBreadcrumbModule;
    }());
    CdsBreadcrumbModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsBreadcrumbDirective],
                    exports: [CdsBreadcrumbDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsButtonDirective = /** @class */ (function (_super) {
        __extends(CdsButtonDirective, _super);
        function CdsButtonDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsButtonDirective.prototype, "action", {
            get: function () {
                return this.element['action'];
            },
            set: function (value) {
                this.element['action'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsButtonDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsButtonDirective.prototype, "size", {
            get: function () {
                return this.element['size'];
            },
            set: function (value) {
                this.element['size'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsButtonDirective.prototype, "block", {
            get: function () {
                return this.element['block'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['block'] = true;
                    return;
                }
                this.element['block'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsButtonDirective.prototype, "loadingState", {
            get: function () {
                return this.element['loadingState'];
            },
            set: function (value) {
                this.element['loadingState'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsButtonDirective.prototype, "readonly", {
            get: function () {
                return this.element['readonly'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['readonly'] = true;
                    return;
                }
                this.element['readonly'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsButtonDirective.prototype, "type", {
            get: function () {
                return this.element['type'];
            },
            set: function (value) {
                this.element['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsButtonDirective.prototype, "name", {
            get: function () {
                return this.element['name'];
            },
            set: function (value) {
                this.element['name'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsButtonDirective.prototype, "value", {
            get: function () {
                return this.element['value'];
            },
            set: function (value) {
                this.element['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsButtonDirective.prototype, "disabled", {
            get: function () {
                return this.element['disabled'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['disabled'] = true;
                    return;
                }
                this.element['disabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsButtonDirective.prototype, "ariaDisabled", {
            get: function () {
                return this.element['ariaDisabled'];
            },
            set: function (value) {
                this.element['ariaDisabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsButtonDirective;
    }(BaseCdsDirective));
    CdsButtonDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-button' },] }
    ];
    CdsButtonDirective.propDecorators = {
        action: [{ type: core.Input }],
        status: [{ type: core.Input }],
        size: [{ type: core.Input }],
        block: [{ type: core.Input }],
        loadingState: [{ type: core.Input }],
        readonly: [{ type: core.Input }],
        type: [{ type: core.Input }],
        name: [{ type: core.Input }],
        value: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        ariaDisabled: [{ type: core.Input }]
    };

    var CdsIconButtonDirective = /** @class */ (function (_super) {
        __extends(CdsIconButtonDirective, _super);
        function CdsIconButtonDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsIconButtonDirective.prototype, "ariaLabel", {
            get: function () {
                return this.element['ariaLabel'];
            },
            set: function (value) {
                this.element['ariaLabel'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsIconButtonDirective.prototype, "action", {
            get: function () {
                return this.element['action'];
            },
            set: function (value) {
                this.element['action'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsIconButtonDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsIconButtonDirective.prototype, "size", {
            get: function () {
                return this.element['size'];
            },
            set: function (value) {
                this.element['size'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsIconButtonDirective.prototype, "block", {
            get: function () {
                return this.element['block'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['block'] = true;
                    return;
                }
                this.element['block'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsIconButtonDirective.prototype, "loadingState", {
            get: function () {
                return this.element['loadingState'];
            },
            set: function (value) {
                this.element['loadingState'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsIconButtonDirective.prototype, "readonly", {
            get: function () {
                return this.element['readonly'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['readonly'] = true;
                    return;
                }
                this.element['readonly'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsIconButtonDirective.prototype, "type", {
            get: function () {
                return this.element['type'];
            },
            set: function (value) {
                this.element['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsIconButtonDirective.prototype, "name", {
            get: function () {
                return this.element['name'];
            },
            set: function (value) {
                this.element['name'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsIconButtonDirective.prototype, "value", {
            get: function () {
                return this.element['value'];
            },
            set: function (value) {
                this.element['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsIconButtonDirective.prototype, "disabled", {
            get: function () {
                return this.element['disabled'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['disabled'] = true;
                    return;
                }
                this.element['disabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsIconButtonDirective.prototype, "ariaDisabled", {
            get: function () {
                return this.element['ariaDisabled'];
            },
            set: function (value) {
                this.element['ariaDisabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsIconButtonDirective;
    }(BaseCdsDirective));
    CdsIconButtonDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-icon-button' },] }
    ];
    CdsIconButtonDirective.propDecorators = {
        ariaLabel: [{ type: core.Input }],
        action: [{ type: core.Input }],
        status: [{ type: core.Input }],
        size: [{ type: core.Input }],
        block: [{ type: core.Input }],
        loadingState: [{ type: core.Input }],
        readonly: [{ type: core.Input }],
        type: [{ type: core.Input }],
        name: [{ type: core.Input }],
        value: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        ariaDisabled: [{ type: core.Input }]
    };

    var CdsInlineButtonDirective = /** @class */ (function (_super) {
        __extends(CdsInlineButtonDirective, _super);
        function CdsInlineButtonDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsInlineButtonDirective.prototype, "readonly", {
            get: function () {
                return this.element['readonly'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['readonly'] = true;
                    return;
                }
                this.element['readonly'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInlineButtonDirective.prototype, "type", {
            get: function () {
                return this.element['type'];
            },
            set: function (value) {
                this.element['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInlineButtonDirective.prototype, "name", {
            get: function () {
                return this.element['name'];
            },
            set: function (value) {
                this.element['name'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInlineButtonDirective.prototype, "value", {
            get: function () {
                return this.element['value'];
            },
            set: function (value) {
                this.element['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInlineButtonDirective.prototype, "disabled", {
            get: function () {
                return this.element['disabled'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['disabled'] = true;
                    return;
                }
                this.element['disabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInlineButtonDirective.prototype, "ariaDisabled", {
            get: function () {
                return this.element['ariaDisabled'];
            },
            set: function (value) {
                this.element['ariaDisabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsInlineButtonDirective;
    }(BaseCdsDirective));
    CdsInlineButtonDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-inline-button' },] }
    ];
    CdsInlineButtonDirective.propDecorators = {
        readonly: [{ type: core.Input }],
        type: [{ type: core.Input }],
        name: [{ type: core.Input }],
        value: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        ariaDisabled: [{ type: core.Input }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsButtonModule = /** @class */ (function () {
        function CdsButtonModule() {
        }
        return CdsButtonModule;
    }());
    CdsButtonModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsButtonDirective, CdsIconButtonDirective, CdsInlineButtonDirective],
                    exports: [CdsButtonDirective, CdsIconButtonDirective, CdsInlineButtonDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsCardDirective = /** @class */ (function (_super) {
        __extends(CdsCardDirective, _super);
        function CdsCardDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsCardDirective.prototype, "role", {
            get: function () {
                return this.element['role'];
            },
            set: function (value) {
                this.element['role'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCardDirective.prototype, "globalStyles", {
            get: function () {
                return this.element['globalStyles'];
            },
            set: function (value) {
                this.element['globalStyles'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsCardDirective;
    }(BaseCdsDirective));
    CdsCardDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-card' },] }
    ];
    CdsCardDirective.propDecorators = {
        role: [{ type: core.Input }],
        globalStyles: [{ type: core.Input }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsCardModule = /** @class */ (function () {
        function CdsCardModule() {
        }
        return CdsCardModule;
    }());
    CdsCardModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsCardDirective],
                    exports: [CdsCardDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsCheckboxGroupDirective = /** @class */ (function (_super) {
        __extends(CdsCheckboxGroupDirective, _super);
        function CdsCheckboxGroupDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsCheckboxGroupDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxGroupDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxGroupDirective.prototype, "controlAlign", {
            get: function () {
                return this.element['controlAlign'];
            },
            set: function (value) {
                this.element['controlAlign'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxGroupDirective.prototype, "disabled", {
            get: function () {
                return this.element['disabled'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['disabled'] = true;
                    return;
                }
                this.element['disabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxGroupDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxGroupDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxGroupDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsCheckboxGroupDirective;
    }(BaseCdsDirective));
    CdsCheckboxGroupDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-checkbox-group' },] }
    ];
    CdsCheckboxGroupDirective.propDecorators = {
        status: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        controlAlign: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }]
    };

    var CdsCheckboxDirective = /** @class */ (function (_super) {
        __extends(CdsCheckboxDirective, _super);
        function CdsCheckboxDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.layoutChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsCheckboxDirective.prototype, "controlAlign", {
            get: function () {
                return this.element['controlAlign'];
            },
            set: function (value) {
                this.element['controlAlign'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxDirective.prototype, "validate", {
            get: function () {
                return this.element['validate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['validate'] = true;
                    return;
                }
                this.element['validate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsCheckboxDirective;
    }(BaseCdsDirective));
    CdsCheckboxDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-checkbox' },] }
    ];
    CdsCheckboxDirective.propDecorators = {
        controlAlign: [{ type: core.Input }],
        status: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        validate: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }],
        layoutChange: [{ type: core.Output }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsCheckboxModule = /** @class */ (function () {
        function CdsCheckboxModule() {
        }
        return CdsCheckboxModule;
    }());
    CdsCheckboxModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsCheckboxGroupDirective, CdsCheckboxDirective],
                    exports: [CdsCheckboxGroupDirective, CdsCheckboxDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsDatalistDirective = /** @class */ (function (_super) {
        __extends(CdsDatalistDirective, _super);
        function CdsDatalistDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.layoutChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsDatalistDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsDatalistDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsDatalistDirective.prototype, "validate", {
            get: function () {
                return this.element['validate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['validate'] = true;
                    return;
                }
                this.element['validate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsDatalistDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsDatalistDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsDatalistDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsDatalistDirective;
    }(BaseCdsDirective));
    CdsDatalistDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-datalist' },] }
    ];
    CdsDatalistDirective.propDecorators = {
        status: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        validate: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }],
        layoutChange: [{ type: core.Output }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsDatalistModule = /** @class */ (function () {
        function CdsDatalistModule() {
        }
        return CdsDatalistModule;
    }());
    CdsDatalistModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsDatalistDirective],
                    exports: [CdsDatalistDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsDateDirective = /** @class */ (function (_super) {
        __extends(CdsDateDirective, _super);
        function CdsDateDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.layoutChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsDateDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsDateDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsDateDirective.prototype, "validate", {
            get: function () {
                return this.element['validate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['validate'] = true;
                    return;
                }
                this.element['validate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsDateDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsDateDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsDateDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsDateDirective;
    }(BaseCdsDirective));
    CdsDateDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-date' },] }
    ];
    CdsDateDirective.propDecorators = {
        status: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        validate: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }],
        layoutChange: [{ type: core.Output }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsDateModule = /** @class */ (function () {
        function CdsDateModule() {
        }
        return CdsDateModule;
    }());
    CdsDateModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsDateDirective],
                    exports: [CdsDateDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsDividerDirective = /** @class */ (function (_super) {
        __extends(CdsDividerDirective, _super);
        function CdsDividerDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsDividerDirective.prototype, "orientation", {
            get: function () {
                return this.element['orientation'];
            },
            set: function (value) {
                this.element['orientation'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsDividerDirective;
    }(BaseCdsDirective));
    CdsDividerDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-divider' },] }
    ];
    CdsDividerDirective.propDecorators = {
        orientation: [{ type: core.Input }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsDividerModule = /** @class */ (function () {
        function CdsDividerModule() {
        }
        return CdsDividerModule;
    }());
    CdsDividerModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsDividerDirective],
                    exports: [CdsDividerDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsFileDirective = /** @class */ (function (_super) {
        __extends(CdsFileDirective, _super);
        function CdsFileDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.layoutChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsFileDirective.prototype, "i18n", {
            get: function () {
                return this.element['i18n'];
            },
            set: function (value) {
                this.element['i18n'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsFileDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsFileDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsFileDirective.prototype, "validate", {
            get: function () {
                return this.element['validate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['validate'] = true;
                    return;
                }
                this.element['validate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsFileDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsFileDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsFileDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsFileDirective;
    }(BaseCdsDirective));
    CdsFileDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-file' },] }
    ];
    CdsFileDirective.propDecorators = {
        i18n: [{ type: core.Input }],
        status: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        validate: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }],
        layoutChange: [{ type: core.Output }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsFileModule = /** @class */ (function () {
        function CdsFileModule() {
        }
        return CdsFileModule;
    }());
    CdsFileModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsFileDirective],
                    exports: [CdsFileDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsControlDirective = /** @class */ (function (_super) {
        __extends(CdsControlDirective, _super);
        function CdsControlDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.layoutChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsControlDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsControlDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsControlDirective.prototype, "validate", {
            get: function () {
                return this.element['validate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['validate'] = true;
                    return;
                }
                this.element['validate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsControlDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsControlDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsControlDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsControlDirective;
    }(BaseCdsDirective));
    CdsControlDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-control' },] }
    ];
    CdsControlDirective.propDecorators = {
        status: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        validate: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }],
        layoutChange: [{ type: core.Output }]
    };

    var CdsControlActionDirective = /** @class */ (function (_super) {
        __extends(CdsControlActionDirective, _super);
        function CdsControlActionDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsControlActionDirective.prototype, "action", {
            get: function () {
                return this.element['action'];
            },
            set: function (value) {
                this.element['action'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsControlActionDirective.prototype, "readonly", {
            get: function () {
                return this.element['readonly'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['readonly'] = true;
                    return;
                }
                this.element['readonly'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsControlActionDirective.prototype, "ariaLabel", {
            get: function () {
                return this.element['ariaLabel'];
            },
            set: function (value) {
                this.element['ariaLabel'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsControlActionDirective.prototype, "type", {
            get: function () {
                return this.element['type'];
            },
            set: function (value) {
                this.element['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsControlActionDirective.prototype, "name", {
            get: function () {
                return this.element['name'];
            },
            set: function (value) {
                this.element['name'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsControlActionDirective.prototype, "value", {
            get: function () {
                return this.element['value'];
            },
            set: function (value) {
                this.element['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsControlActionDirective.prototype, "disabled", {
            get: function () {
                return this.element['disabled'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['disabled'] = true;
                    return;
                }
                this.element['disabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsControlActionDirective.prototype, "ariaDisabled", {
            get: function () {
                return this.element['ariaDisabled'];
            },
            set: function (value) {
                this.element['ariaDisabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsControlActionDirective;
    }(BaseCdsDirective));
    CdsControlActionDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-control-action' },] }
    ];
    CdsControlActionDirective.propDecorators = {
        action: [{ type: core.Input }],
        readonly: [{ type: core.Input }],
        ariaLabel: [{ type: core.Input }],
        type: [{ type: core.Input }],
        name: [{ type: core.Input }],
        value: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        ariaDisabled: [{ type: core.Input }]
    };

    var CdsInternalControlGroupDirective = /** @class */ (function (_super) {
        __extends(CdsInternalControlGroupDirective, _super);
        function CdsInternalControlGroupDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsInternalControlGroupDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInternalControlGroupDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInternalControlGroupDirective.prototype, "controlAlign", {
            get: function () {
                return this.element['controlAlign'];
            },
            set: function (value) {
                this.element['controlAlign'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInternalControlGroupDirective.prototype, "disabled", {
            get: function () {
                return this.element['disabled'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['disabled'] = true;
                    return;
                }
                this.element['disabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInternalControlGroupDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInternalControlGroupDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInternalControlGroupDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsInternalControlGroupDirective;
    }(BaseCdsDirective));
    CdsInternalControlGroupDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-internal-control-group' },] }
    ];
    CdsInternalControlGroupDirective.propDecorators = {
        status: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        controlAlign: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }]
    };

    var CdsInternalControlInlineDirective = /** @class */ (function (_super) {
        __extends(CdsInternalControlInlineDirective, _super);
        function CdsInternalControlInlineDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.layoutChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsInternalControlInlineDirective.prototype, "controlAlign", {
            get: function () {
                return this.element['controlAlign'];
            },
            set: function (value) {
                this.element['controlAlign'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInternalControlInlineDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInternalControlInlineDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInternalControlInlineDirective.prototype, "validate", {
            get: function () {
                return this.element['validate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['validate'] = true;
                    return;
                }
                this.element['validate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInternalControlInlineDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInternalControlInlineDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInternalControlInlineDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsInternalControlInlineDirective;
    }(BaseCdsDirective));
    CdsInternalControlInlineDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-internal-control-inline' },] }
    ];
    CdsInternalControlInlineDirective.propDecorators = {
        controlAlign: [{ type: core.Input }],
        status: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        validate: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }],
        layoutChange: [{ type: core.Output }]
    };

    var CdsInternalControlLabelDirective = /** @class */ (function (_super) {
        __extends(CdsInternalControlLabelDirective, _super);
        function CdsInternalControlLabelDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsInternalControlLabelDirective.prototype, "disabled", {
            get: function () {
                return this.element['disabled'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['disabled'] = true;
                    return;
                }
                this.element['disabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInternalControlLabelDirective.prototype, "action", {
            get: function () {
                return this.element['action'];
            },
            set: function (value) {
                this.element['action'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsInternalControlLabelDirective;
    }(BaseCdsDirective));
    CdsInternalControlLabelDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-internal-control-label' },] }
    ];
    CdsInternalControlLabelDirective.propDecorators = {
        disabled: [{ type: core.Input }],
        action: [{ type: core.Input }]
    };

    var CdsControlMessageDirective = /** @class */ (function (_super) {
        __extends(CdsControlMessageDirective, _super);
        function CdsControlMessageDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsControlMessageDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsControlMessageDirective.prototype, "error", {
            get: function () {
                return this.element['error'];
            },
            set: function (value) {
                this.element['error'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsControlMessageDirective;
    }(BaseCdsDirective));
    CdsControlMessageDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-control-message' },] }
    ];
    CdsControlMessageDirective.propDecorators = {
        status: [{ type: core.Input }],
        error: [{ type: core.Input }]
    };

    var CdsFormGroupDirective = /** @class */ (function (_super) {
        __extends(CdsFormGroupDirective, _super);
        function CdsFormGroupDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsFormGroupDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsFormGroupDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsFormGroupDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsFormGroupDirective.prototype, "validate", {
            get: function () {
                return this.element['validate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['validate'] = true;
                    return;
                }
                this.element['validate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsFormGroupDirective;
    }(BaseCdsDirective));
    CdsFormGroupDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-form-group' },] }
    ];
    CdsFormGroupDirective.propDecorators = {
        layout: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        validate: [{ type: core.Input }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsFormsModule = /** @class */ (function () {
        function CdsFormsModule() {
        }
        return CdsFormsModule;
    }());
    CdsFormsModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [
                        CdsControlDirective,
                        CdsControlActionDirective,
                        CdsInternalControlGroupDirective,
                        CdsInternalControlInlineDirective,
                        CdsInternalControlLabelDirective,
                        CdsControlMessageDirective,
                        CdsFormGroupDirective,
                    ],
                    exports: [
                        CdsControlDirective,
                        CdsControlActionDirective,
                        CdsInternalControlGroupDirective,
                        CdsInternalControlInlineDirective,
                        CdsInternalControlLabelDirective,
                        CdsControlMessageDirective,
                        CdsFormGroupDirective,
                    ],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsIconDirective = /** @class */ (function (_super) {
        __extends(CdsIconDirective, _super);
        function CdsIconDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsIconDirective.prototype, "shape", {
            get: function () {
                return this.element['shape'];
            },
            set: function (value) {
                this.element['shape'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsIconDirective.prototype, "size", {
            get: function () {
                return this.element['size'];
            },
            set: function (value) {
                this.element['size'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsIconDirective.prototype, "direction", {
            get: function () {
                return this.element['direction'];
            },
            set: function (value) {
                this.element['direction'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsIconDirective.prototype, "flip", {
            get: function () {
                return this.element['flip'];
            },
            set: function (value) {
                this.element['flip'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsIconDirective.prototype, "solid", {
            get: function () {
                return this.element['solid'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['solid'] = true;
                    return;
                }
                this.element['solid'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsIconDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsIconDirective.prototype, "inverse", {
            get: function () {
                return this.element['inverse'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['inverse'] = true;
                    return;
                }
                this.element['inverse'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsIconDirective.prototype, "badge", {
            get: function () {
                return this.element['badge'];
            },
            set: function (value) {
                this.element['badge'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsIconDirective;
    }(BaseCdsDirective));
    CdsIconDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-icon' },] }
    ];
    CdsIconDirective.propDecorators = {
        shape: [{ type: core.Input }],
        size: [{ type: core.Input }],
        direction: [{ type: core.Input }],
        flip: [{ type: core.Input }],
        solid: [{ type: core.Input }],
        status: [{ type: core.Input }],
        inverse: [{ type: core.Input }],
        badge: [{ type: core.Input }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsIconModule = /** @class */ (function () {
        function CdsIconModule() {
        }
        return CdsIconModule;
    }());
    CdsIconModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsIconDirective],
                    exports: [CdsIconDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsInputGroupDirective = /** @class */ (function (_super) {
        __extends(CdsInputGroupDirective, _super);
        function CdsInputGroupDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsInputGroupDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInputGroupDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInputGroupDirective.prototype, "controlAlign", {
            get: function () {
                return this.element['controlAlign'];
            },
            set: function (value) {
                this.element['controlAlign'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInputGroupDirective.prototype, "disabled", {
            get: function () {
                return this.element['disabled'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['disabled'] = true;
                    return;
                }
                this.element['disabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInputGroupDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInputGroupDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInputGroupDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsInputGroupDirective;
    }(BaseCdsDirective));
    CdsInputGroupDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-input-group' },] }
    ];
    CdsInputGroupDirective.propDecorators = {
        status: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        controlAlign: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }]
    };

    var CdsInputDirective = /** @class */ (function (_super) {
        __extends(CdsInputDirective, _super);
        function CdsInputDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.layoutChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsInputDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInputDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInputDirective.prototype, "validate", {
            get: function () {
                return this.element['validate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['validate'] = true;
                    return;
                }
                this.element['validate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInputDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInputDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsInputDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsInputDirective;
    }(BaseCdsDirective));
    CdsInputDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-input' },] }
    ];
    CdsInputDirective.propDecorators = {
        status: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        validate: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }],
        layoutChange: [{ type: core.Output }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsInputModule = /** @class */ (function () {
        function CdsInputModule() {
        }
        return CdsInputModule;
    }());
    CdsInputModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsInputGroupDirective, CdsInputDirective],
                    exports: [CdsInputGroupDirective, CdsInputDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsModalActionsDirective = /** @class */ (function (_super) {
        __extends(CdsModalActionsDirective, _super);
        function CdsModalActionsDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CdsModalActionsDirective;
    }(BaseCdsDirective));
    CdsModalActionsDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-modal-actions' },] }
    ];

    var CdsModalContentDirective = /** @class */ (function (_super) {
        __extends(CdsModalContentDirective, _super);
        function CdsModalContentDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsModalContentDirective.prototype, "shadowRootOptions", {
            get: function () {
                return this.element['shadowRootOptions'];
            },
            set: function (value) {
                this.element['shadowRootOptions'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsModalContentDirective;
    }(BaseCdsDirective));
    CdsModalContentDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-modal-content' },] }
    ];
    CdsModalContentDirective.propDecorators = {
        shadowRootOptions: [{ type: core.Input }]
    };

    var CdsModalHeaderActionsDirective = /** @class */ (function (_super) {
        __extends(CdsModalHeaderActionsDirective, _super);
        function CdsModalHeaderActionsDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CdsModalHeaderActionsDirective;
    }(BaseCdsDirective));
    CdsModalHeaderActionsDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-modal-header-actions' },] }
    ];

    var CdsModalHeaderDirective = /** @class */ (function (_super) {
        __extends(CdsModalHeaderDirective, _super);
        function CdsModalHeaderDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CdsModalHeaderDirective;
    }(BaseCdsDirective));
    CdsModalHeaderDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-modal-header' },] }
    ];

    var CdsModalDirective = /** @class */ (function (_super) {
        __extends(CdsModalDirective, _super);
        function CdsModalDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.cdsMotionChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsModalDirective.prototype, "i18n", {
            get: function () {
                return this.element['i18n'];
            },
            set: function (value) {
                this.element['i18n'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsModalDirective.prototype, "closable", {
            get: function () {
                return this.element['closable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['closable'] = true;
                    return;
                }
                this.element['closable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsModalDirective.prototype, "size", {
            get: function () {
                return this.element['size'];
            },
            set: function (value) {
                this.element['size'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsModalDirective.prototype, "cdsMotion", {
            get: function () {
                return this.element['cdsMotion'];
            },
            set: function (value) {
                this.element['cdsMotion'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsModalDirective.prototype, "ariaModal", {
            get: function () {
                return this.element['ariaModal'];
            },
            set: function (value) {
                this.element['ariaModal'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsModalDirective.prototype, "role", {
            get: function () {
                return this.element['role'];
            },
            set: function (value) {
                this.element['role'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsModalDirective.prototype, "shadowRootOptions", {
            get: function () {
                return this.element['shadowRootOptions'];
            },
            set: function (value) {
                this.element['shadowRootOptions'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsModalDirective.prototype, "focusTrap", {
            get: function () {
                return this.element['focusTrap'];
            },
            set: function (value) {
                this.element['focusTrap'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsModalDirective.prototype, "topReboundElement", {
            get: function () {
                return this.element['topReboundElement'];
            },
            set: function (value) {
                this.element['topReboundElement'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsModalDirective.prototype, "bottomReboundElement", {
            get: function () {
                return this.element['bottomReboundElement'];
            },
            set: function (value) {
                this.element['bottomReboundElement'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsModalDirective.prototype, "hidden", {
            get: function () {
                return this.element['hidden'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['hidden'] = true;
                    return;
                }
                this.element['hidden'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsModalDirective.prototype, "focusTrapId", {
            get: function () {
                return this.element['focusTrapId'];
            },
            set: function (value) {
                this.element['focusTrapId'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsModalDirective;
    }(BaseCdsDirective));
    CdsModalDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-modal' },] }
    ];
    CdsModalDirective.propDecorators = {
        i18n: [{ type: core.Input }],
        closable: [{ type: core.Input }],
        size: [{ type: core.Input }],
        cdsMotion: [{ type: core.Input }],
        ariaModal: [{ type: core.Input }],
        role: [{ type: core.Input }],
        shadowRootOptions: [{ type: core.Input }],
        focusTrap: [{ type: core.Input }],
        topReboundElement: [{ type: core.Input }],
        bottomReboundElement: [{ type: core.Input }],
        hidden: [{ type: core.Input }],
        focusTrapId: [{ type: core.Input }],
        cdsMotionChange: [{ type: core.Output }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsModalModule = /** @class */ (function () {
        function CdsModalModule() {
        }
        return CdsModalModule;
    }());
    CdsModalModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [
                        CdsModalActionsDirective,
                        CdsModalContentDirective,
                        CdsModalHeaderActionsDirective,
                        CdsModalHeaderDirective,
                        CdsModalDirective,
                    ],
                    exports: [
                        CdsModalActionsDirective,
                        CdsModalContentDirective,
                        CdsModalHeaderActionsDirective,
                        CdsModalHeaderDirective,
                        CdsModalDirective,
                    ],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsNavigationGroupDirective = /** @class */ (function (_super) {
        __extends(CdsNavigationGroupDirective, _super);
        function CdsNavigationGroupDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.cdsMotionChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsNavigationGroupDirective.prototype, "cdsMotion", {
            get: function () {
                return this.element['cdsMotion'];
            },
            set: function (value) {
                this.element['cdsMotion'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationGroupDirective.prototype, "i18n", {
            get: function () {
                return this.element['i18n'];
            },
            set: function (value) {
                this.element['i18n'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationGroupDirective.prototype, "expanded", {
            get: function () {
                return this.element['expanded'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['expanded'] = true;
                    return;
                }
                this.element['expanded'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationGroupDirective.prototype, "active", {
            get: function () {
                return this.element['active'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['active'] = true;
                    return;
                }
                this.element['active'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationGroupDirective.prototype, "hasFocus", {
            get: function () {
                return this.element['hasFocus'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['hasFocus'] = true;
                    return;
                }
                this.element['hasFocus'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsNavigationGroupDirective;
    }(BaseCdsDirective));
    CdsNavigationGroupDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-navigation-group' },] }
    ];
    CdsNavigationGroupDirective.propDecorators = {
        cdsMotion: [{ type: core.Input }],
        i18n: [{ type: core.Input }],
        expanded: [{ type: core.Input }],
        active: [{ type: core.Input }],
        hasFocus: [{ type: core.Input }],
        cdsMotionChange: [{ type: core.Output }]
    };

    var CdsNavigationItemDirective = /** @class */ (function (_super) {
        __extends(CdsNavigationItemDirective, _super);
        function CdsNavigationItemDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsNavigationItemDirective.prototype, "i18n", {
            get: function () {
                return this.element['i18n'];
            },
            set: function (value) {
                this.element['i18n'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationItemDirective.prototype, "active", {
            get: function () {
                return this.element['active'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['active'] = true;
                    return;
                }
                this.element['active'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationItemDirective.prototype, "disabled", {
            get: function () {
                return this.element['disabled'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['disabled'] = true;
                    return;
                }
                this.element['disabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationItemDirective.prototype, "role", {
            get: function () {
                return this.element['role'];
            },
            set: function (value) {
                this.element['role'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationItemDirective.prototype, "expanded", {
            get: function () {
                return this.element['expanded'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['expanded'] = true;
                    return;
                }
                this.element['expanded'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationItemDirective.prototype, "groupItem", {
            get: function () {
                return this.element['groupItem'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['groupItem'] = true;
                    return;
                }
                this.element['groupItem'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationItemDirective.prototype, "hasFocus", {
            get: function () {
                return this.element['hasFocus'];
            },
            set: function (value) {
                this.element['hasFocus'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationItemDirective.prototype, "focusElement", {
            get: function () {
                return this.element['focusElement'];
            },
            set: function (value) {
                this.element['focusElement'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationItemDirective.prototype, "itemText", {
            get: function () {
                return this.element['itemText'];
            },
            set: function (value) {
                this.element['itemText'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsNavigationItemDirective;
    }(BaseCdsDirective));
    CdsNavigationItemDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-navigation-item' },] }
    ];
    CdsNavigationItemDirective.propDecorators = {
        i18n: [{ type: core.Input }],
        active: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        role: [{ type: core.Input }],
        expanded: [{ type: core.Input }],
        groupItem: [{ type: core.Input }],
        hasFocus: [{ type: core.Input }],
        focusElement: [{ type: core.Input }],
        itemText: [{ type: core.Input }]
    };

    var CdsNavigationStartDirective = /** @class */ (function (_super) {
        __extends(CdsNavigationStartDirective, _super);
        function CdsNavigationStartDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsNavigationStartDirective.prototype, "i18n", {
            get: function () {
                return this.element['i18n'];
            },
            set: function (value) {
                this.element['i18n'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationStartDirective.prototype, "expandedRoot", {
            get: function () {
                return this.element['expandedRoot'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['expandedRoot'] = true;
                    return;
                }
                this.element['expandedRoot'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationStartDirective.prototype, "hasFocus", {
            get: function () {
                return this.element['hasFocus'];
            },
            set: function (value) {
                this.element['hasFocus'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationStartDirective.prototype, "isGroupStart", {
            get: function () {
                return this.element['isGroupStart'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['isGroupStart'] = true;
                    return;
                }
                this.element['isGroupStart'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationStartDirective.prototype, "role", {
            get: function () {
                return this.element['role'];
            },
            set: function (value) {
                this.element['role'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationStartDirective.prototype, "navigationGroupId", {
            get: function () {
                return this.element['navigationGroupId'];
            },
            set: function (value) {
                this.element['navigationGroupId'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationStartDirective.prototype, "itemText", {
            get: function () {
                return this.element['itemText'];
            },
            set: function (value) {
                this.element['itemText'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationStartDirective.prototype, "toggleIconDirection", {
            get: function () {
                return this.element['toggleIconDirection'];
            },
            set: function (value) {
                this.element['toggleIconDirection'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsNavigationStartDirective;
    }(BaseCdsDirective));
    CdsNavigationStartDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-navigation-start' },] }
    ];
    CdsNavigationStartDirective.propDecorators = {
        i18n: [{ type: core.Input }],
        expandedRoot: [{ type: core.Input }],
        hasFocus: [{ type: core.Input }],
        isGroupStart: [{ type: core.Input }],
        role: [{ type: core.Input }],
        navigationGroupId: [{ type: core.Input }],
        itemText: [{ type: core.Input }],
        toggleIconDirection: [{ type: core.Input }]
    };

    var CdsNavigationDirective = /** @class */ (function (_super) {
        __extends(CdsNavigationDirective, _super);
        function CdsNavigationDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.cdsMotionChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsNavigationDirective.prototype, "expandedRoot", {
            get: function () {
                return this.element['expandedRoot'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['expandedRoot'] = true;
                    return;
                }
                this.element['expandedRoot'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationDirective.prototype, "cdsMotion", {
            get: function () {
                return this.element['cdsMotion'];
            },
            set: function (value) {
                this.element['cdsMotion'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationDirective.prototype, "role", {
            get: function () {
                return this.element['role'];
            },
            set: function (value) {
                this.element['role'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationDirective.prototype, "ariaActiveDescendant", {
            get: function () {
                return this.element['ariaActiveDescendant'];
            },
            set: function (value) {
                this.element['ariaActiveDescendant'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationDirective.prototype, "expanded", {
            get: function () {
                return this.element['expanded'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['expanded'] = true;
                    return;
                }
                this.element['expanded'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationDirective.prototype, "i18n", {
            get: function () {
                return this.element['i18n'];
            },
            set: function (value) {
                this.element['i18n'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsNavigationDirective.prototype, "currentActiveItem", {
            get: function () {
                return this.element['currentActiveItem'];
            },
            set: function (value) {
                this.element['currentActiveItem'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsNavigationDirective;
    }(BaseCdsDirective));
    CdsNavigationDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-navigation' },] }
    ];
    CdsNavigationDirective.propDecorators = {
        expandedRoot: [{ type: core.Input }],
        cdsMotion: [{ type: core.Input }],
        role: [{ type: core.Input }],
        ariaActiveDescendant: [{ type: core.Input }],
        expanded: [{ type: core.Input }],
        i18n: [{ type: core.Input }],
        currentActiveItem: [{ type: core.Input }],
        cdsMotionChange: [{ type: core.Output }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsNavigationModule = /** @class */ (function () {
        function CdsNavigationModule() {
        }
        return CdsNavigationModule;
    }());
    CdsNavigationModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [
                        CdsNavigationGroupDirective,
                        CdsNavigationItemDirective,
                        CdsNavigationStartDirective,
                        CdsNavigationDirective,
                    ],
                    exports: [
                        CdsNavigationGroupDirective,
                        CdsNavigationItemDirective,
                        CdsNavigationStartDirective,
                        CdsNavigationDirective,
                    ],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsPaginationButtonDirective = /** @class */ (function (_super) {
        __extends(CdsPaginationButtonDirective, _super);
        function CdsPaginationButtonDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsPaginationButtonDirective.prototype, "action", {
            get: function () {
                return this.element['action'];
            },
            set: function (value) {
                this.element['action'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsPaginationButtonDirective.prototype, "cdsIcon", {
            get: function () {
                return this.element['cdsIcon'];
            },
            set: function (value) {
                this.element['cdsIcon'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsPaginationButtonDirective.prototype, "readonly", {
            get: function () {
                return this.element['readonly'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['readonly'] = true;
                    return;
                }
                this.element['readonly'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsPaginationButtonDirective.prototype, "type", {
            get: function () {
                return this.element['type'];
            },
            set: function (value) {
                this.element['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsPaginationButtonDirective.prototype, "name", {
            get: function () {
                return this.element['name'];
            },
            set: function (value) {
                this.element['name'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsPaginationButtonDirective.prototype, "value", {
            get: function () {
                return this.element['value'];
            },
            set: function (value) {
                this.element['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsPaginationButtonDirective.prototype, "disabled", {
            get: function () {
                return this.element['disabled'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['disabled'] = true;
                    return;
                }
                this.element['disabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsPaginationButtonDirective.prototype, "ariaDisabled", {
            get: function () {
                return this.element['ariaDisabled'];
            },
            set: function (value) {
                this.element['ariaDisabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsPaginationButtonDirective;
    }(BaseCdsDirective));
    CdsPaginationButtonDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-pagination-button' },] }
    ];
    CdsPaginationButtonDirective.propDecorators = {
        action: [{ type: core.Input }],
        cdsIcon: [{ type: core.Input }],
        readonly: [{ type: core.Input }],
        type: [{ type: core.Input }],
        name: [{ type: core.Input }],
        value: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        ariaDisabled: [{ type: core.Input }]
    };

    var CdsPaginationDirective = /** @class */ (function (_super) {
        __extends(CdsPaginationDirective, _super);
        function CdsPaginationDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CdsPaginationDirective;
    }(BaseCdsDirective));
    CdsPaginationDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-pagination' },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsPaginationModule = /** @class */ (function () {
        function CdsPaginationModule() {
        }
        return CdsPaginationModule;
    }());
    CdsPaginationModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsPaginationButtonDirective, CdsPaginationDirective],
                    exports: [CdsPaginationButtonDirective, CdsPaginationDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsPasswordDirective = /** @class */ (function (_super) {
        __extends(CdsPasswordDirective, _super);
        function CdsPasswordDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.layoutChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsPasswordDirective.prototype, "i18n", {
            get: function () {
                return this.element['i18n'];
            },
            set: function (value) {
                this.element['i18n'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsPasswordDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsPasswordDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsPasswordDirective.prototype, "validate", {
            get: function () {
                return this.element['validate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['validate'] = true;
                    return;
                }
                this.element['validate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsPasswordDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsPasswordDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsPasswordDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsPasswordDirective;
    }(BaseCdsDirective));
    CdsPasswordDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-password' },] }
    ];
    CdsPasswordDirective.propDecorators = {
        i18n: [{ type: core.Input }],
        status: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        validate: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }],
        layoutChange: [{ type: core.Output }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsPasswordModule = /** @class */ (function () {
        function CdsPasswordModule() {
        }
        return CdsPasswordModule;
    }());
    CdsPasswordModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsPasswordDirective],
                    exports: [CdsPasswordDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsProgressCircleDirective = /** @class */ (function (_super) {
        __extends(CdsProgressCircleDirective, _super);
        function CdsProgressCircleDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsProgressCircleDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsProgressCircleDirective.prototype, "inverse", {
            get: function () {
                return this.element['inverse'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['inverse'] = true;
                    return;
                }
                this.element['inverse'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsProgressCircleDirective.prototype, "value", {
            get: function () {
                return this.element['value'];
            },
            set: function (value) {
                this.element['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsProgressCircleDirective.prototype, "line", {
            get: function () {
                return this.element['line'];
            },
            set: function (value) {
                this.element['line'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsProgressCircleDirective.prototype, "size", {
            get: function () {
                return this.element['size'];
            },
            set: function (value) {
                this.element['size'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsProgressCircleDirective;
    }(BaseCdsDirective));
    CdsProgressCircleDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-progress-circle' },] }
    ];
    CdsProgressCircleDirective.propDecorators = {
        status: [{ type: core.Input }],
        inverse: [{ type: core.Input }],
        value: [{ type: core.Input }],
        line: [{ type: core.Input }],
        size: [{ type: core.Input }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsProgressCircleModule = /** @class */ (function () {
        function CdsProgressCircleModule() {
        }
        return CdsProgressCircleModule;
    }());
    CdsProgressCircleModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsProgressCircleDirective],
                    exports: [CdsProgressCircleDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsRadioGroupDirective = /** @class */ (function (_super) {
        __extends(CdsRadioGroupDirective, _super);
        function CdsRadioGroupDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsRadioGroupDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioGroupDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioGroupDirective.prototype, "controlAlign", {
            get: function () {
                return this.element['controlAlign'];
            },
            set: function (value) {
                this.element['controlAlign'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioGroupDirective.prototype, "disabled", {
            get: function () {
                return this.element['disabled'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['disabled'] = true;
                    return;
                }
                this.element['disabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioGroupDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioGroupDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioGroupDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsRadioGroupDirective;
    }(BaseCdsDirective));
    CdsRadioGroupDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-radio-group' },] }
    ];
    CdsRadioGroupDirective.propDecorators = {
        status: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        controlAlign: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }]
    };

    var CdsRadioDirective = /** @class */ (function (_super) {
        __extends(CdsRadioDirective, _super);
        function CdsRadioDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.layoutChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsRadioDirective.prototype, "controlAlign", {
            get: function () {
                return this.element['controlAlign'];
            },
            set: function (value) {
                this.element['controlAlign'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioDirective.prototype, "validate", {
            get: function () {
                return this.element['validate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['validate'] = true;
                    return;
                }
                this.element['validate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsRadioDirective;
    }(BaseCdsDirective));
    CdsRadioDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-radio' },] }
    ];
    CdsRadioDirective.propDecorators = {
        controlAlign: [{ type: core.Input }],
        status: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        validate: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }],
        layoutChange: [{ type: core.Output }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsRadioModule = /** @class */ (function () {
        function CdsRadioModule() {
        }
        return CdsRadioModule;
    }());
    CdsRadioModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsRadioGroupDirective, CdsRadioDirective],
                    exports: [CdsRadioGroupDirective, CdsRadioDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsRangeDirective = /** @class */ (function (_super) {
        __extends(CdsRangeDirective, _super);
        function CdsRangeDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.layoutChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsRangeDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRangeDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRangeDirective.prototype, "validate", {
            get: function () {
                return this.element['validate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['validate'] = true;
                    return;
                }
                this.element['validate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRangeDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRangeDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRangeDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsRangeDirective;
    }(BaseCdsDirective));
    CdsRangeDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-range' },] }
    ];
    CdsRangeDirective.propDecorators = {
        status: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        validate: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }],
        layoutChange: [{ type: core.Output }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsRangeModule = /** @class */ (function () {
        function CdsRangeModule() {
        }
        return CdsRangeModule;
    }());
    CdsRangeModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsRangeDirective],
                    exports: [CdsRangeDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsSearchDirective = /** @class */ (function (_super) {
        __extends(CdsSearchDirective, _super);
        function CdsSearchDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.layoutChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsSearchDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsSearchDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsSearchDirective.prototype, "validate", {
            get: function () {
                return this.element['validate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['validate'] = true;
                    return;
                }
                this.element['validate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsSearchDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsSearchDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsSearchDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsSearchDirective;
    }(BaseCdsDirective));
    CdsSearchDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-search' },] }
    ];
    CdsSearchDirective.propDecorators = {
        status: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        validate: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }],
        layoutChange: [{ type: core.Output }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsSearchModule = /** @class */ (function () {
        function CdsSearchModule() {
        }
        return CdsSearchModule;
    }());
    CdsSearchModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsSearchDirective],
                    exports: [CdsSearchDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsSelectDirective = /** @class */ (function (_super) {
        __extends(CdsSelectDirective, _super);
        function CdsSelectDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.layoutChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsSelectDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsSelectDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsSelectDirective.prototype, "validate", {
            get: function () {
                return this.element['validate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['validate'] = true;
                    return;
                }
                this.element['validate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsSelectDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsSelectDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsSelectDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsSelectDirective;
    }(BaseCdsDirective));
    CdsSelectDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-select' },] }
    ];
    CdsSelectDirective.propDecorators = {
        status: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        validate: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }],
        layoutChange: [{ type: core.Output }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsSelectModule = /** @class */ (function () {
        function CdsSelectModule() {
        }
        return CdsSelectModule;
    }());
    CdsSelectModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsSelectDirective],
                    exports: [CdsSelectDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsCheckboxPanelDirective = /** @class */ (function (_super) {
        __extends(CdsCheckboxPanelDirective, _super);
        function CdsCheckboxPanelDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.layoutChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsCheckboxPanelDirective.prototype, "size", {
            get: function () {
                return this.element['size'];
            },
            set: function (value) {
                this.element['size'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxPanelDirective.prototype, "controlAlign", {
            get: function () {
                return this.element['controlAlign'];
            },
            set: function (value) {
                this.element['controlAlign'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxPanelDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxPanelDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxPanelDirective.prototype, "validate", {
            get: function () {
                return this.element['validate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['validate'] = true;
                    return;
                }
                this.element['validate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxPanelDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxPanelDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsCheckboxPanelDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsCheckboxPanelDirective;
    }(BaseCdsDirective));
    CdsCheckboxPanelDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-checkbox' },] }
    ];
    CdsCheckboxPanelDirective.propDecorators = {
        size: [{ type: core.Input }],
        controlAlign: [{ type: core.Input }],
        status: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        validate: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }],
        layoutChange: [{ type: core.Output }]
    };

    var CdsRadioPanelDirective = /** @class */ (function (_super) {
        __extends(CdsRadioPanelDirective, _super);
        function CdsRadioPanelDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.layoutChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsRadioPanelDirective.prototype, "size", {
            get: function () {
                return this.element['size'];
            },
            set: function (value) {
                this.element['size'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioPanelDirective.prototype, "controlAlign", {
            get: function () {
                return this.element['controlAlign'];
            },
            set: function (value) {
                this.element['controlAlign'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioPanelDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioPanelDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioPanelDirective.prototype, "validate", {
            get: function () {
                return this.element['validate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['validate'] = true;
                    return;
                }
                this.element['validate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioPanelDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioPanelDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsRadioPanelDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsRadioPanelDirective;
    }(BaseCdsDirective));
    CdsRadioPanelDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-radio' },] }
    ];
    CdsRadioPanelDirective.propDecorators = {
        size: [{ type: core.Input }],
        controlAlign: [{ type: core.Input }],
        status: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        validate: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }],
        layoutChange: [{ type: core.Output }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsSelectionPanelsModule = /** @class */ (function () {
        function CdsSelectionPanelsModule() {
        }
        return CdsSelectionPanelsModule;
    }());
    CdsSelectionPanelsModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsCheckboxPanelDirective, CdsRadioPanelDirective],
                    exports: [CdsCheckboxPanelDirective, CdsRadioPanelDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsTagDirective = /** @class */ (function (_super) {
        __extends(CdsTagDirective, _super);
        function CdsTagDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsTagDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTagDirective.prototype, "color", {
            get: function () {
                return this.element['color'];
            },
            set: function (value) {
                this.element['color'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTagDirective.prototype, "closable", {
            get: function () {
                return this.element['closable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['closable'] = true;
                    return;
                }
                this.element['closable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTagDirective.prototype, "readonly", {
            get: function () {
                return this.element['readonly'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['readonly'] = true;
                    return;
                }
                this.element['readonly'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTagDirective.prototype, "type", {
            get: function () {
                return this.element['type'];
            },
            set: function (value) {
                this.element['type'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTagDirective.prototype, "name", {
            get: function () {
                return this.element['name'];
            },
            set: function (value) {
                this.element['name'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTagDirective.prototype, "value", {
            get: function () {
                return this.element['value'];
            },
            set: function (value) {
                this.element['value'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTagDirective.prototype, "disabled", {
            get: function () {
                return this.element['disabled'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['disabled'] = true;
                    return;
                }
                this.element['disabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTagDirective.prototype, "ariaDisabled", {
            get: function () {
                return this.element['ariaDisabled'];
            },
            set: function (value) {
                this.element['ariaDisabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsTagDirective;
    }(BaseCdsDirective));
    CdsTagDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-tag' },] }
    ];
    CdsTagDirective.propDecorators = {
        status: [{ type: core.Input }],
        color: [{ type: core.Input }],
        closable: [{ type: core.Input }],
        readonly: [{ type: core.Input }],
        type: [{ type: core.Input }],
        name: [{ type: core.Input }],
        value: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        ariaDisabled: [{ type: core.Input }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsTagModule = /** @class */ (function () {
        function CdsTagModule() {
        }
        return CdsTagModule;
    }());
    CdsTagModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsTagDirective],
                    exports: [CdsTagDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsTextareaDirective = /** @class */ (function (_super) {
        __extends(CdsTextareaDirective, _super);
        function CdsTextareaDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.layoutChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsTextareaDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTextareaDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTextareaDirective.prototype, "validate", {
            get: function () {
                return this.element['validate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['validate'] = true;
                    return;
                }
                this.element['validate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTextareaDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTextareaDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTextareaDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsTextareaDirective;
    }(BaseCdsDirective));
    CdsTextareaDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-textarea' },] }
    ];
    CdsTextareaDirective.propDecorators = {
        status: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        validate: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }],
        layoutChange: [{ type: core.Output }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsTextareaModule = /** @class */ (function () {
        function CdsTextareaModule() {
        }
        return CdsTextareaModule;
    }());
    CdsTextareaModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsTextareaDirective],
                    exports: [CdsTextareaDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsTimeDirective = /** @class */ (function (_super) {
        __extends(CdsTimeDirective, _super);
        function CdsTimeDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.layoutChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsTimeDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTimeDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTimeDirective.prototype, "validate", {
            get: function () {
                return this.element['validate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['validate'] = true;
                    return;
                }
                this.element['validate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTimeDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTimeDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTimeDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsTimeDirective;
    }(BaseCdsDirective));
    CdsTimeDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-time' },] }
    ];
    CdsTimeDirective.propDecorators = {
        status: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        validate: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }],
        layoutChange: [{ type: core.Output }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsTimeModule = /** @class */ (function () {
        function CdsTimeModule() {
        }
        return CdsTimeModule;
    }());
    CdsTimeModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsTimeDirective],
                    exports: [CdsTimeDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsToggleGroupDirective = /** @class */ (function (_super) {
        __extends(CdsToggleGroupDirective, _super);
        function CdsToggleGroupDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsToggleGroupDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsToggleGroupDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsToggleGroupDirective.prototype, "controlAlign", {
            get: function () {
                return this.element['controlAlign'];
            },
            set: function (value) {
                this.element['controlAlign'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsToggleGroupDirective.prototype, "disabled", {
            get: function () {
                return this.element['disabled'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['disabled'] = true;
                    return;
                }
                this.element['disabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsToggleGroupDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsToggleGroupDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsToggleGroupDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsToggleGroupDirective;
    }(BaseCdsDirective));
    CdsToggleGroupDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-toggle-group' },] }
    ];
    CdsToggleGroupDirective.propDecorators = {
        status: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        controlAlign: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }]
    };

    var CdsToggleDirective = /** @class */ (function (_super) {
        __extends(CdsToggleDirective, _super);
        function CdsToggleDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.layoutChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsToggleDirective.prototype, "cdsMotion", {
            get: function () {
                return this.element['cdsMotion'];
            },
            set: function (value) {
                this.element['cdsMotion'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsToggleDirective.prototype, "controlAlign", {
            get: function () {
                return this.element['controlAlign'];
            },
            set: function (value) {
                this.element['controlAlign'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsToggleDirective.prototype, "status", {
            get: function () {
                return this.element['status'];
            },
            set: function (value) {
                this.element['status'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsToggleDirective.prototype, "controlWidth", {
            get: function () {
                return this.element['controlWidth'];
            },
            set: function (value) {
                this.element['controlWidth'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsToggleDirective.prototype, "validate", {
            get: function () {
                return this.element['validate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['validate'] = true;
                    return;
                }
                this.element['validate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsToggleDirective.prototype, "responsive", {
            get: function () {
                return this.element['responsive'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['responsive'] = true;
                    return;
                }
                this.element['responsive'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsToggleDirective.prototype, "layout", {
            get: function () {
                return this.element['layout'];
            },
            set: function (value) {
                this.element['layout'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsToggleDirective.prototype, "layoutStable", {
            get: function () {
                return this.element['layoutStable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['layoutStable'] = true;
                    return;
                }
                this.element['layoutStable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsToggleDirective;
    }(BaseCdsDirective));
    CdsToggleDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-toggle' },] }
    ];
    CdsToggleDirective.propDecorators = {
        cdsMotion: [{ type: core.Input }],
        controlAlign: [{ type: core.Input }],
        status: [{ type: core.Input }],
        controlWidth: [{ type: core.Input }],
        validate: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        layoutStable: [{ type: core.Input }],
        layoutChange: [{ type: core.Output }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsToggleModule = /** @class */ (function () {
        function CdsToggleModule() {
        }
        return CdsToggleModule;
    }());
    CdsToggleModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsToggleGroupDirective, CdsToggleDirective],
                    exports: [CdsToggleGroupDirective, CdsToggleDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    var CdsTreeItemDirective = /** @class */ (function (_super) {
        __extends(CdsTreeItemDirective, _super);
        function CdsTreeItemDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.cdsMotionChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(CdsTreeItemDirective.prototype, "i18n", {
            get: function () {
                return this.element['i18n'];
            },
            set: function (value) {
                this.element['i18n'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTreeItemDirective.prototype, "role", {
            get: function () {
                return this.element['role'];
            },
            set: function (value) {
                this.element['role'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTreeItemDirective.prototype, "cdsMotion", {
            get: function () {
                return this.element['cdsMotion'];
            },
            set: function (value) {
                this.element['cdsMotion'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTreeItemDirective.prototype, "ariaDisabled", {
            get: function () {
                return this.element['ariaDisabled'];
            },
            set: function (value) {
                this.element['ariaDisabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTreeItemDirective.prototype, "ariaExpanded", {
            get: function () {
                return this.element['ariaExpanded'];
            },
            set: function (value) {
                this.element['ariaExpanded'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTreeItemDirective.prototype, "ariaSelected", {
            get: function () {
                return this.element['ariaSelected'];
            },
            set: function (value) {
                this.element['ariaSelected'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTreeItemDirective.prototype, "multiSelect", {
            get: function () {
                return this.element['multiSelect'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['multiSelect'] = true;
                    return;
                }
                this.element['multiSelect'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTreeItemDirective.prototype, "disabled", {
            get: function () {
                return this.element['disabled'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['disabled'] = true;
                    return;
                }
                this.element['disabled'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTreeItemDirective.prototype, "expanded", {
            get: function () {
                return this.element['expanded'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['expanded'] = true;
                    return;
                }
                this.element['expanded'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTreeItemDirective.prototype, "expandable", {
            get: function () {
                return this.element['expandable'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['expandable'] = true;
                    return;
                }
                this.element['expandable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTreeItemDirective.prototype, "indeterminate", {
            get: function () {
                return this.element['indeterminate'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['indeterminate'] = true;
                    return;
                }
                this.element['indeterminate'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTreeItemDirective.prototype, "loading", {
            get: function () {
                return this.element['loading'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['loading'] = true;
                    return;
                }
                this.element['loading'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTreeItemDirective.prototype, "selected", {
            get: function () {
                return this.element['selected'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['selected'] = true;
                    return;
                }
                this.element['selected'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsTreeItemDirective;
    }(BaseCdsDirective));
    CdsTreeItemDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-tree-item' },] }
    ];
    CdsTreeItemDirective.propDecorators = {
        i18n: [{ type: core.Input }],
        role: [{ type: core.Input }],
        cdsMotion: [{ type: core.Input }],
        ariaDisabled: [{ type: core.Input }],
        ariaExpanded: [{ type: core.Input }],
        ariaSelected: [{ type: core.Input }],
        multiSelect: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        expanded: [{ type: core.Input }],
        expandable: [{ type: core.Input }],
        indeterminate: [{ type: core.Input }],
        loading: [{ type: core.Input }],
        selected: [{ type: core.Input }],
        cdsMotionChange: [{ type: core.Output }]
    };

    var CdsTreeDirective = /** @class */ (function (_super) {
        __extends(CdsTreeDirective, _super);
        function CdsTreeDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CdsTreeDirective.prototype, "role", {
            get: function () {
                return this.element['role'];
            },
            set: function (value) {
                this.element['role'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTreeDirective.prototype, "multiSelect", {
            get: function () {
                return this.element['multiSelect'];
            },
            set: function (value) {
                if (value === '') {
                    this.element['multiSelect'] = true;
                    return;
                }
                this.element['multiSelect'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTreeDirective.prototype, "ariaActiveDescendant", {
            get: function () {
                return this.element['ariaActiveDescendant'];
            },
            set: function (value) {
                this.element['ariaActiveDescendant'] = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CdsTreeDirective.prototype, "ariaMultiSelectable", {
            get: function () {
                return this.element['ariaMultiSelectable'];
            },
            set: function (value) {
                this.element['ariaMultiSelectable'] = value;
            },
            enumerable: false,
            configurable: true
        });
        return CdsTreeDirective;
    }(BaseCdsDirective));
    CdsTreeDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'cds-tree' },] }
    ];
    CdsTreeDirective.propDecorators = {
        role: [{ type: core.Input }],
        multiSelect: [{ type: core.Input }],
        ariaActiveDescendant: [{ type: core.Input }],
        ariaMultiSelectable: [{ type: core.Input }]
    };

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsTreeViewModule = /** @class */ (function () {
        function CdsTreeViewModule() {
        }
        return CdsTreeViewModule;
    }());
    CdsTreeViewModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [CdsTreeItemDirective, CdsTreeDirective],
                    exports: [CdsTreeItemDirective, CdsTreeDirective],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */
    var CdsModule = /** @class */ (function () {
        function CdsModule() {
        }
        return CdsModule;
    }());
    CdsModule.decorators = [
        { type: core.NgModule, args: [{
                    exports: [
                        CdsAccordionModule,
                        CdsAlertModule,
                        CdsBadgeModule,
                        CdsBreadcrumbModule,
                        CdsButtonModule,
                        CdsCardModule,
                        CdsCheckboxModule,
                        CdsDatalistModule,
                        CdsDateModule,
                        CdsDividerModule,
                        CdsFileModule,
                        CdsFormsModule,
                        CdsIconModule,
                        CdsInputModule,
                        CdsModalModule,
                        CdsNavigationModule,
                        CdsPaginationModule,
                        CdsPasswordModule,
                        CdsProgressCircleModule,
                        CdsRadioModule,
                        CdsRangeModule,
                        CdsSearchModule,
                        CdsSelectModule,
                        CdsSelectionPanelsModule,
                        CdsTagModule,
                        CdsTextareaModule,
                        CdsTimeModule,
                        CdsToggleModule,
                        CdsTreeViewModule,
                    ],
                },] }
    ];

    /*
     * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
     * This software is released under MIT license.
     * The full license information can be found in LICENSE in the root directory of this project.
     */

    /*
     * Public API Surface of cds-angular
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CdsAccordionContentDirective = CdsAccordionContentDirective;
    exports.CdsAccordionDirective = CdsAccordionDirective;
    exports.CdsAccordionHeaderDirective = CdsAccordionHeaderDirective;
    exports.CdsAccordionModule = CdsAccordionModule;
    exports.CdsAccordionPanelDirective = CdsAccordionPanelDirective;
    exports.CdsAlertActionsDirective = CdsAlertActionsDirective;
    exports.CdsAlertDirective = CdsAlertDirective;
    exports.CdsAlertGroupDirective = CdsAlertGroupDirective;
    exports.CdsAlertModule = CdsAlertModule;
    exports.CdsBadgeDirective = CdsBadgeDirective;
    exports.CdsBadgeModule = CdsBadgeModule;
    exports.CdsBreadcrumbDirective = CdsBreadcrumbDirective;
    exports.CdsBreadcrumbModule = CdsBreadcrumbModule;
    exports.CdsButtonDirective = CdsButtonDirective;
    exports.CdsButtonModule = CdsButtonModule;
    exports.CdsCardDirective = CdsCardDirective;
    exports.CdsCardModule = CdsCardModule;
    exports.CdsCheckboxDirective = CdsCheckboxDirective;
    exports.CdsCheckboxGroupDirective = CdsCheckboxGroupDirective;
    exports.CdsCheckboxModule = CdsCheckboxModule;
    exports.CdsCheckboxPanelDirective = CdsCheckboxPanelDirective;
    exports.CdsControlActionDirective = CdsControlActionDirective;
    exports.CdsControlDirective = CdsControlDirective;
    exports.CdsControlMessageDirective = CdsControlMessageDirective;
    exports.CdsDatalistDirective = CdsDatalistDirective;
    exports.CdsDatalistModule = CdsDatalistModule;
    exports.CdsDateDirective = CdsDateDirective;
    exports.CdsDateModule = CdsDateModule;
    exports.CdsDividerDirective = CdsDividerDirective;
    exports.CdsDividerModule = CdsDividerModule;
    exports.CdsFileDirective = CdsFileDirective;
    exports.CdsFileModule = CdsFileModule;
    exports.CdsFormGroupDirective = CdsFormGroupDirective;
    exports.CdsFormsModule = CdsFormsModule;
    exports.CdsIconButtonDirective = CdsIconButtonDirective;
    exports.CdsIconDirective = CdsIconDirective;
    exports.CdsIconModule = CdsIconModule;
    exports.CdsInlineButtonDirective = CdsInlineButtonDirective;
    exports.CdsInputDirective = CdsInputDirective;
    exports.CdsInputGroupDirective = CdsInputGroupDirective;
    exports.CdsInputModule = CdsInputModule;
    exports.CdsInternalControlGroupDirective = CdsInternalControlGroupDirective;
    exports.CdsInternalControlInlineDirective = CdsInternalControlInlineDirective;
    exports.CdsInternalControlLabelDirective = CdsInternalControlLabelDirective;
    exports.CdsModalActionsDirective = CdsModalActionsDirective;
    exports.CdsModalContentDirective = CdsModalContentDirective;
    exports.CdsModalDirective = CdsModalDirective;
    exports.CdsModalHeaderActionsDirective = CdsModalHeaderActionsDirective;
    exports.CdsModalHeaderDirective = CdsModalHeaderDirective;
    exports.CdsModalModule = CdsModalModule;
    exports.CdsModule = CdsModule;
    exports.CdsNavigationDirective = CdsNavigationDirective;
    exports.CdsNavigationGroupDirective = CdsNavigationGroupDirective;
    exports.CdsNavigationItemDirective = CdsNavigationItemDirective;
    exports.CdsNavigationModule = CdsNavigationModule;
    exports.CdsNavigationStartDirective = CdsNavigationStartDirective;
    exports.CdsPaginationButtonDirective = CdsPaginationButtonDirective;
    exports.CdsPaginationDirective = CdsPaginationDirective;
    exports.CdsPaginationModule = CdsPaginationModule;
    exports.CdsPasswordDirective = CdsPasswordDirective;
    exports.CdsPasswordModule = CdsPasswordModule;
    exports.CdsProgressCircleDirective = CdsProgressCircleDirective;
    exports.CdsProgressCircleModule = CdsProgressCircleModule;
    exports.CdsRadioDirective = CdsRadioDirective;
    exports.CdsRadioGroupDirective = CdsRadioGroupDirective;
    exports.CdsRadioModule = CdsRadioModule;
    exports.CdsRadioPanelDirective = CdsRadioPanelDirective;
    exports.CdsRangeDirective = CdsRangeDirective;
    exports.CdsRangeModule = CdsRangeModule;
    exports.CdsSearchDirective = CdsSearchDirective;
    exports.CdsSearchModule = CdsSearchModule;
    exports.CdsSelectDirective = CdsSelectDirective;
    exports.CdsSelectModule = CdsSelectModule;
    exports.CdsSelectionPanelsModule = CdsSelectionPanelsModule;
    exports.CdsTagDirective = CdsTagDirective;
    exports.CdsTagModule = CdsTagModule;
    exports.CdsTextareaDirective = CdsTextareaDirective;
    exports.CdsTextareaModule = CdsTextareaModule;
    exports.CdsTimeDirective = CdsTimeDirective;
    exports.CdsTimeModule = CdsTimeModule;
    exports.CdsToggleDirective = CdsToggleDirective;
    exports.CdsToggleGroupDirective = CdsToggleGroupDirective;
    exports.CdsToggleModule = CdsToggleModule;
    exports.CdsTreeDirective = CdsTreeDirective;
    exports.CdsTreeItemDirective = CdsTreeItemDirective;
    exports.CdsTreeViewModule = CdsTreeViewModule;
    exports.ɵa = BaseCdsDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cds-angular.umd.js.map
