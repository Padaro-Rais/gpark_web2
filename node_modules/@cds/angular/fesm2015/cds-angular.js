import { Directive, ElementRef, EventEmitter, Input, Output, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import '@cds/core/accordion/register.js';
import '@cds/core/alert/register.js';
import '@cds/core/badge/register.js';
import '@cds/core/breadcrumb/register.js';
import '@cds/core/button/register.js';
import '@cds/core/card/register.js';
import '@cds/core/checkbox/register.js';
import '@cds/core/datalist/register.js';
import '@cds/core/date/register.js';
import '@cds/core/divider/register.js';
import '@cds/core/file/register.js';
import '@cds/core/forms/register.js';
import '@cds/core/icon/register.js';
import '@cds/core/input/register.js';
import '@cds/core/modal/register.js';
import '@cds/core/navigation/register.js';
import '@cds/core/pagination/register.js';
import '@cds/core/password/register.js';
import '@cds/core/progress-circle/register.js';
import '@cds/core/radio/register.js';
import '@cds/core/range/register.js';
import '@cds/core/search/register.js';
import '@cds/core/select/register.js';
import '@cds/core/selection-panels/register.js';
import '@cds/core/tag/register.js';
import '@cds/core/textarea/register.js';
import '@cds/core/time/register.js';
import '@cds/core/toggle/register.js';
import '@cds/core/tree-view/register.js';

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class BaseCdsDirective {
    constructor(elementRef) {
        this.element = elementRef.nativeElement;
    }
}
BaseCdsDirective.decorators = [
    { type: Directive }
];
BaseCdsDirective.ctorParameters = () => [
    { type: ElementRef }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsAccordionContentDirective extends BaseCdsDirective {
}
CdsAccordionContentDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-accordion-content' },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsAccordionHeaderDirective extends BaseCdsDirective {
}
CdsAccordionHeaderDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-accordion-header' },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsAccordionPanelDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.cdsMotionChange = new EventEmitter();
    }
    get cdsMotion() {
        return this.element['cdsMotion'];
    }
    set cdsMotion(value) {
        this.element['cdsMotion'] = value;
    }
    get disabled() {
        return this.element['disabled'];
    }
    set disabled(value) {
        if (value === '') {
            this.element['disabled'] = true;
            return;
        }
        this.element['disabled'] = value;
    }
    get expanded() {
        return this.element['expanded'];
    }
    set expanded(value) {
        if (value === '') {
            this.element['expanded'] = true;
            return;
        }
        this.element['expanded'] = value;
    }
}
CdsAccordionPanelDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-accordion-panel' },] }
];
CdsAccordionPanelDirective.propDecorators = {
    cdsMotion: [{ type: Input }],
    disabled: [{ type: Input }],
    expanded: [{ type: Input }],
    cdsMotionChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsAccordionDirective extends BaseCdsDirective {
}
CdsAccordionDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-accordion' },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsAccordionModule {
}
CdsAccordionModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    CdsAccordionContentDirective,
                    CdsAccordionHeaderDirective,
                    CdsAccordionPanelDirective,
                    CdsAccordionDirective,
                ],
                exports: [
                    CdsAccordionContentDirective,
                    CdsAccordionHeaderDirective,
                    CdsAccordionPanelDirective,
                    CdsAccordionDirective,
                ],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsAlertActionsDirective extends BaseCdsDirective {
}
CdsAlertActionsDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-alert-actions' },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsAlertGroupDirective extends BaseCdsDirective {
    get size() {
        return this.element['size'];
    }
    set size(value) {
        this.element['size'] = value;
    }
    get type() {
        return this.element['type'];
    }
    set type(value) {
        this.element['type'] = value;
    }
    get role() {
        return this.element['role'];
    }
    set role(value) {
        this.element['role'] = value;
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
}
CdsAlertGroupDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-alert-group' },] }
];
CdsAlertGroupDirective.propDecorators = {
    size: [{ type: Input }],
    type: [{ type: Input }],
    role: [{ type: Input }],
    status: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsAlertDirective extends BaseCdsDirective {
    get size() {
        return this.element['size'];
    }
    set size(value) {
        this.element['size'] = value;
    }
    get closable() {
        return this.element['closable'];
    }
    set closable(value) {
        if (value === '') {
            this.element['closable'] = true;
            return;
        }
        this.element['closable'] = value;
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get i18n() {
        return this.element['i18n'];
    }
    set i18n(value) {
        this.element['i18n'] = value;
    }
}
CdsAlertDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-alert' },] }
];
CdsAlertDirective.propDecorators = {
    size: [{ type: Input }],
    closable: [{ type: Input }],
    status: [{ type: Input }],
    i18n: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsAlertModule {
}
CdsAlertModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsAlertActionsDirective, CdsAlertGroupDirective, CdsAlertDirective],
                exports: [CdsAlertActionsDirective, CdsAlertGroupDirective, CdsAlertDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsBadgeDirective extends BaseCdsDirective {
    get color() {
        return this.element['color'];
    }
    set color(value) {
        this.element['color'] = value;
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
}
CdsBadgeDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-badge' },] }
];
CdsBadgeDirective.propDecorators = {
    color: [{ type: Input }],
    status: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsBadgeModule {
}
CdsBadgeModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsBadgeDirective],
                exports: [CdsBadgeDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsBreadcrumbDirective extends BaseCdsDirective {
}
CdsBreadcrumbDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-breadcrumb' },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsBreadcrumbModule {
}
CdsBreadcrumbModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsBreadcrumbDirective],
                exports: [CdsBreadcrumbDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsButtonDirective extends BaseCdsDirective {
    get action() {
        return this.element['action'];
    }
    set action(value) {
        this.element['action'] = value;
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get size() {
        return this.element['size'];
    }
    set size(value) {
        this.element['size'] = value;
    }
    get block() {
        return this.element['block'];
    }
    set block(value) {
        if (value === '') {
            this.element['block'] = true;
            return;
        }
        this.element['block'] = value;
    }
    get loadingState() {
        return this.element['loadingState'];
    }
    set loadingState(value) {
        this.element['loadingState'] = value;
    }
    get readonly() {
        return this.element['readonly'];
    }
    set readonly(value) {
        if (value === '') {
            this.element['readonly'] = true;
            return;
        }
        this.element['readonly'] = value;
    }
    get type() {
        return this.element['type'];
    }
    set type(value) {
        this.element['type'] = value;
    }
    get name() {
        return this.element['name'];
    }
    set name(value) {
        this.element['name'] = value;
    }
    get value() {
        return this.element['value'];
    }
    set value(value) {
        this.element['value'] = value;
    }
    get disabled() {
        return this.element['disabled'];
    }
    set disabled(value) {
        if (value === '') {
            this.element['disabled'] = true;
            return;
        }
        this.element['disabled'] = value;
    }
    get ariaDisabled() {
        return this.element['ariaDisabled'];
    }
    set ariaDisabled(value) {
        this.element['ariaDisabled'] = value;
    }
}
CdsButtonDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-button' },] }
];
CdsButtonDirective.propDecorators = {
    action: [{ type: Input }],
    status: [{ type: Input }],
    size: [{ type: Input }],
    block: [{ type: Input }],
    loadingState: [{ type: Input }],
    readonly: [{ type: Input }],
    type: [{ type: Input }],
    name: [{ type: Input }],
    value: [{ type: Input }],
    disabled: [{ type: Input }],
    ariaDisabled: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsIconButtonDirective extends BaseCdsDirective {
    get ariaLabel() {
        return this.element['ariaLabel'];
    }
    set ariaLabel(value) {
        this.element['ariaLabel'] = value;
    }
    get action() {
        return this.element['action'];
    }
    set action(value) {
        this.element['action'] = value;
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get size() {
        return this.element['size'];
    }
    set size(value) {
        this.element['size'] = value;
    }
    get block() {
        return this.element['block'];
    }
    set block(value) {
        if (value === '') {
            this.element['block'] = true;
            return;
        }
        this.element['block'] = value;
    }
    get loadingState() {
        return this.element['loadingState'];
    }
    set loadingState(value) {
        this.element['loadingState'] = value;
    }
    get readonly() {
        return this.element['readonly'];
    }
    set readonly(value) {
        if (value === '') {
            this.element['readonly'] = true;
            return;
        }
        this.element['readonly'] = value;
    }
    get type() {
        return this.element['type'];
    }
    set type(value) {
        this.element['type'] = value;
    }
    get name() {
        return this.element['name'];
    }
    set name(value) {
        this.element['name'] = value;
    }
    get value() {
        return this.element['value'];
    }
    set value(value) {
        this.element['value'] = value;
    }
    get disabled() {
        return this.element['disabled'];
    }
    set disabled(value) {
        if (value === '') {
            this.element['disabled'] = true;
            return;
        }
        this.element['disabled'] = value;
    }
    get ariaDisabled() {
        return this.element['ariaDisabled'];
    }
    set ariaDisabled(value) {
        this.element['ariaDisabled'] = value;
    }
}
CdsIconButtonDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-icon-button' },] }
];
CdsIconButtonDirective.propDecorators = {
    ariaLabel: [{ type: Input }],
    action: [{ type: Input }],
    status: [{ type: Input }],
    size: [{ type: Input }],
    block: [{ type: Input }],
    loadingState: [{ type: Input }],
    readonly: [{ type: Input }],
    type: [{ type: Input }],
    name: [{ type: Input }],
    value: [{ type: Input }],
    disabled: [{ type: Input }],
    ariaDisabled: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsInlineButtonDirective extends BaseCdsDirective {
    get readonly() {
        return this.element['readonly'];
    }
    set readonly(value) {
        if (value === '') {
            this.element['readonly'] = true;
            return;
        }
        this.element['readonly'] = value;
    }
    get type() {
        return this.element['type'];
    }
    set type(value) {
        this.element['type'] = value;
    }
    get name() {
        return this.element['name'];
    }
    set name(value) {
        this.element['name'] = value;
    }
    get value() {
        return this.element['value'];
    }
    set value(value) {
        this.element['value'] = value;
    }
    get disabled() {
        return this.element['disabled'];
    }
    set disabled(value) {
        if (value === '') {
            this.element['disabled'] = true;
            return;
        }
        this.element['disabled'] = value;
    }
    get ariaDisabled() {
        return this.element['ariaDisabled'];
    }
    set ariaDisabled(value) {
        this.element['ariaDisabled'] = value;
    }
}
CdsInlineButtonDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-inline-button' },] }
];
CdsInlineButtonDirective.propDecorators = {
    readonly: [{ type: Input }],
    type: [{ type: Input }],
    name: [{ type: Input }],
    value: [{ type: Input }],
    disabled: [{ type: Input }],
    ariaDisabled: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsButtonModule {
}
CdsButtonModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsButtonDirective, CdsIconButtonDirective, CdsInlineButtonDirective],
                exports: [CdsButtonDirective, CdsIconButtonDirective, CdsInlineButtonDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsCardDirective extends BaseCdsDirective {
    get role() {
        return this.element['role'];
    }
    set role(value) {
        this.element['role'] = value;
    }
    get globalStyles() {
        return this.element['globalStyles'];
    }
    set globalStyles(value) {
        this.element['globalStyles'] = value;
    }
}
CdsCardDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-card' },] }
];
CdsCardDirective.propDecorators = {
    role: [{ type: Input }],
    globalStyles: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsCardModule {
}
CdsCardModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsCardDirective],
                exports: [CdsCardDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsCheckboxGroupDirective extends BaseCdsDirective {
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get controlAlign() {
        return this.element['controlAlign'];
    }
    set controlAlign(value) {
        this.element['controlAlign'] = value;
    }
    get disabled() {
        return this.element['disabled'];
    }
    set disabled(value) {
        if (value === '') {
            this.element['disabled'] = true;
            return;
        }
        this.element['disabled'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsCheckboxGroupDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-checkbox-group' },] }
];
CdsCheckboxGroupDirective.propDecorators = {
    status: [{ type: Input }],
    layout: [{ type: Input }],
    controlAlign: [{ type: Input }],
    disabled: [{ type: Input }],
    controlWidth: [{ type: Input }],
    responsive: [{ type: Input }],
    layoutStable: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsCheckboxDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get controlAlign() {
        return this.element['controlAlign'];
    }
    set controlAlign(value) {
        this.element['controlAlign'] = value;
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsCheckboxDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-checkbox' },] }
];
CdsCheckboxDirective.propDecorators = {
    controlAlign: [{ type: Input }],
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsCheckboxModule {
}
CdsCheckboxModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsCheckboxGroupDirective, CdsCheckboxDirective],
                exports: [CdsCheckboxGroupDirective, CdsCheckboxDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsDatalistDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsDatalistDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-datalist' },] }
];
CdsDatalistDirective.propDecorators = {
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsDatalistModule {
}
CdsDatalistModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsDatalistDirective],
                exports: [CdsDatalistDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsDateDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsDateDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-date' },] }
];
CdsDateDirective.propDecorators = {
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsDateModule {
}
CdsDateModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsDateDirective],
                exports: [CdsDateDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsDividerDirective extends BaseCdsDirective {
    get orientation() {
        return this.element['orientation'];
    }
    set orientation(value) {
        this.element['orientation'] = value;
    }
}
CdsDividerDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-divider' },] }
];
CdsDividerDirective.propDecorators = {
    orientation: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsDividerModule {
}
CdsDividerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsDividerDirective],
                exports: [CdsDividerDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsFileDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get i18n() {
        return this.element['i18n'];
    }
    set i18n(value) {
        this.element['i18n'] = value;
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsFileDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-file' },] }
];
CdsFileDirective.propDecorators = {
    i18n: [{ type: Input }],
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsFileModule {
}
CdsFileModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsFileDirective],
                exports: [CdsFileDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsControlDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsControlDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-control' },] }
];
CdsControlDirective.propDecorators = {
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsControlActionDirective extends BaseCdsDirective {
    get action() {
        return this.element['action'];
    }
    set action(value) {
        this.element['action'] = value;
    }
    get readonly() {
        return this.element['readonly'];
    }
    set readonly(value) {
        if (value === '') {
            this.element['readonly'] = true;
            return;
        }
        this.element['readonly'] = value;
    }
    get ariaLabel() {
        return this.element['ariaLabel'];
    }
    set ariaLabel(value) {
        this.element['ariaLabel'] = value;
    }
    get type() {
        return this.element['type'];
    }
    set type(value) {
        this.element['type'] = value;
    }
    get name() {
        return this.element['name'];
    }
    set name(value) {
        this.element['name'] = value;
    }
    get value() {
        return this.element['value'];
    }
    set value(value) {
        this.element['value'] = value;
    }
    get disabled() {
        return this.element['disabled'];
    }
    set disabled(value) {
        if (value === '') {
            this.element['disabled'] = true;
            return;
        }
        this.element['disabled'] = value;
    }
    get ariaDisabled() {
        return this.element['ariaDisabled'];
    }
    set ariaDisabled(value) {
        this.element['ariaDisabled'] = value;
    }
}
CdsControlActionDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-control-action' },] }
];
CdsControlActionDirective.propDecorators = {
    action: [{ type: Input }],
    readonly: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    type: [{ type: Input }],
    name: [{ type: Input }],
    value: [{ type: Input }],
    disabled: [{ type: Input }],
    ariaDisabled: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsInternalControlGroupDirective extends BaseCdsDirective {
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get controlAlign() {
        return this.element['controlAlign'];
    }
    set controlAlign(value) {
        this.element['controlAlign'] = value;
    }
    get disabled() {
        return this.element['disabled'];
    }
    set disabled(value) {
        if (value === '') {
            this.element['disabled'] = true;
            return;
        }
        this.element['disabled'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsInternalControlGroupDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-internal-control-group' },] }
];
CdsInternalControlGroupDirective.propDecorators = {
    status: [{ type: Input }],
    layout: [{ type: Input }],
    controlAlign: [{ type: Input }],
    disabled: [{ type: Input }],
    controlWidth: [{ type: Input }],
    responsive: [{ type: Input }],
    layoutStable: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsInternalControlInlineDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get controlAlign() {
        return this.element['controlAlign'];
    }
    set controlAlign(value) {
        this.element['controlAlign'] = value;
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsInternalControlInlineDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-internal-control-inline' },] }
];
CdsInternalControlInlineDirective.propDecorators = {
    controlAlign: [{ type: Input }],
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsInternalControlLabelDirective extends BaseCdsDirective {
    get disabled() {
        return this.element['disabled'];
    }
    set disabled(value) {
        if (value === '') {
            this.element['disabled'] = true;
            return;
        }
        this.element['disabled'] = value;
    }
    get action() {
        return this.element['action'];
    }
    set action(value) {
        this.element['action'] = value;
    }
}
CdsInternalControlLabelDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-internal-control-label' },] }
];
CdsInternalControlLabelDirective.propDecorators = {
    disabled: [{ type: Input }],
    action: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsControlMessageDirective extends BaseCdsDirective {
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get error() {
        return this.element['error'];
    }
    set error(value) {
        this.element['error'] = value;
    }
}
CdsControlMessageDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-control-message' },] }
];
CdsControlMessageDirective.propDecorators = {
    status: [{ type: Input }],
    error: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsFormGroupDirective extends BaseCdsDirective {
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
}
CdsFormGroupDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-form-group' },] }
];
CdsFormGroupDirective.propDecorators = {
    layout: [{ type: Input }],
    controlWidth: [{ type: Input }],
    responsive: [{ type: Input }],
    validate: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsFormsModule {
}
CdsFormsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    CdsControlDirective,
                    CdsControlActionDirective,
                    CdsInternalControlGroupDirective,
                    CdsInternalControlInlineDirective,
                    CdsInternalControlLabelDirective,
                    CdsControlMessageDirective,
                    CdsFormGroupDirective,
                ],
                exports: [
                    CdsControlDirective,
                    CdsControlActionDirective,
                    CdsInternalControlGroupDirective,
                    CdsInternalControlInlineDirective,
                    CdsInternalControlLabelDirective,
                    CdsControlMessageDirective,
                    CdsFormGroupDirective,
                ],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsIconDirective extends BaseCdsDirective {
    get shape() {
        return this.element['shape'];
    }
    set shape(value) {
        this.element['shape'] = value;
    }
    get size() {
        return this.element['size'];
    }
    set size(value) {
        this.element['size'] = value;
    }
    get direction() {
        return this.element['direction'];
    }
    set direction(value) {
        this.element['direction'] = value;
    }
    get flip() {
        return this.element['flip'];
    }
    set flip(value) {
        this.element['flip'] = value;
    }
    get solid() {
        return this.element['solid'];
    }
    set solid(value) {
        if (value === '') {
            this.element['solid'] = true;
            return;
        }
        this.element['solid'] = value;
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get inverse() {
        return this.element['inverse'];
    }
    set inverse(value) {
        if (value === '') {
            this.element['inverse'] = true;
            return;
        }
        this.element['inverse'] = value;
    }
    get badge() {
        return this.element['badge'];
    }
    set badge(value) {
        this.element['badge'] = value;
    }
}
CdsIconDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-icon' },] }
];
CdsIconDirective.propDecorators = {
    shape: [{ type: Input }],
    size: [{ type: Input }],
    direction: [{ type: Input }],
    flip: [{ type: Input }],
    solid: [{ type: Input }],
    status: [{ type: Input }],
    inverse: [{ type: Input }],
    badge: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsIconModule {
}
CdsIconModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsIconDirective],
                exports: [CdsIconDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsInputGroupDirective extends BaseCdsDirective {
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get controlAlign() {
        return this.element['controlAlign'];
    }
    set controlAlign(value) {
        this.element['controlAlign'] = value;
    }
    get disabled() {
        return this.element['disabled'];
    }
    set disabled(value) {
        if (value === '') {
            this.element['disabled'] = true;
            return;
        }
        this.element['disabled'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsInputGroupDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-input-group' },] }
];
CdsInputGroupDirective.propDecorators = {
    status: [{ type: Input }],
    layout: [{ type: Input }],
    controlAlign: [{ type: Input }],
    disabled: [{ type: Input }],
    controlWidth: [{ type: Input }],
    responsive: [{ type: Input }],
    layoutStable: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsInputDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsInputDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-input' },] }
];
CdsInputDirective.propDecorators = {
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsInputModule {
}
CdsInputModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsInputGroupDirective, CdsInputDirective],
                exports: [CdsInputGroupDirective, CdsInputDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsModalActionsDirective extends BaseCdsDirective {
}
CdsModalActionsDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-modal-actions' },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsModalContentDirective extends BaseCdsDirective {
    get shadowRootOptions() {
        return this.element['shadowRootOptions'];
    }
    set shadowRootOptions(value) {
        this.element['shadowRootOptions'] = value;
    }
}
CdsModalContentDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-modal-content' },] }
];
CdsModalContentDirective.propDecorators = {
    shadowRootOptions: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsModalHeaderActionsDirective extends BaseCdsDirective {
}
CdsModalHeaderActionsDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-modal-header-actions' },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsModalHeaderDirective extends BaseCdsDirective {
}
CdsModalHeaderDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-modal-header' },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsModalDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.cdsMotionChange = new EventEmitter();
    }
    get i18n() {
        return this.element['i18n'];
    }
    set i18n(value) {
        this.element['i18n'] = value;
    }
    get closable() {
        return this.element['closable'];
    }
    set closable(value) {
        if (value === '') {
            this.element['closable'] = true;
            return;
        }
        this.element['closable'] = value;
    }
    get size() {
        return this.element['size'];
    }
    set size(value) {
        this.element['size'] = value;
    }
    get cdsMotion() {
        return this.element['cdsMotion'];
    }
    set cdsMotion(value) {
        this.element['cdsMotion'] = value;
    }
    get ariaModal() {
        return this.element['ariaModal'];
    }
    set ariaModal(value) {
        this.element['ariaModal'] = value;
    }
    get role() {
        return this.element['role'];
    }
    set role(value) {
        this.element['role'] = value;
    }
    get shadowRootOptions() {
        return this.element['shadowRootOptions'];
    }
    set shadowRootOptions(value) {
        this.element['shadowRootOptions'] = value;
    }
    get focusTrap() {
        return this.element['focusTrap'];
    }
    set focusTrap(value) {
        this.element['focusTrap'] = value;
    }
    get topReboundElement() {
        return this.element['topReboundElement'];
    }
    set topReboundElement(value) {
        this.element['topReboundElement'] = value;
    }
    get bottomReboundElement() {
        return this.element['bottomReboundElement'];
    }
    set bottomReboundElement(value) {
        this.element['bottomReboundElement'] = value;
    }
    get hidden() {
        return this.element['hidden'];
    }
    set hidden(value) {
        if (value === '') {
            this.element['hidden'] = true;
            return;
        }
        this.element['hidden'] = value;
    }
    get focusTrapId() {
        return this.element['focusTrapId'];
    }
    set focusTrapId(value) {
        this.element['focusTrapId'] = value;
    }
}
CdsModalDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-modal' },] }
];
CdsModalDirective.propDecorators = {
    i18n: [{ type: Input }],
    closable: [{ type: Input }],
    size: [{ type: Input }],
    cdsMotion: [{ type: Input }],
    ariaModal: [{ type: Input }],
    role: [{ type: Input }],
    shadowRootOptions: [{ type: Input }],
    focusTrap: [{ type: Input }],
    topReboundElement: [{ type: Input }],
    bottomReboundElement: [{ type: Input }],
    hidden: [{ type: Input }],
    focusTrapId: [{ type: Input }],
    cdsMotionChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsModalModule {
}
CdsModalModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    CdsModalActionsDirective,
                    CdsModalContentDirective,
                    CdsModalHeaderActionsDirective,
                    CdsModalHeaderDirective,
                    CdsModalDirective,
                ],
                exports: [
                    CdsModalActionsDirective,
                    CdsModalContentDirective,
                    CdsModalHeaderActionsDirective,
                    CdsModalHeaderDirective,
                    CdsModalDirective,
                ],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsNavigationGroupDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.cdsMotionChange = new EventEmitter();
    }
    get cdsMotion() {
        return this.element['cdsMotion'];
    }
    set cdsMotion(value) {
        this.element['cdsMotion'] = value;
    }
    get i18n() {
        return this.element['i18n'];
    }
    set i18n(value) {
        this.element['i18n'] = value;
    }
    get expanded() {
        return this.element['expanded'];
    }
    set expanded(value) {
        if (value === '') {
            this.element['expanded'] = true;
            return;
        }
        this.element['expanded'] = value;
    }
    get active() {
        return this.element['active'];
    }
    set active(value) {
        if (value === '') {
            this.element['active'] = true;
            return;
        }
        this.element['active'] = value;
    }
    get hasFocus() {
        return this.element['hasFocus'];
    }
    set hasFocus(value) {
        if (value === '') {
            this.element['hasFocus'] = true;
            return;
        }
        this.element['hasFocus'] = value;
    }
}
CdsNavigationGroupDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-navigation-group' },] }
];
CdsNavigationGroupDirective.propDecorators = {
    cdsMotion: [{ type: Input }],
    i18n: [{ type: Input }],
    expanded: [{ type: Input }],
    active: [{ type: Input }],
    hasFocus: [{ type: Input }],
    cdsMotionChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsNavigationItemDirective extends BaseCdsDirective {
    get i18n() {
        return this.element['i18n'];
    }
    set i18n(value) {
        this.element['i18n'] = value;
    }
    get active() {
        return this.element['active'];
    }
    set active(value) {
        if (value === '') {
            this.element['active'] = true;
            return;
        }
        this.element['active'] = value;
    }
    get disabled() {
        return this.element['disabled'];
    }
    set disabled(value) {
        if (value === '') {
            this.element['disabled'] = true;
            return;
        }
        this.element['disabled'] = value;
    }
    get role() {
        return this.element['role'];
    }
    set role(value) {
        this.element['role'] = value;
    }
    get expanded() {
        return this.element['expanded'];
    }
    set expanded(value) {
        if (value === '') {
            this.element['expanded'] = true;
            return;
        }
        this.element['expanded'] = value;
    }
    get groupItem() {
        return this.element['groupItem'];
    }
    set groupItem(value) {
        if (value === '') {
            this.element['groupItem'] = true;
            return;
        }
        this.element['groupItem'] = value;
    }
    get hasFocus() {
        return this.element['hasFocus'];
    }
    set hasFocus(value) {
        this.element['hasFocus'] = value;
    }
    get focusElement() {
        return this.element['focusElement'];
    }
    set focusElement(value) {
        this.element['focusElement'] = value;
    }
    get itemText() {
        return this.element['itemText'];
    }
    set itemText(value) {
        this.element['itemText'] = value;
    }
}
CdsNavigationItemDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-navigation-item' },] }
];
CdsNavigationItemDirective.propDecorators = {
    i18n: [{ type: Input }],
    active: [{ type: Input }],
    disabled: [{ type: Input }],
    role: [{ type: Input }],
    expanded: [{ type: Input }],
    groupItem: [{ type: Input }],
    hasFocus: [{ type: Input }],
    focusElement: [{ type: Input }],
    itemText: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsNavigationStartDirective extends BaseCdsDirective {
    get i18n() {
        return this.element['i18n'];
    }
    set i18n(value) {
        this.element['i18n'] = value;
    }
    get expandedRoot() {
        return this.element['expandedRoot'];
    }
    set expandedRoot(value) {
        if (value === '') {
            this.element['expandedRoot'] = true;
            return;
        }
        this.element['expandedRoot'] = value;
    }
    get hasFocus() {
        return this.element['hasFocus'];
    }
    set hasFocus(value) {
        this.element['hasFocus'] = value;
    }
    get isGroupStart() {
        return this.element['isGroupStart'];
    }
    set isGroupStart(value) {
        if (value === '') {
            this.element['isGroupStart'] = true;
            return;
        }
        this.element['isGroupStart'] = value;
    }
    get role() {
        return this.element['role'];
    }
    set role(value) {
        this.element['role'] = value;
    }
    get navigationGroupId() {
        return this.element['navigationGroupId'];
    }
    set navigationGroupId(value) {
        this.element['navigationGroupId'] = value;
    }
    get itemText() {
        return this.element['itemText'];
    }
    set itemText(value) {
        this.element['itemText'] = value;
    }
    get toggleIconDirection() {
        return this.element['toggleIconDirection'];
    }
    set toggleIconDirection(value) {
        this.element['toggleIconDirection'] = value;
    }
}
CdsNavigationStartDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-navigation-start' },] }
];
CdsNavigationStartDirective.propDecorators = {
    i18n: [{ type: Input }],
    expandedRoot: [{ type: Input }],
    hasFocus: [{ type: Input }],
    isGroupStart: [{ type: Input }],
    role: [{ type: Input }],
    navigationGroupId: [{ type: Input }],
    itemText: [{ type: Input }],
    toggleIconDirection: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsNavigationDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.cdsMotionChange = new EventEmitter();
    }
    get expandedRoot() {
        return this.element['expandedRoot'];
    }
    set expandedRoot(value) {
        if (value === '') {
            this.element['expandedRoot'] = true;
            return;
        }
        this.element['expandedRoot'] = value;
    }
    get cdsMotion() {
        return this.element['cdsMotion'];
    }
    set cdsMotion(value) {
        this.element['cdsMotion'] = value;
    }
    get role() {
        return this.element['role'];
    }
    set role(value) {
        this.element['role'] = value;
    }
    get ariaActiveDescendant() {
        return this.element['ariaActiveDescendant'];
    }
    set ariaActiveDescendant(value) {
        this.element['ariaActiveDescendant'] = value;
    }
    get expanded() {
        return this.element['expanded'];
    }
    set expanded(value) {
        if (value === '') {
            this.element['expanded'] = true;
            return;
        }
        this.element['expanded'] = value;
    }
    get i18n() {
        return this.element['i18n'];
    }
    set i18n(value) {
        this.element['i18n'] = value;
    }
    get currentActiveItem() {
        return this.element['currentActiveItem'];
    }
    set currentActiveItem(value) {
        this.element['currentActiveItem'] = value;
    }
}
CdsNavigationDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-navigation' },] }
];
CdsNavigationDirective.propDecorators = {
    expandedRoot: [{ type: Input }],
    cdsMotion: [{ type: Input }],
    role: [{ type: Input }],
    ariaActiveDescendant: [{ type: Input }],
    expanded: [{ type: Input }],
    i18n: [{ type: Input }],
    currentActiveItem: [{ type: Input }],
    cdsMotionChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsNavigationModule {
}
CdsNavigationModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    CdsNavigationGroupDirective,
                    CdsNavigationItemDirective,
                    CdsNavigationStartDirective,
                    CdsNavigationDirective,
                ],
                exports: [
                    CdsNavigationGroupDirective,
                    CdsNavigationItemDirective,
                    CdsNavigationStartDirective,
                    CdsNavigationDirective,
                ],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsPaginationButtonDirective extends BaseCdsDirective {
    get action() {
        return this.element['action'];
    }
    set action(value) {
        this.element['action'] = value;
    }
    get cdsIcon() {
        return this.element['cdsIcon'];
    }
    set cdsIcon(value) {
        this.element['cdsIcon'] = value;
    }
    get readonly() {
        return this.element['readonly'];
    }
    set readonly(value) {
        if (value === '') {
            this.element['readonly'] = true;
            return;
        }
        this.element['readonly'] = value;
    }
    get type() {
        return this.element['type'];
    }
    set type(value) {
        this.element['type'] = value;
    }
    get name() {
        return this.element['name'];
    }
    set name(value) {
        this.element['name'] = value;
    }
    get value() {
        return this.element['value'];
    }
    set value(value) {
        this.element['value'] = value;
    }
    get disabled() {
        return this.element['disabled'];
    }
    set disabled(value) {
        if (value === '') {
            this.element['disabled'] = true;
            return;
        }
        this.element['disabled'] = value;
    }
    get ariaDisabled() {
        return this.element['ariaDisabled'];
    }
    set ariaDisabled(value) {
        this.element['ariaDisabled'] = value;
    }
}
CdsPaginationButtonDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-pagination-button' },] }
];
CdsPaginationButtonDirective.propDecorators = {
    action: [{ type: Input }],
    cdsIcon: [{ type: Input }],
    readonly: [{ type: Input }],
    type: [{ type: Input }],
    name: [{ type: Input }],
    value: [{ type: Input }],
    disabled: [{ type: Input }],
    ariaDisabled: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsPaginationDirective extends BaseCdsDirective {
}
CdsPaginationDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-pagination' },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsPaginationModule {
}
CdsPaginationModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsPaginationButtonDirective, CdsPaginationDirective],
                exports: [CdsPaginationButtonDirective, CdsPaginationDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsPasswordDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get i18n() {
        return this.element['i18n'];
    }
    set i18n(value) {
        this.element['i18n'] = value;
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsPasswordDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-password' },] }
];
CdsPasswordDirective.propDecorators = {
    i18n: [{ type: Input }],
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsPasswordModule {
}
CdsPasswordModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsPasswordDirective],
                exports: [CdsPasswordDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsProgressCircleDirective extends BaseCdsDirective {
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get inverse() {
        return this.element['inverse'];
    }
    set inverse(value) {
        if (value === '') {
            this.element['inverse'] = true;
            return;
        }
        this.element['inverse'] = value;
    }
    get value() {
        return this.element['value'];
    }
    set value(value) {
        this.element['value'] = value;
    }
    get line() {
        return this.element['line'];
    }
    set line(value) {
        this.element['line'] = value;
    }
    get size() {
        return this.element['size'];
    }
    set size(value) {
        this.element['size'] = value;
    }
}
CdsProgressCircleDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-progress-circle' },] }
];
CdsProgressCircleDirective.propDecorators = {
    status: [{ type: Input }],
    inverse: [{ type: Input }],
    value: [{ type: Input }],
    line: [{ type: Input }],
    size: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsProgressCircleModule {
}
CdsProgressCircleModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsProgressCircleDirective],
                exports: [CdsProgressCircleDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsRadioGroupDirective extends BaseCdsDirective {
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get controlAlign() {
        return this.element['controlAlign'];
    }
    set controlAlign(value) {
        this.element['controlAlign'] = value;
    }
    get disabled() {
        return this.element['disabled'];
    }
    set disabled(value) {
        if (value === '') {
            this.element['disabled'] = true;
            return;
        }
        this.element['disabled'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsRadioGroupDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-radio-group' },] }
];
CdsRadioGroupDirective.propDecorators = {
    status: [{ type: Input }],
    layout: [{ type: Input }],
    controlAlign: [{ type: Input }],
    disabled: [{ type: Input }],
    controlWidth: [{ type: Input }],
    responsive: [{ type: Input }],
    layoutStable: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsRadioDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get controlAlign() {
        return this.element['controlAlign'];
    }
    set controlAlign(value) {
        this.element['controlAlign'] = value;
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsRadioDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-radio' },] }
];
CdsRadioDirective.propDecorators = {
    controlAlign: [{ type: Input }],
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsRadioModule {
}
CdsRadioModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsRadioGroupDirective, CdsRadioDirective],
                exports: [CdsRadioGroupDirective, CdsRadioDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsRangeDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsRangeDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-range' },] }
];
CdsRangeDirective.propDecorators = {
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsRangeModule {
}
CdsRangeModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsRangeDirective],
                exports: [CdsRangeDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsSearchDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsSearchDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-search' },] }
];
CdsSearchDirective.propDecorators = {
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsSearchModule {
}
CdsSearchModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsSearchDirective],
                exports: [CdsSearchDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsSelectDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsSelectDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-select' },] }
];
CdsSelectDirective.propDecorators = {
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsSelectModule {
}
CdsSelectModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsSelectDirective],
                exports: [CdsSelectDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsCheckboxPanelDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get size() {
        return this.element['size'];
    }
    set size(value) {
        this.element['size'] = value;
    }
    get controlAlign() {
        return this.element['controlAlign'];
    }
    set controlAlign(value) {
        this.element['controlAlign'] = value;
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsCheckboxPanelDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-checkbox' },] }
];
CdsCheckboxPanelDirective.propDecorators = {
    size: [{ type: Input }],
    controlAlign: [{ type: Input }],
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsRadioPanelDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get size() {
        return this.element['size'];
    }
    set size(value) {
        this.element['size'] = value;
    }
    get controlAlign() {
        return this.element['controlAlign'];
    }
    set controlAlign(value) {
        this.element['controlAlign'] = value;
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsRadioPanelDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-radio' },] }
];
CdsRadioPanelDirective.propDecorators = {
    size: [{ type: Input }],
    controlAlign: [{ type: Input }],
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsSelectionPanelsModule {
}
CdsSelectionPanelsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsCheckboxPanelDirective, CdsRadioPanelDirective],
                exports: [CdsCheckboxPanelDirective, CdsRadioPanelDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsTagDirective extends BaseCdsDirective {
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get color() {
        return this.element['color'];
    }
    set color(value) {
        this.element['color'] = value;
    }
    get closable() {
        return this.element['closable'];
    }
    set closable(value) {
        if (value === '') {
            this.element['closable'] = true;
            return;
        }
        this.element['closable'] = value;
    }
    get readonly() {
        return this.element['readonly'];
    }
    set readonly(value) {
        if (value === '') {
            this.element['readonly'] = true;
            return;
        }
        this.element['readonly'] = value;
    }
    get type() {
        return this.element['type'];
    }
    set type(value) {
        this.element['type'] = value;
    }
    get name() {
        return this.element['name'];
    }
    set name(value) {
        this.element['name'] = value;
    }
    get value() {
        return this.element['value'];
    }
    set value(value) {
        this.element['value'] = value;
    }
    get disabled() {
        return this.element['disabled'];
    }
    set disabled(value) {
        if (value === '') {
            this.element['disabled'] = true;
            return;
        }
        this.element['disabled'] = value;
    }
    get ariaDisabled() {
        return this.element['ariaDisabled'];
    }
    set ariaDisabled(value) {
        this.element['ariaDisabled'] = value;
    }
}
CdsTagDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-tag' },] }
];
CdsTagDirective.propDecorators = {
    status: [{ type: Input }],
    color: [{ type: Input }],
    closable: [{ type: Input }],
    readonly: [{ type: Input }],
    type: [{ type: Input }],
    name: [{ type: Input }],
    value: [{ type: Input }],
    disabled: [{ type: Input }],
    ariaDisabled: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsTagModule {
}
CdsTagModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsTagDirective],
                exports: [CdsTagDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsTextareaDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsTextareaDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-textarea' },] }
];
CdsTextareaDirective.propDecorators = {
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsTextareaModule {
}
CdsTextareaModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsTextareaDirective],
                exports: [CdsTextareaDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsTimeDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsTimeDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-time' },] }
];
CdsTimeDirective.propDecorators = {
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsTimeModule {
}
CdsTimeModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsTimeDirective],
                exports: [CdsTimeDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsToggleGroupDirective extends BaseCdsDirective {
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get controlAlign() {
        return this.element['controlAlign'];
    }
    set controlAlign(value) {
        this.element['controlAlign'] = value;
    }
    get disabled() {
        return this.element['disabled'];
    }
    set disabled(value) {
        if (value === '') {
            this.element['disabled'] = true;
            return;
        }
        this.element['disabled'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsToggleGroupDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-toggle-group' },] }
];
CdsToggleGroupDirective.propDecorators = {
    status: [{ type: Input }],
    layout: [{ type: Input }],
    controlAlign: [{ type: Input }],
    disabled: [{ type: Input }],
    controlWidth: [{ type: Input }],
    responsive: [{ type: Input }],
    layoutStable: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsToggleDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.layoutChange = new EventEmitter();
    }
    get cdsMotion() {
        return this.element['cdsMotion'];
    }
    set cdsMotion(value) {
        this.element['cdsMotion'] = value;
    }
    get controlAlign() {
        return this.element['controlAlign'];
    }
    set controlAlign(value) {
        this.element['controlAlign'] = value;
    }
    get status() {
        return this.element['status'];
    }
    set status(value) {
        this.element['status'] = value;
    }
    get controlWidth() {
        return this.element['controlWidth'];
    }
    set controlWidth(value) {
        this.element['controlWidth'] = value;
    }
    get validate() {
        return this.element['validate'];
    }
    set validate(value) {
        if (value === '') {
            this.element['validate'] = true;
            return;
        }
        this.element['validate'] = value;
    }
    get responsive() {
        return this.element['responsive'];
    }
    set responsive(value) {
        if (value === '') {
            this.element['responsive'] = true;
            return;
        }
        this.element['responsive'] = value;
    }
    get layout() {
        return this.element['layout'];
    }
    set layout(value) {
        this.element['layout'] = value;
    }
    get layoutStable() {
        return this.element['layoutStable'];
    }
    set layoutStable(value) {
        if (value === '') {
            this.element['layoutStable'] = true;
            return;
        }
        this.element['layoutStable'] = value;
    }
}
CdsToggleDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-toggle' },] }
];
CdsToggleDirective.propDecorators = {
    cdsMotion: [{ type: Input }],
    controlAlign: [{ type: Input }],
    status: [{ type: Input }],
    controlWidth: [{ type: Input }],
    validate: [{ type: Input }],
    responsive: [{ type: Input }],
    layout: [{ type: Input }],
    layoutStable: [{ type: Input }],
    layoutChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsToggleModule {
}
CdsToggleModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsToggleGroupDirective, CdsToggleDirective],
                exports: [CdsToggleGroupDirective, CdsToggleDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsTreeItemDirective extends BaseCdsDirective {
    constructor() {
        super(...arguments);
        this.cdsMotionChange = new EventEmitter();
    }
    get i18n() {
        return this.element['i18n'];
    }
    set i18n(value) {
        this.element['i18n'] = value;
    }
    get role() {
        return this.element['role'];
    }
    set role(value) {
        this.element['role'] = value;
    }
    get cdsMotion() {
        return this.element['cdsMotion'];
    }
    set cdsMotion(value) {
        this.element['cdsMotion'] = value;
    }
    get ariaDisabled() {
        return this.element['ariaDisabled'];
    }
    set ariaDisabled(value) {
        this.element['ariaDisabled'] = value;
    }
    get ariaExpanded() {
        return this.element['ariaExpanded'];
    }
    set ariaExpanded(value) {
        this.element['ariaExpanded'] = value;
    }
    get ariaSelected() {
        return this.element['ariaSelected'];
    }
    set ariaSelected(value) {
        this.element['ariaSelected'] = value;
    }
    get multiSelect() {
        return this.element['multiSelect'];
    }
    set multiSelect(value) {
        if (value === '') {
            this.element['multiSelect'] = true;
            return;
        }
        this.element['multiSelect'] = value;
    }
    get disabled() {
        return this.element['disabled'];
    }
    set disabled(value) {
        if (value === '') {
            this.element['disabled'] = true;
            return;
        }
        this.element['disabled'] = value;
    }
    get expanded() {
        return this.element['expanded'];
    }
    set expanded(value) {
        if (value === '') {
            this.element['expanded'] = true;
            return;
        }
        this.element['expanded'] = value;
    }
    get expandable() {
        return this.element['expandable'];
    }
    set expandable(value) {
        if (value === '') {
            this.element['expandable'] = true;
            return;
        }
        this.element['expandable'] = value;
    }
    get indeterminate() {
        return this.element['indeterminate'];
    }
    set indeterminate(value) {
        if (value === '') {
            this.element['indeterminate'] = true;
            return;
        }
        this.element['indeterminate'] = value;
    }
    get loading() {
        return this.element['loading'];
    }
    set loading(value) {
        if (value === '') {
            this.element['loading'] = true;
            return;
        }
        this.element['loading'] = value;
    }
    get selected() {
        return this.element['selected'];
    }
    set selected(value) {
        if (value === '') {
            this.element['selected'] = true;
            return;
        }
        this.element['selected'] = value;
    }
}
CdsTreeItemDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-tree-item' },] }
];
CdsTreeItemDirective.propDecorators = {
    i18n: [{ type: Input }],
    role: [{ type: Input }],
    cdsMotion: [{ type: Input }],
    ariaDisabled: [{ type: Input }],
    ariaExpanded: [{ type: Input }],
    ariaSelected: [{ type: Input }],
    multiSelect: [{ type: Input }],
    disabled: [{ type: Input }],
    expanded: [{ type: Input }],
    expandable: [{ type: Input }],
    indeterminate: [{ type: Input }],
    loading: [{ type: Input }],
    selected: [{ type: Input }],
    cdsMotionChange: [{ type: Output }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsTreeDirective extends BaseCdsDirective {
    get role() {
        return this.element['role'];
    }
    set role(value) {
        this.element['role'] = value;
    }
    get multiSelect() {
        return this.element['multiSelect'];
    }
    set multiSelect(value) {
        if (value === '') {
            this.element['multiSelect'] = true;
            return;
        }
        this.element['multiSelect'] = value;
    }
    get ariaActiveDescendant() {
        return this.element['ariaActiveDescendant'];
    }
    set ariaActiveDescendant(value) {
        this.element['ariaActiveDescendant'] = value;
    }
    get ariaMultiSelectable() {
        return this.element['ariaMultiSelectable'];
    }
    set ariaMultiSelectable(value) {
        this.element['ariaMultiSelectable'] = value;
    }
}
CdsTreeDirective.decorators = [
    { type: Directive, args: [{ selector: 'cds-tree' },] }
];
CdsTreeDirective.propDecorators = {
    role: [{ type: Input }],
    multiSelect: [{ type: Input }],
    ariaActiveDescendant: [{ type: Input }],
    ariaMultiSelectable: [{ type: Input }]
};

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsTreeViewModule {
}
CdsTreeViewModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [CdsTreeItemDirective, CdsTreeDirective],
                exports: [CdsTreeItemDirective, CdsTreeDirective],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
class CdsModule {
}
CdsModule.decorators = [
    { type: NgModule, args: [{
                exports: [
                    CdsAccordionModule,
                    CdsAlertModule,
                    CdsBadgeModule,
                    CdsBreadcrumbModule,
                    CdsButtonModule,
                    CdsCardModule,
                    CdsCheckboxModule,
                    CdsDatalistModule,
                    CdsDateModule,
                    CdsDividerModule,
                    CdsFileModule,
                    CdsFormsModule,
                    CdsIconModule,
                    CdsInputModule,
                    CdsModalModule,
                    CdsNavigationModule,
                    CdsPaginationModule,
                    CdsPasswordModule,
                    CdsProgressCircleModule,
                    CdsRadioModule,
                    CdsRangeModule,
                    CdsSearchModule,
                    CdsSelectModule,
                    CdsSelectionPanelsModule,
                    CdsTagModule,
                    CdsTextareaModule,
                    CdsTimeModule,
                    CdsToggleModule,
                    CdsTreeViewModule,
                ],
            },] }
];

/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */

/*
 * Public API Surface of cds-angular
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CdsAccordionContentDirective, CdsAccordionDirective, CdsAccordionHeaderDirective, CdsAccordionModule, CdsAccordionPanelDirective, CdsAlertActionsDirective, CdsAlertDirective, CdsAlertGroupDirective, CdsAlertModule, CdsBadgeDirective, CdsBadgeModule, CdsBreadcrumbDirective, CdsBreadcrumbModule, CdsButtonDirective, CdsButtonModule, CdsCardDirective, CdsCardModule, CdsCheckboxDirective, CdsCheckboxGroupDirective, CdsCheckboxModule, CdsCheckboxPanelDirective, CdsControlActionDirective, CdsControlDirective, CdsControlMessageDirective, CdsDatalistDirective, CdsDatalistModule, CdsDateDirective, CdsDateModule, CdsDividerDirective, CdsDividerModule, CdsFileDirective, CdsFileModule, CdsFormGroupDirective, CdsFormsModule, CdsIconButtonDirective, CdsIconDirective, CdsIconModule, CdsInlineButtonDirective, CdsInputDirective, CdsInputGroupDirective, CdsInputModule, CdsInternalControlGroupDirective, CdsInternalControlInlineDirective, CdsInternalControlLabelDirective, CdsModalActionsDirective, CdsModalContentDirective, CdsModalDirective, CdsModalHeaderActionsDirective, CdsModalHeaderDirective, CdsModalModule, CdsModule, CdsNavigationDirective, CdsNavigationGroupDirective, CdsNavigationItemDirective, CdsNavigationModule, CdsNavigationStartDirective, CdsPaginationButtonDirective, CdsPaginationDirective, CdsPaginationModule, CdsPasswordDirective, CdsPasswordModule, CdsProgressCircleDirective, CdsProgressCircleModule, CdsRadioDirective, CdsRadioGroupDirective, CdsRadioModule, CdsRadioPanelDirective, CdsRangeDirective, CdsRangeModule, CdsSearchDirective, CdsSearchModule, CdsSelectDirective, CdsSelectModule, CdsSelectionPanelsModule, CdsTagDirective, CdsTagModule, CdsTextareaDirective, CdsTextareaModule, CdsTimeDirective, CdsTimeModule, CdsToggleDirective, CdsToggleGroupDirective, CdsToggleModule, CdsTreeDirective, CdsTreeItemDirective, CdsTreeViewModule, BaseCdsDirective as ɵa };
//# sourceMappingURL=cds-angular.js.map
